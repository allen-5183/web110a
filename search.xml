<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>原生 Ajax 對象</title>
    <url>/ajax/20201005-ajax/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Ajax-與-Http-協議"><a href="#Ajax-與-Http-協議" class="headerlink" title="Ajax 與 Http 協議"></a>Ajax 與 Http 協議</h2><h3 id="Ajax-與-Http-協議詳解"><a href="#Ajax-與-Http-協議詳解" class="headerlink" title="Ajax 與 Http 協議詳解"></a>Ajax 與 Http 協議詳解</h3><p>  在 <strong>jQuery</strong> 中 已經提到了 <strong>Ajax</strong>，並且通過 <strong><code>$.ajax()</code></strong> 方法實現了和前後臺完成的簡單交互。但事實上在工作當中 <strong>jQuery</strong> 所提供的功能卻是遠遠不夠的，絕大部分的公司實際上並不希望他們的開發者使用現有的 <strong>Ajax</strong> 框架，而是選擇自行封裝一個功能相似但針對性卻更強的內容。因此我們必須知道在 <strong>js</strong> 內部，<strong>Ajax</strong> 到底是怎樣工作的。</p>
<p>而在此之前，讓我們先對 <strong>Ajax</strong> 本身做一些詳細的說明。</p>
<ul>
<li><p>描述 <strong>Ajax</strong> 全名為 <code>Asynchronous javascript and xml</code>。<br>   <font color="red">是指圍繞【由 js 向伺服器發起 <code>http</code> 請求】這個功能而開發的一整套完整的做法。</font></p>
</li>
<li><p>由來</p>
<ul>
<li>99 年 Microsoft 公司第一次在 <code>IE5.0</code> 中引入此功能</li>
<li>04 年 Gmail 發佈、05 年 Google Map 發佈時此功能才被重視 </li>
<li>05 年 2 月 Ajax 正式提出</li>
<li>06 年 W3C 發佈其對應的國際化標準</li>
</ul>
</li>
<li><p>概述 Ajax模組在處理網路請求的時候包括以下五個步驟</p>
<ol>
<li>創建 <code>Xhr</code> 對象</li>
<li>構建 <code>Xhr</code> 對象的屬性和方法</li>
<li>由 <code>Xhr</code> 對象發出 <code>HTTP</code> 請求</li>
<li>通過 <code>Xhr</code> 對象的方法，接收伺服器回傳的資料</li>
<li>更新網頁數據</li>
</ol>
</li>
</ul>
<p>這幾個步驟都離不開 <code>Xhr</code> 對象，可見其重要性，如同操作 DOM 時所需要的對象 <code>document</code>。</p>
<ul>
<li><p>補充</p>
<ul>
<li><p>Ajax可以發出同步請求，也可以發出非同步請求。<br> &nbsp;但大多數情況下指的是非同步請求，因為同步的Ajax請求對流覽器會產生”阻塞效應”</p>
</li>
<li><p>HTTP(超文本傳輸協議)<br>可以透過此協議來進行文本或超文本(視頻、圖片、二進制等)文件的發送，簡單說，把所有數據打包成二進制採用 <code>JSON</code> 格式來發送。</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>JSON 文件</p>
</blockquote>
<p>  JSON 是字符串形式，本身是一種字符串的轉碼格式，表現為 JavaScript 的對象結構，但本質是由單引號所定義的字串，為何需要字符串，因為物聯網中要傳送數據，必須使用字符串，這是由硬體所決定，所有數據傳輸都必須採用字符串，由硬體決定，計算機中處裡數據只能0(沒過電)或1(過電)，這裡使用 1 個 bit 來控制，而在數據上基本單位 byte = 8bit， 定義了一字符串 ‘A’ 代表了要產生 65 (100000001)，發送到電腦中即處理 100000001(高低低低低低低高) 電位。</p>
<ul>
<li><p>範例:</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span>   <span class="token punctuation">,</span>
    url<span class="token operator">:</span>    <span class="token punctuation">,</span>
    dataType<span class="token operator">:</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">error</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'GET'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'ajax.php'</span><span class="token punctuation">,</span><span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="xhr-對象"><a href="#xhr-對象" class="headerlink" title="xhr 對象"></a>xhr 對象</h3><h4 id="1-xhr-物件發送請求整體感知"><a href="#1-xhr-物件發送請求整體感知" class="headerlink" title="1. xhr 物件發送請求整體感知"></a>1. xhr 物件發送請求整體感知</h4><p>【Ajax 發送請求】這件事情並不是一句話帶過就可以的，在 <code>Ajax</code> 中對整個請求從創建到發送都有著一套嚴格的標準流程。就好像車間生產產品，流水線上每一個步 驟的操作完畢之後才能打包出售。</p>
<p>在 <code>Ajax</code> 規則中，”請求” <font color="red">從創建到被發送</font>需要至少經歷如下幾個步驟：</p>
<p>通過 <code>XMLHttpRequest</code> 類別創建 <code>xhr</code> 對象<br>為 <code>xhr</code> 物件添加屬性與回調方法<br>令 <code>xhr</code> 物件執行 <code>open()</code> 方法，指明請求被發往某處<br>令 <code>xhr</code> 物件執行 <code>send()</code> 方法，發出請求。</p>
<ul>
<li>說明：<code>XMLHttpRequest</code> 物件用來在【流覽器】與【伺服器】之間傳送資料。<pre><code> &lt;font color='red'&gt;通俗上來說將此物件稱為 `request` 請求物件、請求物件或請求。&lt;/font&gt;</code></pre>
</li>
</ul>
<h4 id="2-xhr-物件的常用屬性與方法"><a href="#2-xhr-物件的常用屬性與方法" class="headerlink" title="2. xhr 物件的常用屬性與方法"></a>2. xhr 物件的常用屬性與方法</h4><p>在整體感知中我們看到的例子中的屬性和方法，基本都是要掌握的內容。或許有一些內容<br>並沒有體現在上面，但相信我他們都會是你今後離不開的東西。</p>
<h5 id="2-1-onreadystate-屬性"><a href="#2-1-onreadystate-屬性" class="headerlink" title="2.1 onreadystate 屬性"></a>2.1 onreadystate 屬性</h5><ul>
<li><p>描述 <code>onreadystatechange</code> 屬性指向一個回呼函數。<br>   當頁面的載入狀態發生改變的時候 <code>readyState</code> 屬性就會跟隨發生變化，而這時 <code>readystatechange</code> 屬性所對應的回呼函數就會自動被調用。</p>
</li>
<li><p>語法 <font color="red">xhr.onreadystatechange = function(){};</font></p>
<br>
&gt;DOM 中 `readystatechange` 事件的每個對象都有一個 readyState 屬性，其中有五個可能值，如下表所示:

<table>
<thead>
<tr>
<th align="left">屬性值</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">uninitialized（未初始化）</td>
<td>對象存在但尚未初始化。</td>
</tr>
<tr>
<td align="left">loading（正在載入）</td>
<td>物件正在載入資料。</td>
</tr>
<tr>
<td align="left">loaded（載入完畢）</td>
<td>物件載入資料完成。</td>
</tr>
<tr>
<td align="left">interactive（交互）</td>
<td>可以操作物件了，但還沒有完全載入(外部資源)。</td>
</tr>
<tr>
<td align="left">complete（完成）</td>
<td>物件已經載入完畢。</td>
</tr>
</tbody></table>
</li>
<li><p>範例</p>
<p><code>xhr_org.html</code></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>xhr 對像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>發送請求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>xhr.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$success</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'msg'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token single-quoted-string string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$success</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h5 id="2-2-readyState-屬性"><a href="#2-2-readyState-屬性" class="headerlink" title="2.2 readyState 屬性"></a>2.2 readyState 屬性</h5><ul>
<li><p>描述 是一個唯讀屬性，用一個整數和對應的常量來表示XMLHttpRequest請求當前所處的狀態一般會在onreadystatechange事件的回呼函數中，通過判斷readyState屬性的值，進而執行不同狀態對應的函數。</p>
</li>
<li><p>語法</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">// 執行對應的函數</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>說明</p>
<ol>
<li><p>值為 0,對應常數 <code>UNSENT</code><br>表示 <code>XMLHttpRequest</code> 實例已經生成，但是 <code>open()方法</code>還沒有被調用，尚未提出請求。</p>
</li>
<li><p>值為 1,對應常數 <code>OPENED</code></p>
<pre><code>表示 `send()` 方法還沒有被調用，仍然可以使用 `setRequestHeader()` 設定 `HTTP` 請求頭</code></pre>
</li>
<li><p>值為 2,對應常數 <code>HEADERS_RECEIVED</code><br>表示 <code>send()</code> 方法已經執行，並且頭資訊和狀態碼已經收到，伺服器尚未收到。</p>
</li>
<li><p>值為 3,對應常數 <code>LOADING</code><br>表示正在接收伺服器傳來的 <code>body</code> 部分的資料，如果 <code>responseType</code> 屬性是 <code>text</code> 或者空字串，<code>responseText</code> 就會包含已經收到的部分資訊，伺服器正在接收。</p>
</li>
<li><p>值為 4,對應常數 <code>DONE</code>，表示伺服器資料已經完全接收，或者本次接收已經失敗了。</p>
</li>
</ol>
</li>
</ul>
<h5 id="2-3-status-屬性"><a href="#2-3-status-屬性" class="headerlink" title="2.3 status 屬性"></a>2.3 status 屬性</h5><ul>
<li><p>描述 表示本次請求所得到的 HTTP 狀態碼，它是一個整數。</p>
</li>
<li><p>語法</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//通信成功</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>說明<br>a.本屬性是唯讀屬性。<br>b.本屬性有以下可能值：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">代碼</th>
<th align="left">狀態資訊</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">200</td>
<td align="left">OK</td>
<td align="left">訪問正常</td>
</tr>
<tr>
<td align="left">301</td>
<td align="left">Moved Permanently</td>
<td align="left">永久移動</td>
</tr>
<tr>
<td align="left">302</td>
<td align="left">Move temporarily</td>
<td align="left">暫時移動</td>
</tr>
<tr>
<td align="left">304</td>
<td align="left">Not Modified</td>
<td align="left">未修改</td>
</tr>
<tr>
<td align="left">307</td>
<td align="left">Temporary Redirect</td>
<td align="left">暫時重定向</td>
</tr>
<tr>
<td align="left">401</td>
<td align="left">Unauthorized</td>
<td align="left">未授權</td>
</tr>
<tr>
<td align="left">403</td>
<td align="left">Forbidden</td>
<td align="left">禁止訪問</td>
</tr>
<tr>
<td align="left">404</td>
<td align="left">Not Found</td>
<td align="left">未發現指定網址</td>
</tr>
<tr>
<td align="left">500</td>
<td align="left">Internal Server Error</td>
<td align="left">伺服器發生錯誤</td>
</tr>
</tbody></table>
<ul>
<li>補充 一般來說認為 <code>200</code> 就是通信成功的標誌。</li>
</ul>
<h5 id="2-4-statusText-屬性"><a href="#2-4-statusText-屬性" class="headerlink" title="2.4 statusText 屬性"></a>2.4 statusText 屬性</h5><ul>
<li>描述 表示伺服器發送的狀態提示，是一個唯讀字串。</li>
<li>語法 <font color="red">xhr.statusText</font></li>
<li>說明 不同於 <code>status</code> 屬性，該屬性返回狀態碼所對應的狀態資訊。比如 <code>OK</code>。</li>
</ul>
<h5 id="2-5-responseText-屬性"><a href="#2-5-responseText-屬性" class="headerlink" title="2.5 responseText 屬性"></a>2.5 responseText 屬性</h5><ul>
<li><p>描述 返回從伺服器接收到的字串內容，該屬性為唯讀。</p>
<pre><code> 如果本次請求沒有成功或者資料不完整，該屬性就會等於 `null`。
 如果伺服器返回的資料格式是 `JSON`，就可以使用 `responseText` 屬性來進行資料解析。</code></pre>
</li>
<li><p>語法 <font color="red">xhr.responseText</font></p>
</li>
</ul>
<h5 id="2-6-open-方法"><a href="#2-6-open-方法" class="headerlink" title="2.6 open()方法"></a>2.6 open()方法</h5><ul>
<li><p>描述 表示要將請求發往某處，只是設置而不是真的發送。</p>
</li>
<li><p>語法 <font color="red">xhr.open(‘請求類型’，’url地址’，是否非同步);</font></p>
</li>
<li><p>說明<br>第一個參數用來設置 <code>get/post</code> 請求<br>第二個參數用來設置請求發送到的 <code>url</code> 地址<br>第三個參數是布林值用來設置是否非同步發送，預設 <code>false</code> 表示同步。</p>
</li>
<li><p>補充<br>目前因為我們的頁面都採用 <code>localhost</code> 方式在本地主機直接訪問，因此 <code>url</code> 直接寫出 <code>php</code> 檔的相對路徑即可。</p>
<p>而如果通過其他方式打開可能會引起 <code>js</code> 的跨域問題，就會報錯。</p>
</li>
</ul>
<h5 id="2-7-setRequestHeader-方法"><a href="#2-7-setRequestHeader-方法" class="headerlink" title="2.7 setRequestHeader()方法"></a>2.7 setRequestHeader()方法</h5><ul>
<li><p>描述 用於設置HTTP頭信息。</p>
</li>
<li><p>語法 xhr.setRequestHeader(‘key’，’value’);</p>
</li>
<li><p>說明</p>
<pre><code>本方法必須在 `open()` 之後、`send()` 之前被調用
本方法用來設置在請求發送時，一併被發送出的一些補充資訊</code></pre>
</li>
<li><p>例子</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-Length'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h5 id="2-8-send-方法"><a href="#2-8-send-方法" class="headerlink" title="2.8 send()方法"></a>2.8 send()方法</h5><ul>
<li>描述 用於實際發出 <code>HTTP</code> 請求。</li>
<li>語法 <code>xhr.send(formData);</code></li>
<li>說明 <code>send()</code>方法的參數是表單數據，為 `post 請求準備。<pre><code> 如果是 `get` 請求則參數直接寫 `null` 即可。</code></pre>
</li>
</ul>
<h3 id="xhr對象發送-post-請求"><a href="#xhr對象發送-post-請求" class="headerlink" title="xhr對象發送 post 請求"></a>xhr對象發送 post 請求</h3><ul>
<li><p>描述 <code>post</code> 請求和 <code>get</code> 請求的差異就在於多了一個表單數據，在 <code>xhr</code> 物件中可以通過 <code>FormData</code> 進行構建。</p>
</li>
<li><p>語法</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'key'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// value 如果是字串類型要加引號。</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>說明</p>
<pre><code>至於 `formData` 的創建時機和位置，只要你能夠在請求發送出去之前。
也就是 `xhr.send()` 語句被寫出之前添加給 `xhr` 對象
那麼你願意把 `formData 放在哪就放在哪。</code></pre>
</li>
<li><p>範例<br>前台:<br><code>post&amp;compatible_org.html</code></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span> xhr對像 post請求與兼容性問題<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>發送請求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>後台: 收到的數據，直接返回<br><code>post&amp;compatible_org.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$success</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'msg'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token single-quoted-string string">'OK'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'info'</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$success</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>測試執行結果。</p>
<blockquote>
<p>get 請求若有參數要傳遞，可以透過 url，如下方法。</p>
</blockquote>
 <pre class="line-numbers language-html" data-language="html"><code class="language-html">xhr.open('get', 'xhr.php?uname=allen&amp;upass=1234', true); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h3 id="xhr-物件的相容性問題"><a href="#xhr-物件的相容性問題" class="headerlink" title="xhr 物件的相容性問題"></a>xhr 物件的相容性問題</h3><ul>
<li><p>描述 <code>xhr</code> 物件的獲取方式在 <code>IE</code> 和非IE下是需要使用不同方法。</p>
</li>
<li><p>語法</p>
<pre><code>標準流覽器支援的方法為: `XMLHttpRequest()`
IE流覽器支援的方法為:  `ActiveXObject()`</code></pre>
</li>
<li><p>例子：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">{</span>
  xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span><span class="token punctuation">{</span>
  xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>說明：可以直接使用三目運算子解決</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">xhr <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest<span class="token operator">?</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h4 id="登錄-post-請求實例"><a href="#登錄-post-請求實例" class="headerlink" title="登錄 post 請求實例"></a>登錄 post 請求實例</h4><ul>
<li><p>要求</p>
<ol>
<li>在 html 頁面中獲取用戶訊息，並在點擊的時候將訊息 POST 到後台</li>
<li>在 php 文件中通過 $_POST 對象獲取 html 文件發來的訊息，並根據輸入內容進行響應。</li>
</ol>
</li>
<li><p>擴展</p>
<ol start="3">
<li>如果前兩句能夠自行實現並且沒問題，則使用 sql 語句來檢查輸入的用戶密碼是否是DB 的項目，並根據DB 的檢索結果反饋給用戶。</li>
</ol>
</li>
<li><p>前台 <code>post&amp;compatible.php</code><br>修改:</p>
<ul>
<li>原式: <code>&lt;button&gt;發送請求&lt;/button&gt;</code></li>
<li>成為: <code>&lt;button&gt;登陸&lt;/button&gt;</code>  </li>
</ul>
</li>
<li><p>後台<br>修改 <code>post&amp;compatible_org.php</code> 成為 <code>post&amp;compatible.php</code> 如下:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upass'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$success</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'msg'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token single-quoted-string string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'localhost'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'root'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'set character_set_client=utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'set character_set_results=utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//</span>
	<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"select * from userinfolist where 1"</span><span class="token punctuation">;</span>
	<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$con</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//獲取數據庫數據</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">num_rows</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token variable">$info</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$row</span><span class="token operator">=</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token variable">$info</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//判斷是否登錄成功</span>
	<span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span><span class="token comment">//默認false表示登錄失敗，如果能登錄成功，則變為true</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'userName'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token variable">$success</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'infoCode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
				<span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$flag</span> <span class="token operator">==</span> <span class="token boolean constant">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token variable">$success</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'infoCode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
	<span class="token variable">$success</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'infoCode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//0代表成功，1代表失敗，2代表數據庫連接失敗</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$success</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="請求超時-timeout-與超時監聽-ontimeout"><a href="#請求超時-timeout-與超時監聽-ontimeout" class="headerlink" title="請求超時 timeout 與超時監聽 ontimeout"></a>請求超時 timeout 與超時監聽 ontimeout</h3><ul>
<li><p>需求<br>正常使用 <code>Ajax 功能</code>，乃透過 send() 提出請求後，等到伺服器回應得到 200 前端才繼續處理,在本地端操作沒有問題，不會有延遲，但是若與遠端伺服器交互，可能會有延遲問題發生，有可能前端頁一直在等伺服器的回應。</p>
</li>
<li><p>描述</p>
<pre><code>`timeout` 屬性等於一個整數，用來設置當請求發出後等待接收回應的時間。
`ontimeout()`方法則是當等待超時後，自動執行的回調方法。</code></pre>
</li>
<li><p>語法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> xxx<span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span>ontimeout<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"The request for"</span><span class="token operator">+</span>url地址<span class="token operator">+</span><span class="token double-quoted-string string">"timed out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>說明</p>
<pre><code>`timeout` 屬性單位是毫秒，表示當請求發出後等待回應的時間。
          如果在設置的時間內沒能收到後臺回應的內容，則認為請求超時(執行 `ontimeout`)。</code></pre>
</li>
<li><p>補充：如果該屬性等於 0，就表示沒有時間限制。</p>
</li>
<li><p>例子：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span> <span class="token comment">//5秒後超時</span>
xhr<span class="token punctuation">.</span>ontimeout <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"The request for "</span><span class="token operator">+</span>ajax<span class="token punctuation">.</span>php<span class="token operator">+</span><span class="token double-quoted-string string">"timed out."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>範例:<br>後台: <code>time_out.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$success</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'msg'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token single-quoted-string string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$success</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>前台: <code>time_out.html</code></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"> <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>請求超時設置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>發送請求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>
	xhr<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'連接超時，頁面加載失敗，請刷新重試'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'timeout.php'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

 </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="範例-發送檔進度條實例-擴展"><a href="#範例-發送檔進度條實例-擴展" class="headerlink" title="範例: 發送檔進度條實例(擴展)"></a>範例: 發送檔進度條實例(擴展)</h4><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>樹莓派製作無線路由器</title>
    <url>/iot/20210207-pi3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="樹莓派製作無線路由器"><a href="#樹莓派製作無線路由器" class="headerlink" title="樹莓派製作無線路由器"></a><a href="https://kknews.cc/zh-tw/digital/gaq66yl.html">樹莓派製作無線路由器</a></h2><h3 id="1-軟體安裝和網絡配置"><a href="#1-軟體安裝和網絡配置" class="headerlink" title="1. 軟體安裝和網絡配置"></a>1. 軟體安裝和網絡配置</h3><p>首先安裝兩個製作無線路由器必需的軟體：</p>
<ol>
<li>hostapd： 該軟體能使無線網卡工作在軟 AP(Access Point)模式，作為無線路由器使用，提供其他無線網卡接入上網；</li>
<li>wpa_supplicant： 該軟體是一個連接、配置 WIFI的客戶端軟體，讓無線網卡工作在網卡模式，用來連接無線路由器上網。</li>
<li>dnsmasq： 該軟體能夠同時提供 <code>DHCP</code> 和 <code>DNS</code> 服務；</li>
</ol>
<ul>
<li><p>安裝</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo apt update
sudo apt upgrade
sudo apt install hostapd dnsmasq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>在最新的樹莓派版本中，所有的網絡接口預設使用 <code>dhcpd</code> 程序來進行管理並動態獲取 <code>IP</code> 位址。因為 <code>wlan0</code> 工作在 <code>AP</code> 模式，他要給連上來的客戶端提供 <code>IP</code> 位址，這時我們需要靜態配置<code>IP</code> 位址，所以先在配置文件 <code>/etc/dhcpcd.conf</code> 中最下面添加一行去停用 <code>wlan0</code> 的 <code>DHCP</code>：</p>
<ul>
<li><p>修改</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo nano <span class="token operator">/</span>etc<span class="token operator">/</span>dhcpcd<span class="token punctuation">.</span>conf
<span class="token operator">:</span>
#<span class="token keyword">interface</span> <span class="token class-name">eth0</span>
#fallback static_eth0
denyinterfaces wlan0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>接下來我們在 <code>/etc/network/interfaces</code> 中靜態配置無線網卡的 <code>IP</code> 位址，這裡我們將有線網卡的 <code>IP</code> 靜態配置成 <code>192.168.2.13</code>，網關配置成我的無線路由器的 <code>IP</code> 位址 <code>192.168.2.1</code>，這個配置需要根據實際網絡情況來配置，假如樹莓派有線網卡連接的路由器的 LAN 口 IP 位址是 <code>192.168.0.1</code>，那麼它的IP位址應該是 <code>192.168.0.x</code>，<code>gateway</code> 就是路由器的 IP 位址 <code>192.168.0.1</code>：</p>
<ul>
<li><p>修改</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo nano <span class="token operator">/</span>etc<span class="token operator">/</span>network<span class="token operator">/</span>interfaces

# <span class="token function">interfaces</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> file used by <span class="token function">ifup</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> and <span class="token function">ifdown</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
# Please note that <span class="token keyword">this</span> file is written to be used <span class="token keyword">with</span> dhcpcd
# For <span class="token keyword">static</span> <span class="token constant">IP</span><span class="token punctuation">,</span> consult <span class="token operator">/</span>etc<span class="token operator">/</span>dhcpcd<span class="token punctuation">.</span>conf and <span class="token string">'man dhcpcd.conf'</span>
# Include files <span class="token keyword">from</span> <span class="token operator">/</span>etc<span class="token operator">/</span>network<span class="token operator">/</span>interfaces<span class="token punctuation">.</span>d<span class="token operator">:</span>
  source<span class="token operator">-</span>directory <span class="token operator">/</span>etc<span class="token operator">/</span>network<span class="token operator">/</span>interfaces<span class="token punctuation">.</span>d

auto lo
iface lo inet loopback

auto eth0
iface eth0 inet <span class="token keyword">static</span>
address <span class="token number">192.168</span><span class="token number">.67</span><span class="token number">.240</span>
netmask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
gateway <span class="token number">192.168</span><span class="token number">.67</span><span class="token number">.254</span>
dns<span class="token operator">-</span>nameservers <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token number">168.95</span><span class="token number">.1</span><span class="token number">.1</span>

allow<span class="token operator">-</span>hotplug wlan0
iface wlan0 inet <span class="token keyword">static</span>
address <span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.1</span>
netmask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>關閉 dhcpd 管理樹莓派網絡服務</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo systemctl disable dhcpcd <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>使用 <code>networking</code> 管理樹莓派網絡服務</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo systemctl enable networking <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>重啟生效</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo reboot <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h3 id="2-無線路由器相關軟體配置"><a href="#2-無線路由器相關軟體配置" class="headerlink" title="2. 無線路由器相關軟體配置"></a>2. 無線路由器相關軟體配置</h3><p>接下來修改 <code>hostapd</code> 程序的配置文件，該配置文件是無線路由器的相關配置，該配置中 <code>ssid</code> 選項用來配置路由器 <code>SSID</code> 為 <code>Pi3-AP</code>， <code>wpa_passphrase</code> 用來配置連接無線路由器的密碼為 <code>raspberry</code> ，</p>
<ul>
<li><p>修改 <code>hostapd</code> 的啟動配置文件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo nano <span class="token operator">/</span>etc<span class="token operator">/</span>hostapd<span class="token operator">/</span>hostapd<span class="token punctuation">.</span>conf

# 該選項配置 hostapd 監聽樹莓派的無線網卡 wlan0
<span class="token keyword">interface</span><span class="token operator">=</span>wlan0
# 使用 Linux 內核理的 nl80211 驅動
driver<span class="token operator">=</span>nl80211
# 這裡配置樹莓派的熱點名稱
ssid<span class="token operator">=</span>Pi3AP
# 配置 <span class="token constant">AP</span> 兼容 <span class="token number">802.11</span>g
hw_mode<span class="token operator">=</span>g
# <span class="token constant">IEEE</span> <span class="token number">802.11</span>b<span class="token operator">/</span>g標準工作在<span class="token number">2.4</span>G頻段，頻率範圍為<span class="token number">2.400</span>—<span class="token number">2.4835</span>GHz，共<span class="token number">83.5</span>M帶寬。劃分為<span class="token number">14</span>個子信道，每個子信道寬度為<span class="token number">22</span>MHz，相鄰信道的中心頻點間隔<span class="token number">5</span>MHz。這裡設置使用頻段<span class="token number">6</span>
channel<span class="token operator">=</span><span class="token number">6</span>
# 配置<span class="token constant">AP</span>兼容 <span class="token number">802.11</span>n
ieee80211n<span class="token operator">=</span><span class="token number">1</span>
# 使能 <span class="token constant">WMM</span>，它是 WiFi 多媒體的縮寫<span class="token punctuation">,</span>是 <span class="token number">802.11</span>e 標準的一個子集<span class="token punctuation">,</span>可以把它看作某種協議或者功能。 wmm 主要是用來優化語音、視頻等多媒體數據流的網絡通信質量。
wmm_enabled<span class="token operator">=</span><span class="token number">1</span>
# 設置<span class="token constant">IEEE</span> <span class="token number">802.11</span>n 標準支持的各項特性
ht_capab<span class="token operator">=</span><span class="token punctuation">[</span><span class="token constant">HT40</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token constant">SHORT</span><span class="token operator">-</span><span class="token constant">GI</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token constant">DSSS_CCK</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">]</span>
# 指定 <span class="token constant">MAC</span> 地址過濾規則。<span class="token number">0</span> 表示除非在禁止列表否則同意，<span class="token number">1</span> 表示除非在同意列表否則禁止。<span class="token number">2</span> 表示使用外部<span class="token constant">RADIUS</span>伺服器
macaddr_acl<span class="token operator">=</span><span class="token number">0</span>
# auth_algs指定採用哪種認證算法，採用位域（bit fields）方式來指定
auth_algs<span class="token operator">=</span><span class="token number">1</span>
# 加入此配置項後重啟啟動 wifi 熱點模塊即可很方便的隱藏 <span class="token constant">SSID</span><span class="token punctuation">,</span>如需不隱藏則將設置為 <span class="token number">0</span>
ignore_broadcast_ssid<span class="token operator">=</span><span class="token number">0</span>
# 使用 <span class="token constant">WPA2</span> 認證方式
wpa<span class="token operator">=</span><span class="token number">2</span>
# 使用<span class="token constant">WPA2</span><span class="token operator">-</span><span class="token constant">PSK</span>
wpa_key_mgmt<span class="token operator">=</span><span class="token constant">WPA</span><span class="token operator">-</span><span class="token constant">PSK</span>
# 設置連接該WiFi的密碼
wpa_passphrase<span class="token operator">=</span>raspberry
# 使用安全性能更高的<span class="token constant">AES</span>加密，而不是<span class="token constant">TKIP</span>
rsn_pairwise<span class="token operator">=</span><span class="token constant">CCMP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修改 <code>hostapd</code> 的啟動配置文件，讓系統啟動時能夠找到 <code>hostapd</code> 的配置文件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo nano <span class="token operator">/</span>etc<span class="token operator">/</span><span class="token keyword">default</span><span class="token operator">/</span>hostapd

# Defaults <span class="token keyword">for</span> hostapd initscript  
#
# See <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>doc<span class="token operator">/</span>hostapd<span class="token operator">/</span><span class="token constant">README</span><span class="token punctuation">.</span>Debian <span class="token keyword">for</span> information about alternative
 methods <span class="token keyword">of</span> managing hostapd<span class="token punctuation">.</span>
#
# Uncomment and set <span class="token constant">DAEMON_CONF</span> to the absolute path <span class="token keyword">of</span> a hostapd configuration
# file and hostapd will be started during system boot<span class="token punctuation">.</span> An example configuration
# file can be found at <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>doc<span class="token operator">/</span>hostapd<span class="token operator">/</span>examples<span class="token operator">/</span>hostapd<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>gz
#

<span class="token constant">DAEMON_CONF</span><span class="token operator">=</span><span class="token string">"/etc/hostapd/hostapd.conf"</span>

# Additional daemon options to be appended to hostapd command<span class="token operator">:</span><span class="token operator">-</span>
# <span class="token operator">-</span>d show more debug <span class="token function">messages</span> <span class="token punctuation">(</span><span class="token operator">-</span>dd <span class="token keyword">for</span> even more<span class="token punctuation">)</span>
# <span class="token operator">-</span><span class="token constant">K</span> include key data <span class="token keyword">in</span> debug messages
# <span class="token operator">-</span>t include timestamps <span class="token keyword">in</span> some debug messages
#
# Note that <span class="token operator">-</span><span class="token constant">B</span> <span class="token punctuation">(</span>daemon mode<span class="token punctuation">)</span> and <span class="token operator">-</span><span class="token constant">P</span> <span class="token punctuation">(</span>pidfile<span class="token punctuation">)</span> options are automatically
# configured by the init<span class="token punctuation">.</span>d script and must not be added to <span class="token constant">DAEMON_OPTS</span><span class="token punctuation">.</span>
#
#<span class="token constant">DAEMON_OPTS</span><span class="token operator">=</span><span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>這時候，可以使用下面命令啟動測試 <code>hostapd</code></p>
</li>
<li><p>測試</p>
<p><code>sudo hostapd -B /etc/hostapd/hostapd.conf</code></p>
<p>Configuration file: /etc/hostapd/hostapd.conf<br>Failed to create interface mon.wlan0: -95 (Operation not supported) 不用關心這個錯誤<br>wlan0: Could not connect to kernel driver<br>Using interface wlan0 with hwaddr b8:27:eb:e1:95:c3 and ssid “Pi3-AP”<br>wlan0: interface state UNINITIALIZED-&gt;ENABLED<br>wlan0: AP-ENABLED</p>
</li>
<li><p>啟動 <code>hostapd</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo systemctl unmask hostapd
sudo systemctl enable hostapd
sudo systemctl start hostapd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>通過筆記本或電腦會發現 無線AP Pi3-AP，但是連接不上，這是因為樹莓派的無線網卡並沒有開啟 <code>DHCP</code> 和 <code>DNS</code>伺服器，接下來我們配置 <code>dnsmasq</code>。</p>
</li>
<li><p>配置 <code>dnsmasq</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo mv <span class="token operator">/</span>etc<span class="token operator">/</span>dnsmasq<span class="token punctuation">.</span>conf <span class="token operator">/</span>etc<span class="token operator">/</span>dnsmasq<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>orig
sudo nano <span class="token operator">/</span>etc<span class="token operator">/</span>dnsmasq<span class="token punctuation">.</span>conf

# Configuration file <span class="token keyword">for</span> dnsmasq<span class="token punctuation">.</span>
#
# Format is one option per line<span class="token punctuation">,</span> legal options are the same
# <span class="token keyword">as</span> the long options legal on the command line<span class="token punctuation">.</span> See
# <span class="token string">"/usr/sbin/dnsmasq --help"</span> or <span class="token string">"man 8 dnsmasq"</span> <span class="token keyword">for</span> details<span class="token punctuation">.</span>

# Use <span class="token keyword">interface</span> <span class="token class-name">wlan0</span>
<span class="token keyword">interface</span><span class="token operator">=</span>wlan0

# Explicitly specify the address to listen on
listen<span class="token operator">-</span>address<span class="token operator">=</span><span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.1</span>

# Bind to the <span class="token keyword">interface</span> <span class="token class-name">to</span> make sure we aren't sending things elsewhere
bind<span class="token operator">-</span>interfaces

# Forward <span class="token constant">DNS</span> requests to <span class="token number">114</span>DNS
server<span class="token operator">=</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>

# Don't forward short names
domain<span class="token operator">-</span>needed

# Never forward addresses <span class="token keyword">in</span> the non<span class="token operator">-</span>routed address spaces<span class="token punctuation">.</span>
bogus<span class="token operator">-</span>priv

# Assign <span class="token constant">IP</span> addresses between <span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.100</span> and <span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.200</span> <span class="token keyword">with</span> a <span class="token number">12</span> hour lease time
dhcp<span class="token operator">-</span>range<span class="token operator">=</span><span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.100</span><span class="token punctuation">,</span><span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.200</span><span class="token punctuation">,</span><span class="token number">24</span>h

#log<span class="token operator">-</span>queries
#log<span class="token operator">-</span>facility<span class="token operator">=</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>dnsmasq<span class="token punctuation">.</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>啟動  </p>
<p><code>sudo service dnsmasq restart</code></p>
</li>
</ul>
<p>開啟 <code>DHCP</code> 和 <code>DNS</code> 服務之後，我們的電腦可以獲取 <code>IP</code> 位址，並連接到樹莓派上，但是電腦還是不能上網。這時我們需要開啟 <code>Linux</code> 的內核的 <code>IP</code> 轉發以及使用 <code>iptables</code> 做 <code>NAT</code> 表，讓無線網卡的數據通過有線網卡轉發出去。</p>
<ul>
<li><p>開啟 Linux 內核的 IP 轉發功能：</p>
<p><code>sudo sh -c "echo 1 &gt; /proc/sys/net/ipv4/ip_forward"</code></p>
</li>
<li><p>開啟樹莓派有線網卡和無線網卡的轉發功能：</p>
<p>不管現在 <code>eth0</code> 的出口獲得了怎樣的動態 <code>ip</code>，<code>MASQUERADE</code> 會自動讀取 <code>eth0</code> 現在的 <code>ip</code> 地址然後做<code>SNAT</code> 出去這樣就實現了很好的動態 <code>SNAT</code> 地址轉換：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo iptables <span class="token operator">-</span>t nat <span class="token operator">-</span><span class="token constant">A</span> <span class="token constant">POSTROUTING</span> <span class="token operator">-</span>o eth0 <span class="token operator">-</span>j <span class="token constant">MASQUERADE</span>
sudo iptables <span class="token operator">-</span><span class="token constant">A</span> <span class="token constant">FORWARD</span> <span class="token operator">-</span>i eth0 <span class="token operator">-</span>o wlan0 <span class="token operator">-</span>m state <span class="token operator">--</span>state <span class="token constant">RELATED</span><span class="token punctuation">,</span><span class="token constant">ESTABLISHED</span> <span class="token operator">-</span>j <span class="token constant">ACCEPT</span>
sudo iptables <span class="token operator">-</span><span class="token constant">A</span> <span class="token constant">FORWARD</span> <span class="token operator">-</span>i wlan0 <span class="token operator">-</span>o eth0 <span class="token operator">-</span>j <span class="token constant">ACCEPT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>這時候筆記本或手機再連上樹莓派上，就可以上網了。當然，由於上面命令都是手動執行的，樹莓派上電後，並不會執行他們，這時我們需要進行一些配置，讓系統啟動後就生效：</p>
</li>
<li><p>保存當前的防火牆策略到配置文件中：</p>
<p><code>sudo sh -c "iptables-save &gt; /etc/iptables.ipv4.nat"</code></p>
</li>
<li><p>修改系統啟動腳本，添加啟動任務：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo nano <span class="token operator">/</span>etc<span class="token operator">/</span>rc<span class="token punctuation">.</span>local

sh <span class="token operator">-</span>c <span class="token string">"echo 1 &gt; /proc/sys/net/ipv4/ip_forward"</span>
iptables<span class="token operator">-</span>restore <span class="token operator">&lt;</span> <span class="token operator">/</span>etc<span class="token operator">/</span>iptables<span class="token punctuation">.</span>ipv4<span class="token punctuation">.</span>nat

exit <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>然後重啟生效：</p>
<p><code>sudo reboot</code></p>
</li>
</ul>
<p>接下來我們的電腦就可以連到樹莓派上上網了。</p>
<h3 id="樹莓派切換回網卡模式"><a href="#樹莓派切換回網卡模式" class="headerlink" title="樹莓派切換回網卡模式"></a>樹莓派切換回網卡模式</h3><p>在做完無線路由器模式後，如果需要把樹莓派切換回網卡模式連接無線路由器上網，則可以進行如下修改：</p>
<p>首先取消無線路由器的靜態 <code>IP</code> 位址配置，並使能 <code>wpa_supplicant</code> 軟體：</p>
<ul>
<li><p>修改</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo vim <span class="token operator">/</span>etc<span class="token operator">/</span>network<span class="token operator">/</span>interfaces

# <span class="token function">interfaces</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> file used by <span class="token function">ifup</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> and <span class="token function">ifdown</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
# Please note that <span class="token keyword">this</span> file is written to be used <span class="token keyword">with</span> dhcpcd
# For <span class="token keyword">static</span> <span class="token constant">IP</span><span class="token punctuation">,</span> consult <span class="token operator">/</span>etc<span class="token operator">/</span>dhcpcd<span class="token punctuation">.</span>conf and <span class="token string">'man dhcpcd.conf'</span>
# Include files <span class="token keyword">from</span> <span class="token operator">/</span>etc<span class="token operator">/</span>network<span class="token operator">/</span>interfaces<span class="token punctuation">.</span>d<span class="token operator">:</span>
source<span class="token operator">-</span>directory <span class="token operator">/</span>etc<span class="token operator">/</span>network<span class="token operator">/</span>interfaces<span class="token punctuation">.</span>d

auto lo
iface lo inet loopback
auto eth0
iface eth0 inet dhcp

# wpa_supplicant station mode
allow<span class="token operator">-</span>hotplug wlan0
iface wlan0 inet dhcp
 wpa<span class="token operator">-</span>conf <span class="token operator">/</span>etc<span class="token operator">/</span>wpa_supplicant<span class="token operator">/</span>wpa_supplicant<span class="token punctuation">.</span>conf

# hostapd <span class="token constant">AP</span> mode
#allow<span class="token operator">-</span>hotplug wlan0
#iface wlan0 inet <span class="token keyword">static</span>
#address <span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.1</span>
#netmask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>取消 <code>iptables</code> 路由轉發默認啟動：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo vim <span class="token operator">/</span>etc<span class="token operator">/</span>rc<span class="token punctuation">.</span>local

#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>sh <span class="token operator">-</span>e
#
# rc<span class="token punctuation">.</span>local
#
# This script is executed at the end <span class="token keyword">of</span> each multiuser runlevel<span class="token punctuation">.</span>
# Make sure that the script will <span class="token string">"exit 0"</span> on success or any other
# value on error<span class="token punctuation">.</span>
#
# In order to enable or disable <span class="token keyword">this</span> script just change the execution
# bits<span class="token punctuation">.</span>
#
# By <span class="token keyword">default</span> <span class="token keyword">this</span> script does nothing<span class="token punctuation">.</span>
# Print the <span class="token constant">IP</span> address
_IP<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span>hostname <span class="token operator">-</span><span class="token constant">I</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token boolean">true</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"$_IP"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> then
 printf <span class="token string">"My IP address is %s\n"</span> <span class="token string">"$_IP"</span>
fi

#sh <span class="token operator">-</span>c <span class="token string">"echo 1 &gt; /proc/sys/net/ipv4/ip_forward"</span>
#iptables<span class="token operator">-</span>restore <span class="token operator">&lt;</span> <span class="token operator">/</span>etc<span class="token operator">/</span>iptables<span class="token punctuation">.</span>ipv4<span class="token punctuation">.</span>nat

exit <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>停止 <code>hostapd</code> 服務，啟動 <code>wpa_supplicant</code> 服務</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sudo systemctl disable hostapd<span class="token punctuation">.</span>service
sudo systemctl enable wpa_supplicant<span class="token punctuation">.</span>service
sudo reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<hr>
<h2 id="安裝-RaspAP-無線基地台"><a href="#安裝-RaspAP-無線基地台" class="headerlink" title="安裝 RaspAP 無線基地台"></a><a href="https://kknews.cc/zh-tw/digital/gaq66yl.html">安裝 RaspAP 無線基地台</a></h2><h2 id="安裝-UV4L"><a href="#安裝-UV4L" class="headerlink" title="安裝 UV4L"></a>安裝 <code>UV4L</code></h2><p><code>curl http://www.linux-projects.org/listing/uv4l_repo/lpkey.asc | sudo apt-key add -</code></p>
<ul>
<li><p>編輯</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  <span class="token function">sudo</span> <span class="token function">nano</span> /etc/apt/sources.list
  deb http://www.linux-projects.org/listing/uv4l_repo/raspbian/stretch stretch main
  `<span class="token variable"><span class="token variable">`</span>

- 安裝樹莓派攝像頭模組的 <span class="token variable">`</span></span>uv4l<span class="token variable"><span class="token variable">`</span>

  <span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span><span class="token function">bash</span>
  <span class="token function">sudo</span> <span class="token function">apt-get</span> update
  <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> uv4l uv4l-raspicam

- 如要開機自動執行，安裝以下：

  <span class="token variable">`</span></span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> uv4l-raspicam-extras<span class="token variable"><span class="token variable">`</span>

  <span class="token operator">&gt;</span>可由以下指令重啟 <span class="token variable">`</span></span>uv4l<span class="token variable"><span class="token variable">`</span>
   <span class="token function">sudo</span> <span class="token function">service</span> uv4l_raspicam restart

- 設定 GPU 有 256MB<span class="token punctuation">(</span>建議<span class="token punctuation">)</span>

- 更新樹莓派韌體：
  <span class="token variable">`</span></span><span class="token function">sudo</span> rpi-update<span class="token variable"><span class="token variable">`</span>

- 安裝以下套件

  <span class="token variable">`</span></span>``bash
  <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> uv4l-server uv4l-uvc uv4l-xscreen uv4l-mjpegstream uv4l-dummy uv4l-raspidisp
  <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> uv4l-webrtc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="安裝-opencv-3-4-3"><a href="#安裝-opencv-3-4-3" class="headerlink" title="安裝 opencv 3.4.3"></a>安裝 opencv 3.4.3</h2><ol>
<li><p>硬體: <code>Pi 3 Model B</code></p>
</li>
<li><p>系統更新</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> dist-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>安裝有助於編譯的小工具：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">screen</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">htop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>安裝以下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential cmake pkg-config
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libxvidcore-dev libx264-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libgtk2.0-dev libgtk-3-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libatlas-base-dev gfortran<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>下載 <code>OpenCV3.4.3</code> 並解壓</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -O opencv.zip https://github.com/opencv/opencv/archive/3.4.3.zip
<span class="token function">wget</span> -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/3.4.3.zip
<span class="token function">unzip</span> opencv.zip
<span class="token function">unzip</span> opencv_contrib.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>安裝以下工具：</p>
<p><code>sudo pip install numpy scipy</code></p>
</li>
<li><p>開始編譯：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/opencv-3.4.3/
<span class="token function">mkdir</span> build
<span class="token builtin class-name">cd</span> build

cmake -D <span class="token assign-left variable">CMAKE_BUILD_TYPE</span><span class="token operator">=</span>RELEASE <span class="token punctuation">\</span>
    -D <span class="token assign-left variable">CMAKE_INSTALL_PREFIX</span><span class="token operator">=</span>/usr/local <span class="token punctuation">\</span>
    -D <span class="token assign-left variable">INSTALL_PYTHON_EXAMPLES</span><span class="token operator">=</span>ON <span class="token punctuation">\</span>
    -D <span class="token assign-left variable">OPENCV_EXTRA_MODULES_PATH</span><span class="token operator">=</span>~/opencv_contrib-3.4.3/modules <span class="token punctuation">\</span>
    -D <span class="token assign-left variable">BUILD_EXAMPLES</span><span class="token operator">=</span>ON <span class="token punctuation">..</span>

<span class="token function">make</span> -j4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>安裝編譯好的檔案後重開機</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
<span class="token comment">#執行指令更新程式庫：</span>
<span class="token function">sudo</span> ldconfig
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試是否安裝完成</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3
<span class="token function">import</span> cv2
cv2.__version__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>若成功安裝會看到版本訊息</p>
<p><code>'3.4.3'</code></p>
</li>
</ol>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602102127.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602102127_s.png" class="nofancybox  img-center"></a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>iot</tag>
        <tag>wiot</tag>
        <tag>pi</tag>
      </tags>
  </entry>
  <entry>
    <title>virtualbox</title>
    <url>/virtualbox/20201228-virtualbox/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-安裝版本"><a href="#1-安裝版本" class="headerlink" title="1. 安裝版本"></a>1. 安裝版本</h2><p>首先我們要先下載 VirtualBox，請到<a href="https://www.virtualbox.org/">官網</a>按下大大的 <code>Download</code> 按鈕吧；接著選擇 <code>Windows hosts</code> 版本進行下載，然後就執行安裝檔下一步按到底。</p>
<h2 id="2-攜帶版本"><a href="#2-攜帶版本" class="headerlink" title="2. 攜帶版本"></a>2. 攜帶版本</h2><ol>
<li><p>至官網 <a href="https://www.vbox.me/">Protable-VirtualBox</a> 下載 <a href="https://www.vbox.me/files/Portable-VirtualBox_v5.1.22-Starter_v6.4.10-Win_all.exe">Portable-VirtualBox_v5.1.22-Starter_v6.4.10-Win_all.exe</a>。</p>
</li>
<li><p>點擊該執行檔後，選擇一個資料夾(這裡用 V: 作示範)，解壓縮.<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128092733.png" alt="20210128092733"></p>
</li>
<li><p>到資料夾 <code>V:\Protable-VirtualBox\data\language</code><br>將 <code>chinese.ini</code> 另存新檔 <code>taiwan.ini</code> 後，利用 <code>word</code> 讀檔後翻譯成繁體，複製完整內容，貼回 taiwan.ini。</p>
<blockquote>
<p>存檔前，記得要先關閉 Word。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128093541.png" alt=" "></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128093641.png" alt=" "></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128093719.png" alt=" "></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128094040.png" alt=" "></p>
</li>
<li><p>打開資料夾 V:\Protable-VirtualBox\data\settings\vboxinstall.ini, 修改要下載的檔案。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>download<span class="token punctuation">]</span>
 key1<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>download<span class="token punctuation">.</span>virtualbox<span class="token punctuation">.</span>org<span class="token operator">/</span>virtualbox<span class="token operator">/</span><span class="token number">6.0</span><span class="token number">.24</span><span class="token operator">/</span>VirtualBox<span class="token operator">-</span><span class="token number">6.0</span><span class="token number">.24</span><span class="token operator">-</span><span class="token number">139119</span><span class="token operator">-</span>Win<span class="token punctuation">.</span>exe
 key2<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>download<span class="token punctuation">.</span>virtualbox<span class="token punctuation">.</span>org<span class="token operator">/</span>virtualbox<span class="token operator">/</span><span class="token number">6.0</span><span class="token number">.24</span><span class="token operator">/</span>Oracle_VM_VirtualBox_Extension_Pack<span class="token operator">-</span><span class="token number">6.0</span><span class="token number">.24</span><span class="token operator">-</span><span class="token number">139119.</span>vbox<span class="token operator">-</span>extpack
 update<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vbox<span class="token punctuation">.</span>me<span class="token operator">/</span>update<span class="token operator">/</span>
<span class="token punctuation">[</span>startvbox<span class="token punctuation">]</span>
key<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>參考網站提供內容: <code>http://download.virtualbox.org/virtualbox</code> , 可下載其他版本。</p>
</blockquote>
</li>
<li><p>選擇要下載 32位元或64位元版本<br>勾選，檔提取或壓縮完畢後運行 portable-VirtualBox<br>按下 “下載 VirtualBox的安裝檔”<br>開始下載，下載完後， 按下確定，開始拷貝資料到 <code>V:\Portable-VirtualBox\app32</code> 與 <code>V:\Portable-VirtualBox\app64</code>。</p>
</li>
<li><p>啟動若出現:<br>無法獲取 VirtualBox COM 物件。 應用程式現在將終止時:<br>把所有 <code>V:\Portable-VirtualBox\app64\drivers</code> 的驅動程式 (*.inf) 都執行安裝一次.</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128094816.png" alt=" "></p>
</li>
<li><p>啟動後修改路徑:<br>喜好設定 -&gt; 一般 -&gt; 預設機器資料夾: V:\Portable-VirtualBox\data.VirtualBox\Machine</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128094858.png" alt=" "></p>
</li>
<li><p>建立虛擬機器<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128111445.png" alt="新增機器"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128111701.png" alt="名稱和作業系統"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128111753.png" alt="記憶體大小"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128111845.png" alt="硬碟"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128111923.png" alt="硬碟檔類型"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128112002.png" alt="存放裝置實體硬碟中"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128112039.png" alt="檔案位置和大小"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128112125.png" alt="檔案位置和大小"></p>
</li>
<li><p>安裝作業系統<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128133936.png" alt="設定"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128134202.png" alt="加入光碟機"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128134303.png" alt=" "></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128134349.png" alt=" "></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128134444.png" alt=" "></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128134549.png" alt=" "></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128134634.png" alt=" "></p>
<p>調整啟動磁碟順序， <code>win10x64.iso</code> 光碟片，為第一優先啟動。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128140749.png" alt=" "></p>
<p>按下「啟動」開始安裝系統<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128141337.png" alt=" "></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128141419.png" alt=" "></p>
<p>安裝擴充套件: 裝置 &gt; 插入 <code>Guest Additions CD</code> 映像，<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128143123.png" alt="20210128143123"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128143208.png" alt="20210128143208"></p>
<p>會要求重新啟動。</p>
<p>安裝完成後，可以退出<code>Guest Additions CD</code> 映像片。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128143357.png" alt="20210128143357"></p>
</li>
<li><p>網路驅動程式安裝<br>step1: 進到網路連線，滑鼠右鍵點選「區域連線」，再點選「內容」<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128095121.png" alt=" "></p>
<p>step2: 在「區域連線 內容」視窗中點選「安裝」<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128095200.png" alt=" "></p>
<p>step3: 在「請選取網路連線類型」視窗中點選「服務」，再點選「新增」<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128095732.png" alt=" "></p>
<p>step4: 在「選取網路服務」視窗中點選「從磁片安裝」<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128095815.png" alt=" "></p>
<p>step5: 在「從磁片安裝」視窗中點選「瀏覽」<br>step6: 在「找出檔案位置」視窗中，進入您VirtualBox Portable的資料夾路徑如 「V:\Portable-VirtualBox\app64\drivers\network\netlwf」下，點選 netflt 資料夾中的的 「VBoxNetFlt.inf」，在點選「確定」進行安裝<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210128095854.png" alt=" "></p>
<p>step7: 安裝完畢後會發現「區域連線 內容」視窗中多了「VirtualBox Bridged Networking Driver」<br>step8: 在 <code>VirtualBox</code> 的網路連線，而我們點選「橋接介面卡(Bridged Adapter)」，使VirtualBox裡的作業系統可以存取我們的區域網路，這樣就可以使用pietty對安裝好的作業系統進行連線了。</p>
</li>
</ol>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>virtualbox</category>
      </categories>
      <tags>
        <tag>virtualbox</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel</title>
    <url>/laravel/20201228-laravel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0-資源"><a href="#0-資源" class="headerlink" title="0. 資源"></a>0. 資源</h2><ul>
<li>教材與影片連結: <code>http://gofile.me/5QyRR/wjv5lfU4r</code></li>
<li>帳密: <code>goblin/Gb1qaz@wsx</code></li>
</ul>
<h2 id="1-Laravel-開發環境建置"><a href="#1-Laravel-開發環境建置" class="headerlink" title="1. Laravel 開發環境建置"></a>1. Laravel 開發環境建置</h2><h3 id="1-1-Windows-作業系統"><a href="#1-1-Windows-作業系統" class="headerlink" title="1.1 Windows 作業系統"></a>1.1 Windows 作業系統</h3><h4 id="1-1-1-安裝-XAMPP"><a href="#1-1-1-安裝-XAMPP" class="headerlink" title="1.1.1 安裝 XAMPP"></a>1.1.1 安裝 XAMPP</h4><p><code>PHP + Apache + MariaDB</code> 懶人包</p>
<p><a href="https://www.apachefriends.org/zh_tw/download.html">下載網址</a></p>
<p>請下載 <code>PHP 7.2.5</code> 以上版本，下載完後安裝，過程只需不斷按 <code>Next</code> 即可。</p>
<h4 id="1-1-2-安裝-Visual-Studio-Code"><a href="#1-1-2-安裝-Visual-Studio-Code" class="headerlink" title="1.1.2 安裝 Visual Studio Code"></a>1.1.2 安裝 <code>Visual Studio Code</code></h4><p>由微軟提供，可免費使用的 IDE，<a href="https://code.visualstudio.com/download">下載網址</a></p>
<h4 id="1-1-3-安裝-Git-與-config"><a href="#1-1-3-安裝-Git-與-config" class="headerlink" title="1.1.3 安裝 Git 與 config"></a>1.1.3 安裝 Git 與 config</h4><ul>
<li><p>git config 方式: 打開 Git bash 視窗</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/
<span class="token function">git</span> config --global user.name <span class="token string">"名字 姓"</span>
<span class="token function">git</span> config --global user.email xxxxxx@xxx.xxx
<span class="token function">git</span> config --global core.editor <span class="token string">"'C:/tools/nano.exe' -multiInst -nosession"</span>
<span class="token function">git</span> config --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>git config 執行完畢後，會產生 ~/.gitconfig 檔案。</p>
</blockquote>
</li>
</ul>
<h4 id="1-1-4-Composer"><a href="#1-1-4-Composer" class="headerlink" title="1.1.4 Composer"></a>1.1.4 <code>Composer</code></h4><h5 id="1-1-4-1-用途"><a href="#1-1-4-1-用途" class="headerlink" title="1.1.4.1 用途"></a>1.1.4.1 用途</h5><ul>
<li><p>composer <a href="https://code.visualstudio.com/download">下載網址</a>。</p>
</li>
<li><p>套件版本管理<br><code>Laravel</code>，本身也是一種套件，用它再來安裝適用於不同版本下所對應的相依套件。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210526131815.png" width="20%" height="50%" class="nofancybox">
</li>
<li><p>從 [packagist] 安裝套件</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210526132552.png" width="20%" height="50%" class="nofancybox">
</li>
<li><p>自動加載</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210526132712.png" width="20%" height="50%" class="nofancybox">

<ul>
<li><p>如何使用它做自動加載<br><code>index.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/*
 @package Laravel
 @author  Allen    
*/</span>

<span class="token keyword">require</span> <span class="token constant">__DIR__</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/../vendor/autoload.php'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
</li>
</ul>
<h5 id="1-1-4-2-重要組成"><a href="#1-1-4-2-重要組成" class="headerlink" title="1.1.4.2 重要組成"></a>1.1.4.2 重要組成</h5><ul>
<li>composer.json 定義專案內所有相依套件及格式設定</li>
<li>composer.lock 記錄個套件實際安裝的版本號，用以將此專案所在某一個特定的版本</li>
<li>vendor 存放所有載入的套件</li>
<li>autoload.php 自動載入程式碼</li>
<li>json 與 lock<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">composer.json</th>
<th align="center">composer.lock</th>
</tr>
</thead>
<tbody><tr>
<td align="center">給誰看</td>
<td align="center">人類</td>
<td align="center">電腦</td>
</tr>
<tr>
<td align="center">版本號定義?</td>
<td align="center">模玲兩可</td>
<td align="center">完全精確</td>
</tr>
<tr>
<td align="center">放到 VCS?</td>
<td align="center">要</td>
<td align="center">要</td>
</tr>
<tr>
<td align="center">何時用?</td>
<td align="center">update</td>
<td align="center">install</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="1-1-4-3-安裝"><a href="#1-1-4-3-安裝" class="headerlink" title="1.1.4.3 安裝"></a>1.1.4.3 安裝</h5><ul>
<li><p>終端機下命令列安裝</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">e:
<span class="token function">mkdir</span> e:<span class="token punctuation">\</span>composer
<span class="token builtin class-name">cd</span> e:<span class="token punctuation">\</span>composer
php -r <span class="token string">"copy('https://getcomposer.org/installer', 'composer-setup.php');"</span>
php -r <span class="token string">"if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"</span>
php composer-setup.php
php -r <span class="token string">"unlink('composer-setup.php');"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>本例: 以磁碟代號 <code>D:</code> 安裝。</p>
</blockquote>
</li>
<li><p>安裝完成，會在 <code>d:\composer</code> 目錄下，產生 <code>composer.phar</code>。</p>
</li>
<li><p>執行 <code>composer</code> 時, 可以使用 <code>php composer.phar</code> 執行或將它建立成 <code>composer.bat</code> 來使用，編輯 <code>composer.bat</code> 內容如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@php <span class="token string">"%~dp0composer.phar"</span> %*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>追加 <code>composer</code> 安裝套件全域環境變數:<br><code>PATH= ;d:\composer</code></p>
</li>
<li><p>追加所有專案共享的全局目錄<br><code>COMPOSER_HOME  d:\composer</code></p>
</li>
<li><p>把 composer 套用到 PHP 專案上</p>
<p>初始化:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">cd  <span class="token operator">/</span>路徑<span class="token operator">/</span>專案   <span class="token shell-comment comment"># 例: D:\xampp\htdocs\laravel</span>
composer  init  <span class="token shell-comment comment"># name、description、authors、minimum-stability、license、require、require-dev</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><p>Package name(vendor/name)</p>
<ul>
<li>套件名稱，格式為: “vendor_name/project_name”     </li>
<li>作為 <code>composer require 套件名稱</code> 時候所使用的套件名稱<blockquote>
<p>例: [allen/laravel]</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Description[]</p>
<ul>
<li>簡短的套件描述</li>
<li>儘量在一行內結束</li>
<li>一定要輸入<blockquote>
<p>例: This is a Laravel Project</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Authors[, n to skip]</p>
<ul>
<li>套件開發者資訊 </li>
<li>格式: “name <email>“<br>例: <code>Allen Tai &lt;allen5183@gmail.com&gt;</code></email></li>
<li>可以有多個 author (需手動加入)</li>
<li>預設抓取 ~/.gitconfig 的設定。</li>
</ul>
</li>
<li><p>minimum-stability</p>
<ul>
<li>套件穩定度的說明與指定</li>
<li>只能用在 root-package</li>
<li>可設定的值: (由最穩定到最不穩定的順序)<ul>
<li>stable(預設)</li>
<li>RC</li>
<li>beta</li>
<li>alpha</li>
<li>dev<blockquote>
<p>相依的套件之穩定度不可低於設定值。<br>例: dev</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Package Type</p>
<ul>
<li>用來標示套件性質，無實質功能</li>
<li>一般常用 project, 也可以自己設定。</li>
<li>其他配置名稱可為 library、metapackage、composer-plugin</li>
</ul>
</li>
<li><p>license</p>
<ul>
<li>版權說明，若為私有專案可用 proprietary</li>
<li>可參考 SPDX 的 identifier 來設定<ul>
<li>Apache-2.0</li>
<li>BSD-2-Clause</li>
<li>MIT</li>
<li>…<blockquote>
<p>例: MIT</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Define your dependencies.</p>
<ul>
<li><p>Would you like to define your dependencies (require) interactively [yes]?<br>Search for a package: log</p>
<blockquote>
<p>選擇 <code>[0]psr/log</code></p>
</blockquote>
<p>Enter the version constraint to require (or leave blank to use the latest version): *</p>
<ul>
<li>require<ul>
<li>用來標示正式環境依賴的套件以及版本號<br>格式: “vendor/package-name” :  “version”</li>
<li>指定專案一定要安裝的套件或平台環境</li>
<li>如果現存的套件版本不符合 version 條件的話，就不會安裝任何套件。</li>
</ul>
</li>
</ul>
</li>
<li><p>Would you like to define your dev dependencies (require-dev) interactively [yes]?<br>Search for a package: phpunit</p>
<blockquote>
<p>選擇 <code>[0]psr/log</code></p>
</blockquote>
<p>Enter the version constraint to require (or leave blank to use the latest version): <code>&gt;=3.7.0</code></p>
<ul>
<li>require-dev<ul>
<li>用來標示開發環境依賴的套件以及版本號</li>
<li>格式同 require</li>
<li>主要指定開發用的套件</li>
<li>只能用在 root-package</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>產生 `composer.json</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"allen/tai"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"My First Application"</span><span class="token punctuation">,</span>
    <span class="token property">"require"</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">"psr/log"</span><span class="token operator">:</span> <span class="token string">"*"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"require-dev"</span> <span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">"phpunit/phpunit"</span><span class="token operator">:</span><span class="token string">"&gt;=3.7.0"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"license"</span> <span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>
  <span class="token property">"authors"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Allen Tai"</span><span class="token punctuation">,</span>
      <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"allen5183@gmail.com"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"minimum-stability"</span><span class="token operator">:</span> <span class="token string">"dev"</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>所有 <code>package</code> 都需要 <code>composer.json</code><br><code>composer.json</code> 的部份屬性只有在 <code>root-package</code> 才有作用。</li>
<li>只有專案負責人才做第一次 <code>install</code> 及之後的 <code>update</code> (會更動 composer.lock)</li>
<li>其他成員一律使用 <code>install</code></li>
<li>第一次 <code>install</code> 及之後的 <code>update</code> 會將所有相依套件的資訊編寫到 <code>composer.lock</code> 上，並固定套件版本</li>
<li>–prefer-source  從版本控制下載</li>
<li>–prefer-dist    下載壓縮檔</li>
</ol>
</li>
</ul>
</li>
<li><p>vendor 資料夾</p>
<ul>
<li>套件預設會安裝在 <code>vendor</code> 資料夾</li>
<li>自動載入的載入器與快取檔案放在<br><code>vendor/composer</code> 下</li>
</ul>
</li>
<li><p>全新安裝時之流程:</p>
<ol>
<li>composer.json    # 第一次全新安裝會參考 composer.json</li>
<li>Download list    # 接下來就會去官方套件庫下載清單</li>
<li>Download package # 找到符合版本設定的套件並下載</li>
<li>Generate composer.lock # 產生 composer.lock 並記住每個套件在此安裝時的版本，這樣一來就不再從清單理找符合的版本</li>
<li>Generate autoloading files # 將所有相依套件的自動載入設定加到快取檔案中</li>
</ol>
</li>
<li><p>再次安裝之流程:</p>
<ol>
<li>composer.lock    # 直接找 composer.lock 記錄的版本</li>
<li>Download package # 然後從快取或來源中獲得套件檔案</li>
<li>Generate composer.lock # 將所有相依套件的自動載入設定加到快取檔案中</li>
</ol>
</li>
<li><p>版本控制  </p>
<ul>
<li><code>root-package</code> 的 <code>composer.json</code> 及 <code>composer.lock</code> 要放到版本控制系統裡，這麼一來其他成員可以直接使用。</li>
<li><code>library</code> 的 <code>composer.lock</code> 則不要放到版本控制系統中</li>
<li><code>vendor</code> 資料夾不要放到版本控制系統，應該用 <code>composer install</code> 安裝。</li>
</ul>
</li>
<li><p><a href="https://packagist.org/">packagist.org</a></p>
<ul>
<li><p>記錄常見的 Open Source library 資訊</p>
</li>
<li><p>預設 composer 搜尋套件的地方</p>
</li>
<li><p>不須審核，人人都可以註冊自己的套件</p>
</li>
<li><p>不是實際存放套件內容的地方</p>
</li>
<li><p>運作方式</p>
<ul>
<li>composer 向 packagist 搜尋套件</li>
<li>packagist 回傳套件清單給 composer</li>
<li>composer 依照套件清單找到來源</li>
<li>composer 從來源取回套件內容</li>
</ul>
</li>
</ul>
</li>
<li><p>自動載入</p>
<ul>
<li><p>當要使用到的類別，不存在時，自動載入該類別。</p>
</li>
<li><p>為什麼 composer 要提供自動載入<br>在 PHP 開發過程中，如果希望從外部引入一個 class，通常會使用 include 和 require 方法，去把定義這個 class 的檔案包含進來。這個在小規模開發的時候，沒什麼大問題。但在大型的開發專案中，使用這種方式會帶來一些隱含的問題：如果一個 PHP 檔案需要使用很多其它類，那麼就需要很多的 require/include 語句，這樣有可能會造成遺漏或者包含進不必要的類檔案。如果大量的檔案都需要使用其它的類，那麼要保證每個檔案都包含正確的類檔案肯定是一個噩夢， 況且 require_once 的代價很大。</p>
<p>PHP5 為這個問題提供了一個解決方案，這就是類的自動裝載 (autoload) 機制。autoload 機制可以使得 PHP 程式有可能在使用類時才自動包含類檔案，而不是一開始就將所有的類檔案 include 進來，這種機制也稱為 lazy loading。</p>
</li>
<li><p>優點</p>
<ul>
<li>統一自動載入的方法</li>
<li>每個 Package 的目錄結構不見得相同</li>
<li>讓 Package 自行提供載入方式</li>
<li>使用類之前無需 include 或者 require</li>
<li>使用類的時候才會 require/include 檔案，實現了 lazy loading，避免了 require/include 多餘檔案。</li>
</ul>
</li>
<li><p>範例: composer.json</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"autoload"</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">"psr-o"</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token property">"Monolog\\"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/"</span><span class="token punctuation">,</span>  <span class="token string">"lib/"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">"Zend_"</span><span class="token operator">:</span> <span class="token string">"library/"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"classmap"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"classes/"</span><span class="token punctuation">,</span> <span class="token string">"Something.php"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/MyLibrary/function.php"</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th>psr-0</th>
<th>符合 PSR-0 規範的類別檔案</th>
</tr>
</thead>
<tbody><tr>
<td>classmap</td>
<td>對應類別名稱的檔案</td>
</tr>
<tr>
<td>files</td>
<td>非類別但需要一開始就自動載入的檔案</td>
</tr>
</tbody></table>
<blockquote>
<p>小提醒:</p>
</blockquote>
<blockquote>
<ol>
<li><code>autoload</code> 採相對於 <code>composer.json</code> 的路徑</li>
<li>每個套件只需負責自己的 autoload</li>
<li>在 root-package 執行:<br> <code>composer dump-autoload</code><br> 就會把所有相依套件的 <code>autoload</code> 屬性<br> 編譯到 <code>vendor</code> 目錄裡的快取檔案</li>
<li>載入 loader 之後就不用自行引用類別定義檔</li>
<li><code>MVC Framework</code> 只要在 <code>index.php</code> 載入 <code>loader</code> 即可</li>
</ol>
</blockquote>
</li>
</ul>
</li>
</ul>
<h5 id="1-1-4-4-Windows-Install-方式安裝"><a href="#1-1-4-4-Windows-Install-方式安裝" class="headerlink" title="1.1.4.4 Windows Install 方式安裝"></a>1.1.4.4 Windows Install 方式安裝</h5><ul>
<li><p>安裝檔，<a href="https://getcomposer.org/download">下載網址</a></p>
<blockquote>
<p>PS: 如之前已安裝過，需升級成新版本，可使用以下指令</p>
</blockquote>
<p><code>composer self-update</code></p>
</li>
<li><p>常用指令</p>
<ul>
<li><p>升級版本<br><code>composer self-update</code></p>
</li>
<li><p>版本查詢<br><code>composer -V</code></p>
</li>
<li><p>顯示有哪些指令和選項可用<br><code>composer list</code></p>
</li>
<li><p>顯示指令的詳細用法<br><code>composer help</code></p>
</li>
<li><p>安裝相依套件<br><code>composer install</code></p>
<ul>
<li>使用時機: 剛clone專案之後，或需要安裝專案相依套件時。</li>
<li>運行程序:<ol>
<li>檢查 <code>composer.json</code> 是否存在。</li>
<li>不存在的話，就跑 <code>update</code> 產生一個 <code>composer.json</code>。</li>
<li>存在的話，就依照 lock 的套件版號來安裝。</li>
<li>更新 <code>autoload.php</code> 程式。</li>
</ol>
</li>
</ul>
</li>
<li><p>安裝需求套件<br><code>composer require 套件名稱</code></p>
<ul>
<li>使用時機: 載入新套件到專案內。</li>
<li>運行程序:<ol>
<li>寫入 <code>composer.json</code>。</li>
<li>開始下載指定套件，並挑選最佳解的版本號。</li>
<li>更新 <code>autoload.php</code> 程式。  </li>
</ol>
</li>
</ul>
</li>
<li><p>更新套件<br><code>composer update</code></p>
<ul>
<li><p>使用時機: 修改composer.json 後，或需要更新套件版本時。</p>
</li>
<li><p>更新 <code>autoload.php</code><br><code>composer dump-autoload</code></p>
</li>
<li><p>使用時機: 當套件以位於 vendor 資料夾，但程式無法自動載入時。  </p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="1-1-5-下載-Laravel-安裝器"><a href="#1-1-5-下載-Laravel-安裝器" class="headerlink" title="1.1.5 下載 Laravel 安裝器"></a>1.1.5 下載 Laravel 安裝器</h4><ul>
<li><p>Laravel 功能特色</p>
<ul>
<li>支持用戶身分驗證與授權</li>
<li>完整的模組化套件系統</li>
<li>龐大的社群套件資源</li>
<li>好用的官方套件</li>
<li>彈性的資料庫介面</li>
<li>方便的命令列指令</li>
</ul>
</li>
<li><p>官方套件列表</p>
<table>
<thead>
<tr>
<th>套件名稱</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Airlock</td>
<td>SPA驗證</td>
</tr>
<tr>
<td>Cashier(Stripe)</td>
<td>下單服務</td>
</tr>
<tr>
<td>Cashier(Mobile)</td>
<td>下單服務</td>
</tr>
<tr>
<td>Dusk</td>
<td>測試服務</td>
</tr>
<tr>
<td>Envoy</td>
<td>遠端管理</td>
</tr>
<tr>
<td>Horizon</td>
<td>遠端管理</td>
</tr>
<tr>
<td>Passport</td>
<td>OAuth2驗證</td>
</tr>
<tr>
<td>Scout</td>
<td>全文檢索</td>
</tr>
<tr>
<td>Socialite</td>
<td>OAuth驗證</td>
</tr>
<tr>
<td>Telescope</td>
<td>除錯服務</td>
</tr>
</tbody></table>
</li>
<li><p>語意化版本(Semantic Versioning)</p>
<table>
<thead>
<tr>
<th>Laravel 5.8.35</th>
<th>5(Major)</th>
<th>8(Minor)</th>
<th>35(Patch)</th>
</tr>
</thead>
<tbody><tr>
<td>代表</td>
<td>大版本</td>
<td>小版本</td>
<td>修正</td>
</tr>
<tr>
<td>影響規模</td>
<td>整個 API 有改動</td>
<td>加新功能</td>
<td>錯誤修正</td>
</tr>
<tr>
<td>升級後影響?</td>
<td>程式需修改，否則可能出錯</td>
<td>沒有影響</td>
<td>穩定度提高</td>
</tr>
</tbody></table>
</li>
<li><p>版本限制<br>|                | 版號     |     描速             |<br>|—————-|———|———-|———-|<br>|完全吻合          | 5.8.3   | 限定為 5.8.3 版本    |<br>|通用範圍          | 5.8.*   | &gt;=5.8 &amp;&amp; &lt; 5.9 |<br>|連字範圍          | 5.0-6.0 | &gt;=5.0.0 &amp;&amp; &lt; 6.1|<br>|波浪號運算符       | ~5.8    | &gt;=5.8 &amp;&amp; &lt; 6.0  |<br>|^ 運算符          | ^5.8.9, ^0.1 | &gt;=5.8.9 &amp;&amp; &lt; 6.0 , &gt;=0.1 &amp;&amp; &lt; 0.2.0|<br>|穩定              | @dev    |dev&gt;alpha&gt;beta&gt;RC&gt;stable|</p>
</li>
<li><p>版本號選擇策略</p>
<ol>
<li>載⼊套件時，⼀般可參考套件的 <code>ReadMe</code> 說明，⽤ <code>composer require</code></li>
<li>⼿動修改 <code>composer.json</code> 時，⽤ <code>composer validate</code> 來確認語法正確否</li>
<li>除否有把握，避免使⽤ <code>dev-master</code> 或 <code>*</code> 的版本</li>
<li>盡量選遵照語意化版本設計的套件，通常⽐較安全</li>
</ol>
</li>
<li><p>參考<a href="laravel.tw/docs">Laravel 中文官網</a> 說明，有兩種方法:</p>
<p>方法一: </p>
<ol>
<li><p>先下載 <code>Laravel</code> 安裝包，開啟 <code>Terminal</code>，輸入以下指令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">composer</span> global require laravel/installer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>安裝後，此方法要再追加 <code>laravel</code> 指令的安裝路徑，如下。<br> <code>PATH=; %COMPOSER_HOME%\vendor\bin</code></p>
</blockquote>
</li>
<li><p>然後就可以使用該 <code>laravel</code> 指令建立專案.<br><code>laravel new 專案名稱</code></p>
</li>
</ol>
<p>方法二: 透過指令 <code>composer create-Project vendor-name/package-name  "版號"</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#composer create-project --prefer-dist laravel/laravel 專案名稱</span>
<span class="token comment">#不指定專案名稱，預設會是 laravel</span>
<span class="token function">composer</span> create-project --prefer-dist laravel/laravel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>推薦此方式；但 composer 若版本太舊會無法下載新版的 laravel 8.4.3。</p>
</blockquote>
</li>
</ul>
<h4 id="1-1-6-建立-Laravel-專案"><a href="#1-1-6-建立-Laravel-專案" class="headerlink" title="1.1.6 建立 Laravel 專案"></a>1.1.6 建立 Laravel 專案</h4><ol>
<li><p>開啟 <code>Terminal</code>，切換到 <code>xampp</code> 的 <code>htdocs</code> 資料夾，輸入指令，路徑應根據您的狀況作調整:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> d:<span class="token punctuation">\</span>xampp<span class="token punctuation">\</span>htdocs
<span class="token builtin class-name">cd</span> d:<span class="token punctuation">\</span>xampp<span class="token punctuation">\</span>htdocs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>如果要建立的是最新 <code>Laravel</code>版本的專案，請輸入指令</p>
<p><code>laravel new app_name</code></p>
<blockquote>
<p>例: <code>laravel new ezsite</code></p>
</blockquote>
</li>
<li><p>如果要建立指定 <code>Laravel</code> 版本的新專案，例如 <code>5.8</code>，需使用 <code>composer</code>，請輸入指令:</p>
<p><code>composer create-project --prefer-dist laravel/laravel app_name "5.8.*"</code></p>
</li>
<li><p>開啟專案，確定是否有 <code>.env</code> 檔案，如果找不到 <code>.env</code> 檔，可將 <code>.env.example</code> 檔案改名成 <code>.env</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> d:<span class="token punctuation">\</span>xampp<span class="token punctuation">\</span>htdocs<span class="token punctuation">\</span>ezsite
<span class="token function">dir</span> .env<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>檢查專案下的 <code>.env</code> 內文是否有:<br><code>APP_KEY=base64:8nRS4r2Ntkhuo+fvdov/Mxc6Je2R+84SHH0KTjSA430=</code></p>
<p>如果沒有可以透過下列方式產生應用金鑰，開啟 <code>Terminal</code>，切換到新建立的專案資料夾，請輸入指令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan key:generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>artisan 是一 <code>laravel</code> 的管理工具，利用它來執行 <code>laravel</code> 的各種指令。</p>
</blockquote>
</li>
<li><p>開啟專案，確定是否有 <code>.env</code> 檔案，如果找不到 <code>.env</code> 檔，可將 <code>.env.example</code> 檔案改名成 <code>.env</code></p>
</li>
</ol>
<h4 id="1-1-7-確認建置是否成功"><a href="#1-1-7-確認建置是否成功" class="headerlink" title="1.1.7 確認建置是否成功"></a>1.1.7 確認建置是否成功</h4><ul>
<li><strong>請確保 <code>Apache</code> 服務和 <code>MySQL</code> 服務都有開啟</strong></li>
</ul>
<ol>
<li><p>專案下，啟動專案</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> d:<span class="token punctuation">\</span>xampp<span class="token punctuation">\</span>htdocs<span class="token punctuation">\</span>ezsite
php artisan serve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>開啟瀏覽器，比如 <code>Google Chrome</code></p>
</li>
<li><p>輸入網址　<code>http://localhost:8000/</code></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210526160006.png" width="50%" height="50%" class="nofancybox">

</li>
</ol>
<h4 id="1-1-8-設定本地化網域-非必須"><a href="#1-1-8-設定本地化網域-非必須" class="headerlink" title="1.1.8 設定本地化網域(非必須)"></a>1.1.8 設定本地化網域(非必須)</h4><ol>
<li><p>將所命名的網域指向到本機 <code>127.0.0.1</code>，作法是修改 <code>hosts</code>，這裡以 <code>ezsite.test</code> 為例</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">nano <span class="token constant">C</span><span class="token operator">:</span>\windows\system32\drivers\etc\hosts
<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> ezsite<span class="token punctuation">.</span>test # Laravel 專案<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>告訴此網域需要由哪個專案資料夾來接手，作法是修改 <code>httpd-vhost.conf</code>，路徑應根據您的狀況作調整。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">//XAMPP資料夾\apache\conf\extra\httpd-vhosts.conf</span>
&lt;VirtualHost *<span class="token operator">:</span><span class="token number">6080</span>&gt;
  DocumentRoot <span class="token string">"D:/xampp/htdocs/ezsite/public"</span>
  ServerName ezsite.test
&lt;/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>要求 <code>Apache</code> 開啟時需讀取 <code>httpd-vhosts.conf</code>，作法是修改 <code>XAMPP</code> 資料夾\apache\conf\httpd.conf。找到 <code>Include conf/extra/httpd-vhosts.conf</code> 那一行，把前面的 <code>#</code> 註解移除。</p>
</li>
<li><p>重開 <code>Apache</code> 服務，訪問 <code>http://ezsite.test:6080</code>，看能否順利開啟。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210526215506.png" width="50%" height="50%" class="nofancybox">

</li>
</ol>
<h3 id="1-2-Mac-作業系統"><a href="#1-2-Mac-作業系統" class="headerlink" title="1.2 Mac 作業系統"></a>1.2 Mac 作業系統</h3><h4 id="1-2-1-安裝-XAMPP"><a href="#1-2-1-安裝-XAMPP" class="headerlink" title="1.2.1 安裝 XAMPP"></a>1.2.1 安裝 <code>XAMPP</code></h4><p><code>PHP + Apache + MariaDB</code> 懶人包</p>
<p><a href="https://www.apachefriends.org/zh_tw/download.html">下載網址</a></p>
<p>請下載 <code>PHP 7.2.5</code> 以上版本，下載完後安裝，過程只需不斷按 <code>Next</code> 即可。</p>
<p>選擇相同版號容量較小的非 VM 版本</p>
<h4 id="1-2-2-安裝-Visual-Studio-Code"><a href="#1-2-2-安裝-Visual-Studio-Code" class="headerlink" title="1.2.2 安裝 Visual Studio Code"></a>1.2.2 安裝 <code>Visual Studio Code</code></h4><p>由微軟提供，可免費使用的 IDE</p>
<p><a href="https://code.visualstudio.com/download">下載網址</a></p>
<h4 id="1-2-3-安裝-Composer"><a href="#1-2-3-安裝-Composer" class="headerlink" title="1.2.3 安裝 Composer"></a>1.2.3 安裝 <code>Composer</code></h4><p>用於管理所有 <code>PHP</code> 套件，包含 <code>Laravel</code></p>
<ol>
<li><p>進入 <code>Composer</code> 官網，複製指令<br><a href="https://getcomposer.org/download">指令複製網址</a></p>
</li>
<li><p>開啟Terminal，貼入以下指令並執行</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">php <span class="token operator">-</span>r <span class="token string">"copy('https://getcomposer.org/installer', 'composer-setup.php');"</span>
php <span class="token operator">-</span>r "<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hash_file</span><span class="token punctuation">(</span><span class="token string">'sha384'</span><span class="token punctuation">,</span> <span class="token string">'composer-setup.php'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'e0012edf3e80b6978849f5eff0d4b4e4c79ff1609dd1e613307e16318854d24ae64f26d17af3ef0bf7cfb710ca74755a'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> echo <span class="token string">'Installer verified'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> echo <span class="token string">'Installer corrupt'</span><span class="token punctuation">;</span>
<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">'composer-setup.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> echo <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>"
php composer<span class="token operator">-</span>setup<span class="token punctuation">.</span>php
php <span class="token operator">-</span>r <span class="token string">"unlink('composer-setup.php');"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>搬移到指定位置，指令如下：<br><code>sudo mv composer.phar /usr/local/bin/composer</code></p>
<p>==如果 <code>/usr/local/bin</code>不存在，輸入指令來建立: <code>sudo mkdir /usr/local/bin</code>==</p>
</li>
<li><p>開啟 <code>.bash_profile</code> 來設定路徑，輸入指令: <code>touch ~/.bash_profile;open ~/.bash_profile</code>，加入以下程式碼:<br><code>export PATH=/usr/local/bin:$PATH</code></p>
</li>
<li><p>立即讀取路徑設定，輸入指令: <code>source ~/.bash_profile</code></p>
</li>
</ol>
<h4 id="1-2-4-安裝-Homebrew-以下載缺少套件-非必須"><a href="#1-2-4-安裝-Homebrew-以下載缺少套件-非必須" class="headerlink" title="1.2.4 安裝 Homebrew 以下載缺少套件(非必須)"></a>1.2.4 安裝 <code>Homebrew</code> 以下載缺少套件(非必須)</h4><p>==可先跳到Step 5，如果安裝失敗再回來==</p>
<p>用於 <code>Mac</code> 環境安裝工具或套件，當執行 <code>composer</code> 時找不到必須套件，就需要使用 <code>Homebrew</code> 來下載</p>
<ol>
<li><p>開啟安裝 <code>Homebrew</code> 網站去複製指令，網址為 <code>https://brew.sh</code></p>
</li>
<li><p>開啟 <code>Terminal</code>，貼入以下指令並執行<br><code>/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</code></p>
</li>
<li><p>開啟 <code>Terminal</code>，輸入指令:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">brew install php@<span class="token number">7.4</span> 
brew link php@<span class="token number">7.4</span> <span class="token operator">--</span>force<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>==PS: <code>7.4</code> 版本應替換為你所安裝 <code>XAMPP</code> 所採用的 <code>PHP</code> 版本==</p>
</li>
</ol>
<h4 id="1-2-5-下載-Laravel-安裝器"><a href="#1-2-5-下載-Laravel-安裝器" class="headerlink" title="1.2.5 下載 Laravel 安裝器"></a>1.2.5 下載 <code>Laravel</code> 安裝器</h4><p>==如果進行這個階段遇到錯誤，請先退回到 <code>Step4</code> 安裝完再回來。如果跳出需要命令列開發者工具，點安裝來安裝工具==</p>
<ol>
<li><p>開啟 <code>Terminal</code>，輸入以下指令<br> <code>composer global require "laravel/installer"</code></p>
</li>
<li><p>開啟 <code>.bash_profile</code> 以設定路徑，輸入指令:<code>touch ~/.bash_profile;open ~/.bash_profile;</code>，修改完整程式碼如下:</p>
<p><code>export PATH=$HOME/.composer/vendor/bin:/Applications/XAMPP/xamppfiles/bin:/usr/local/bin:$PATH</code></p>
</li>
<li><p>立即讀取路徑設定，指令為 <code>source ~/.bash_profile</code></p>
</li>
</ol>
<h4 id="1-2-6-建立-Laravel-專案"><a href="#1-2-6-建立-Laravel-專案" class="headerlink" title="1.2.6 建立 Laravel 專案"></a>1.2.6 建立 <code>Laravel</code> 專案</h4><ol>
<li><p>開啟 <code>Terminal</code>，切換到 <code>xampp</code> 的 <code>htdocs</code> 資料夾，輸入指令，路徑應根據您的狀況作調整</p>
<p> <code>cd /Applications/XAMPP/htdocs</code></p>
</li>
<li><p>如果要建立指定 <code>Laravel</code> 版本的新專案，例如 <code>5.8</code>，需使用 <code>composer</code>，請輸入指令:</p>
<p><code>composer create-project --prefer-dist laravel/laravel app_name "5.8.*"</code></p>
<p>2.1(可選) 如果要建立的是最新 <code>Laravel</code> 版本的專案，請輸入指令</p>
<p><code>laravel new app_name</code></p>
<blockquote>
<p>例: <code>laravel new ezsite</code></p>
</blockquote>
</li>
<li><p>生成應用金鑰，開啟 <code>Terminal</code>，切換到新建立的專案資料夾，輸入指令</p>
<p><code>php artisan key:generate</code></p>
</li>
<li><p>將 <code>storage</code> 資料夾權限全開，同樣在 <code>Terminal</code>，路徑在專案資料夾，輸入指令</p>
<p><code>sudo chmod -R 777 storage</code></p>
</li>
<li><p>開啟專案，確定是否有 <code>.env</code> 檔案，如果找不到 <code>.env</code> 檔，可將 <code>.env.example</code> 檔案改名成 <code>.env</code></p>
</li>
</ol>
<h4 id="1-2-7-確認建置是否成功"><a href="#1-2-7-確認建置是否成功" class="headerlink" title="1.2.7 確認建置是否成功"></a>1.2.7 確認建置是否成功</h4><p>==請確保 <code>Apache</code> 服務和 <code>MySQL</code> 服務都有開啟==</p>
<ul>
<li><p>執行如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /Applications/XAMPP/htdocs/ezsite
php artisan serve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>開啟瀏覽器，比如 <code>Google Chrome</code></p>
</li>
<li><p>輸入網址　<code>http://localhost:8000/</code></p>
</li>
</ul>
<h4 id="1-2-8-設定本地化網域-非必須"><a href="#1-2-8-設定本地化網域-非必須" class="headerlink" title="1.2.8 設定本地化網域(非必須)"></a>1.2.8 設定本地化網域(非必須)</h4><ol>
<li><p>將所命名的網域指向到本機 <code>127.0.0.1</code>，作法是修改 <code>hosts</code>，這裡以 <code>ezsite.test</code> 為例</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//etc\hosts</span>
<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> ezsite<span class="token punctuation">.</span>test #Laravel 專案<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>告訴此網域需要由哪個專案資料夾來接手，作法是修改 <code>httpd-vhost.conf</code>，加入以下設定，路徑應根據您的狀況作調整</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//XAMPP資料夾\etc\extra\httpd-vhosts.conf</span>
<span class="token operator">&lt;</span>VirtualHost <span class="token operator">*</span><span class="token operator">:</span><span class="token number">6080</span><span class="token operator">&gt;</span>
   DocumentRoot <span class="token string">"/Applications/XAMPP/htdocs/ezsite"</span>  
   ServerName ezsite<span class="token punctuation">.</span>test
<span class="token operator">&lt;</span><span class="token operator">/</span>VirtualHost<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>要求 <code>Apache</code> 開啟時需讀取 <code>httpd-vhosts.conf</code>，作法是修改 <code>XAMPP</code> 資料夾 <code>\etc\httpd.conf</code>。找到 <code>httpd-vhosts.conf</code> 那一行，把前面的 <code>#</code> 註解移除。</p>
</li>
<li><p>重開 <code>Apache</code> 服務</p>
</li>
<li><p>開啟瀏覽器，訪問 <code>http://ezsite.test:6080</code>，看能否順利開啟</p>
</li>
</ol>
<h3 id="1-3-Linux-作業系統"><a href="#1-3-Linux-作業系統" class="headerlink" title="1.3 Linux 作業系統"></a>1.3 Linux 作業系統</h3><h4 id="1-3-1-安裝-Composer"><a href="#1-3-1-安裝-Composer" class="headerlink" title="1.3.1 安裝 Composer"></a>1.3.1 安裝 Composer</h4><ul>
<li><p>開啟終端機</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -sS https://getcomposer.org/installer  <span class="token operator">|</span> php
php composer.phar <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span>
<span class="token function">sudo</span> <span class="token function">mv</span> composer.phar  /user/local/bin/composer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>如果希望讓所有人都可以使用，就將 <code>composer.phar</code> 搬到共用執行目錄，例如 <code>/usr/local/bin</code><br>這樣就可以直接執行 <code>composer</code>，若不能執行，則要以 <code>chmod</code> 加入可執行權限。</p>
</blockquote>
</li>
</ul>
<h2 id="2-專案介紹、設定、MVC-概念"><a href="#2-專案介紹、設定、MVC-概念" class="headerlink" title="2. 專案介紹、設定、MVC 概念"></a>2. 專案介紹、設定、MVC 概念</h2><h3 id="主設定檔修改"><a href="#主設定檔修改" class="headerlink" title="主設定檔修改"></a>主設定檔修改</h3><ul>
<li><p>修改 <code>config/app.php</code>，設定 <code>timezone</code> 時區與 <code>locale</code> 語系</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//config/app.php</span>

<span class="token string">'locale'</span> <span class="token operator">=&gt;</span> <span class="token string">'zh_TW'</span><span class="token punctuation">,</span>           # <span class="token string">'en'</span>
<span class="token string">'timezone'</span> <span class="token operator">=&gt;</span> <span class="token string">'Asia/Taipei'</span><span class="token punctuation">,</span>   # <span class="token string">'UTC'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="隱私設定檔設定"><a href="#隱私設定檔設定" class="headerlink" title="隱私設定檔設定"></a>隱私設定檔設定</h3><ul>
<li><p>修改 <code>.env</code> 檔案，所設的值不可以有空格</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//.env</span>

<span class="token constant">APP_NAME</span><span class="token operator">=</span>ezsite <span class="token comment">//專案名稱</span>
<span class="token constant">APP_ENV</span><span class="token operator">=</span>local      <span class="token comment">//專案所在環境，local為本地端開發，production為正式上線環境</span>
<span class="token constant">APP_KEY</span> <span class="token comment">//應用金鑰，不得為空，可透過 php artisan key:generate來生成</span>
<span class="token constant">APP_DEBUG</span><span class="token operator">=</span><span class="token boolean">true</span>     <span class="token comment">//是否開啟除錯模式，正式上線環境建議關掉</span>
<span class="token constant">APP_URL</span><span class="token operator">=</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ezsite<span class="token punctuation">.</span>test<span class="token operator">:</span><span class="token number">6080</span> <span class="token comment">//這裡需須設定到專案下的 public 資料夾</span>

<span class="token constant">DB_CONNECTION</span><span class="token operator">=</span>mysql    <span class="token comment">//所要連接的資料庫</span>
<span class="token constant">DB_HOST</span><span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>      <span class="token comment">//資料庫 Ip Address</span>
<span class="token constant">DB_PORT</span><span class="token operator">=</span><span class="token number">3306</span>           <span class="token comment">//資料庫 port號</span>
<span class="token constant">DB_DATABASE</span><span class="token operator">=</span> ezsite    <span class="token comment">//資料庫名稱</span>
<span class="token constant">DB_USERNAME</span><span class="token operator">=</span> root      <span class="token comment">//資料庫帳號</span>
<span class="token constant">DB_PASSWORD</span><span class="token operator">=</span> <span class="token number">1</span>qaz@wsx  <span class="token comment">//資料庫密碼</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="MVC-概念"><a href="#MVC-概念" class="headerlink" title="MVC 概念"></a>MVC 概念</h3><ul>
<li><p>Image</p>
<img src="http://blog-images.allen5183.synology.me/laravel/mvc.jpg" width="50%" height="50%" class="nofancybox">  

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span>app
<span class="token operator">|</span><span class="token operator">--</span>Console       指令，相關檔案
<span class="token operator">|</span><span class="token operator">--</span>Exception     除錯相關檔案
<span class="token operator">|</span><span class="token operator">--</span>Http
<span class="token operator">|</span>   <span class="token operator">|</span><span class="token operator">--</span> Controllers
<span class="token operator">|</span><span class="token operator">--</span>Models        資料模組
<span class="token operator">|</span>   <span class="token operator">|</span><span class="token operator">--</span> User<span class="token punctuation">.</span>php 預設模組
<span class="token operator">|</span><span class="token operator">--</span>Providers     邏輯、套件使用方式
<span class="token operator">-</span>config          <span class="token function">設定一些參數</span><span class="token punctuation">(</span>連到哪<span class="token constant">DB</span><span class="token punctuation">,</span>送信到哪<span class="token punctuation">.</span><span class="token punctuation">.</span>等<span class="token punctuation">)</span>
<span class="token operator">-</span>database        <span class="token function">資料庫相關</span><span class="token punctuation">(</span>產生假資料<span class="token punctuation">.</span><span class="token punctuation">.</span>等<span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token keyword">public</span>          <span class="token function">靜態檔案</span><span class="token punctuation">(</span>圖片、供人下載檔案<span class="token punctuation">)</span>
<span class="token operator">-</span>resource        view 檔案，<span class="token constant">CSS</span>、<span class="token constant">JS</span> 檔案
<span class="token operator">-</span>routes          定義 <span class="token constant">URL</span> 連結到哪一個 Controler 類別與使用方法
<span class="token operator">-</span>storage         暫存檔案或讓使用者上傳檔案位置
<span class="token operator">-</span>tests           測試程式
<span class="token operator">-</span>vendor          laravel 專案會使用到的套件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>物聯網綜合應用(二)</title>
    <url>/iot/20210602-iot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0-課程準備"><a href="#0-課程準備" class="headerlink" title="0. 課程準備"></a>0. 課程準備</h2><ol>
<li><a href="https://drive.google.com/drive/folders/1YhOhREq4PmGqmGdS4rLc_dzmm0w92UTs?usp=sharing">雲端硬碟</a></li>
<li><a href="https://www.youtube.com/embed/zvrGOu8QFSo">生活智慧屋展示</a><br>
<iframe width="560" height="315" src="https://www.youtube.com/embed/zvrGOu8QFSo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></li>
<li><a href="https://drive.google.com/file/d/1EYgZEVWCqUnCRPuZ4-5JPg1hLfFeTPQs/view?usp=sharing">講義</a></li>
</ol>
<h2 id="1-硬體建置"><a href="#1-硬體建置" class="headerlink" title="1. 硬體建置"></a>1. 硬體建置</h2><h3 id="1-1-配線圖"><a href="#1-1-配線圖" class="headerlink" title="1.1 配線圖"></a>1.1 配線圖</h3><ul>
<li><p>樹莓派腳位圖</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602102127.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602102127_s.png" class="nofancybox  img-center"></a></p>
</li>
<li><p>樹莓派與其他裝置連接腳位圖</p>
<table>
<thead>
<tr>
<th align="left">PI3 B+ 腳位</th>
<th align="left">PI3 B+ 功能描述</th>
<th align="left">其他裝置腳位</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PI3 B+ 18</td>
<td align="left">GPIO 24</td>
<td align="left">Buzzer I/O</td>
</tr>
<tr>
<td align="left">PI3 B+ 2</td>
<td align="left">5V Power</td>
<td align="left">Buzzer VCC、SG 900 VCC(紅)</td>
</tr>
<tr>
<td align="left">PI3 B+ 6</td>
<td align="left">GND</td>
<td align="left">Buzzer GND、SG 900 GND(褐)</td>
</tr>
<tr>
<td align="left">PI3 B+ 11</td>
<td align="left">GPIO 17</td>
<td align="left">DHT 11 Out</td>
</tr>
<tr>
<td align="left">PI3 B+ 4</td>
<td align="left">5V Power</td>
<td align="left">DHT +</td>
</tr>
<tr>
<td align="left">PI3 B+ 20</td>
<td align="left">GND</td>
<td align="left">DHT -</td>
</tr>
<tr>
<td align="left">PI3 B+ 12</td>
<td align="left">GPIO 18 PCM_CLK</td>
<td align="left">SG 900 訊號(橘)</td>
</tr>
<tr>
<td align="left">PI3 B+ 37</td>
<td align="left">GPIO 26</td>
<td align="left">RELAY IN1</td>
</tr>
<tr>
<td align="left">PI3 B+ 13</td>
<td align="left">GPIO 27</td>
<td align="left">RELAY IN2</td>
</tr>
<tr>
<td align="left">PI3 B+ 15</td>
<td align="left">GPIO 22</td>
<td align="left">RELAY IN3</td>
</tr>
<tr>
<td align="left">PI3 B+ 16</td>
<td align="left">GPIO 23</td>
<td align="left">RELAY IN4</td>
</tr>
<tr>
<td align="left">PI3 B+ 24</td>
<td align="left">GPIO  8 SPIO_CE0_N</td>
<td align="left">RFID RC522 SDA</td>
</tr>
<tr>
<td align="left">PI3 B+ 23</td>
<td align="left">GPIO 11 SPIO_SCLK</td>
<td align="left">RFID RC522 SCK</td>
</tr>
<tr>
<td align="left">PI3 B+ 19</td>
<td align="left">GPIO 10 SPIO_MOSI</td>
<td align="left">RFID RC522 MOSI</td>
</tr>
<tr>
<td align="left">PI3 B+ 21</td>
<td align="left">GPIO  9 SPIO_MISO</td>
<td align="left">RFID RC522 MISO</td>
</tr>
<tr>
<td align="left">PI3 B+ 25</td>
<td align="left">GND</td>
<td align="left">RFID RC522 GND</td>
</tr>
<tr>
<td align="left">PI3 B+ 22</td>
<td align="left">GPIO 25</td>
<td align="left">RFID RC522 RST</td>
</tr>
<tr>
<td align="left">PI3 B+ 17</td>
<td align="left">3V3 Power</td>
<td align="left">RFID RC522 3.3V</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="1-2-網路設定參考"><a href="#1-2-網路設定參考" class="headerlink" title="1.2 網路設定參考"></a>1.2 網路設定參考</h3><p>有兩處可以修正網卡設定，擇一來設定，第一種方法會優先。</p>
<ol>
<li><p><code>sudo nano /etc/dhcpcd.conf</code></p>
</li>
<li><p><code>sudo nano /etc/network/interfaces</code></p>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">#表示使用 localhost
auto lo 
# 有網路卡 eth0，則用靜態方式設定 IP:
iface eth0 inet static
static ip_address=192.168.57.40
static routers=192.168.57.254
static domain_name_servers=8.8.8.8 168.95.1.1
  
# DHCP
#iface eth0 inet dhcp
# 有網路卡 eth0，則使用 dhcp 獲取 IP:
#static domain_name_servers=8.8.#8.8 168.95.1.1

# Wifi
#auto wlan0 #有 WLAN 使用 wlan0 裝置名稱
#wlan裝置可以熱拔插
#allow-hotplug wlan0
#有WLAN 網路時，使用 wpa-psk 認證方式
#iface wlan0 inet dhcp
#wpa-ssid "yvts"
#wpa-psk  "yvtsyvts"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>重新啟動</strong><br><code>sudo /etc/init.d/networking restart</code></p>
</li>
</ol>
<h2 id="2-環境設置"><a href="#2-環境設置" class="headerlink" title="2. 環境設置"></a>2. 環境設置</h2><h3 id="2-1-SSH-免密碼登入"><a href="#2-1-SSH-免密碼登入" class="headerlink" title="2.1 SSH 免密碼登入"></a>2.1 SSH 免密碼登入</h3><ol>
<li><p>使用系統管理者權限，修改檔案 <code>c:\windows\system32\drivers\etc\hosts</code></p>
<p>增加一筆資料如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">192.168</span>.xxx.xxx    smarthome.edu.tw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>測試:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> smarthome.edu.tw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>本機端(Window)，安裝 <a href="https://git-scm.com/downloads">Git</a></p>
</li>
<li><p>設定識別資料, 使用 <code>Git bash</code> 開啟終端機視窗後，執行如下命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name  <span class="token string">"John Doe"</span>
<span class="token function">git</span> config --global user.email  johndoe@example.com

<span class="token comment">#指定編輯器</span>
<span class="token function">git</span> config --global core.editor <span class="token string">"'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"</span>
<span class="token comment">#or</span>
<span class="token function">git</span> config --global core.editor <span class="token string">"'C:/tools/nano.exe' -multiInst -nosession"</span>   
<span class="token function">git</span> config --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>配置 <code>sshd</code> 服務，允許認證金鑰檔案:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#登入 PI</span>
<span class="token function">ssh</span> pi@smarthome.edu.tw
<span class="token comment">#修改 SSH Daemon 服務組態檔</span>
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/ssh/sshd_config
<span class="token comment"># 將最前面的註解符號 `#` 取消掉，如下</span>
  AuthorizedKeysFile      .ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在定時備份或批次遠端處理，往往需要免密碼登入遠端主機工作。為達此目的，首先必須在 client 端產生一組 key，包含公開金鑰（Public Key）與私密金鑰（Private Key），將公鑰送到要登入的主機，相互對應做免密碼的登入。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#檢查有無私鑰與公鑰(本機端 PC)</span>
<span class="token function">ls</span> -al ~/.ssh/id_rsa.pub
<span class="token function">ls</span> -al ~/.ssh/id_rsa
<span class="token comment">#若沒有金鑰的話，key 的產生方法：</span>
ssh-keygen -t rsa -C xxx@gmail.com

Generating public/private rsa key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/root/.ssh/id_rsa<span class="token punctuation">)</span>:
Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:
Enter same passphrase again:
Your identification has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.
Your public key has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.pub.
The key fingerprint is:
c3:e9:25:65:00:c8:65:cb:e8:fe:4e:7e:ce:06:a4:9d root@kvm8.deyu.wang
The key's randomart image is:
+--<span class="token punctuation">[</span> RSA <span class="token number">2048</span><span class="token punctuation">]</span>----+
<span class="token operator">|</span>   <span class="token builtin class-name">.</span> o+<span class="token punctuation">..</span>        <span class="token operator">|</span>
<span class="token operator">|</span>    o+ <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>       <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token builtin class-name">.</span> o   o      <span class="token operator">|</span>
<span class="token operator">|</span>   <span class="token builtin class-name">.</span>  <span class="token punctuation">..</span> +       <span class="token operator">|</span>
<span class="token operator">|</span>    .+ .S <span class="token builtin class-name">.</span>      <span class="token operator">|</span>
<span class="token operator">|</span>   <span class="token punctuation">..</span> E. +       <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token builtin class-name">.</span> <span class="token punctuation">..</span>.        <span class="token operator">|</span>
<span class="token operator">|</span>     + .o        <span class="token operator">|</span>
<span class="token operator">|</span>     .++o        <span class="token operator">|</span>
+-----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>將公開金鑰放到要登入的主機上，利用以下指令完成:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> pi@smarthome.edu.tw <span class="token string">'mkdir -p ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys'</span> <span class="token operator">&lt;</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>登入測試</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> pi@smarthome.edu.tw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>特別注意目錄 .ssh 及檔案 authorized_keys 的權限，若群組或其他人的權限過大，除了安全性有問題外，也有可能因 ssh 判斷要對應的金鑰不安全，而無法對應，也就是不能免密碼登入。</p>
</blockquote>
</li>
<li><p>調整權限<br>設定 PI 上的authorized_keys 可讀、寫</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> pi@smarthome.edu.tw <span class="token string">"chmod 600 ~/.ssh/authorized_keys"</span>
<span class="token comment"># 設定 PI 上的authorized_keys 唯讀</span>
   <span class="token function">ssh</span> pi@smarthome.wda.edu.tw <span class="token string">"chmod 400 ~/.ssh/authorized_keys"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>再簡化登入程序: 本機 PC 端，加入 <code>config</code>, 簡化 <code>ssh</code> 登入指令</p>
<ul>
<li><p>在 <code>~/.ssh</code> 下新增 <code>config</code> 檔案，不需任何副檔名。</p>
</li>
<li><p>在新增的檔案裡加上你的第一個 SSH config</p>
<p><code>nano ~/.ssh/config</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host pi                    <span class="token comment"># 用來連線的 alias 名稱</span>
HostName smarthome.edu.tw  <span class="token comment"># host domain 或 ip</span>
Port <span class="token number">22</span>                    <span class="token comment"># host 的 SSH port</span>
User pi                    <span class="token comment"># (選填)登入 SSH 的 username，</span>
                           <span class="token comment">#  只連 git 的話，可以不必要</span>
ForwardX11 <span class="token function">yes</span>             <span class="token comment"># (選填) 啟用回傳 GUI</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試<br><code>ssh pi</code>  </p>
</li>
</ul>
</li>
<li><p>常用 SSH 指令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#基本連線</span>
<span class="token function">ssh</span> username@hostname<span class="token punctuation">[</span>ip<span class="token punctuation">]</span>  
<span class="token comment">#SSH 連線再附加其他指令</span>
<span class="token function">ssh</span> pi <span class="token function">mkdir</span> <span class="token builtin class-name">test</span>
<span class="token comment">#scp 指定 SSH name</span>
<span class="token function">scp</span> -r ./ pi:/var/www/html/project/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>本機電腦端設定:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">d:
<span class="token builtin class-name">cd</span> d:<span class="token punctuation">\</span>xampp<span class="token punctuation">\</span>htdocs
   
<span class="token comment">#打開現行工作目錄</span>
code <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然後在 <code>vscode</code> 視窗下建立一新目錄 <code>smarthome</code>，就可以點擊滑鼠左鍵，來執行下載樹莓派檔案。</p>
</li>
<li><p>安裝 vscode 的套件 <code>sftp</code><br>F1 或 Ctrl+Shift+P, 選擇 SFTP:Config</p>
<p>加入以下設定:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>
   <span class="token punctuation">{</span>
       <span class="token builtin class-name">:</span>
   <span class="token punctuation">}</span> ,

   <span class="token punctuation">{</span>
    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"My Server"</span>,
    <span class="token string">"host"</span><span class="token builtin class-name">:</span> <span class="token string">"smarthome.edu.tw"</span>,
    <span class="token string">"protocol"</span><span class="token builtin class-name">:</span> <span class="token string">"sftp"</span>,
    <span class="token string">"port"</span><span class="token builtin class-name">:</span> <span class="token number">22</span>,
    <span class="token string">"username"</span><span class="token builtin class-name">:</span> <span class="token string">"pi"</span>,
    <span class="token string">"privateKeyPath"</span><span class="token builtin class-name">:</span> <span class="token string">"C:/Users/allen/.ssh/id_rsa"</span>,
    <span class="token string">"remotePath"</span><span class="token builtin class-name">:</span> <span class="token string">"/home/pi/www"</span>,
    <span class="token string">"uploadOnSave"</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h3 id="2-2-安裝-Apache-MySQL-PHP"><a href="#2-2-安裝-Apache-MySQL-PHP" class="headerlink" title="2.2 安裝 Apache + MySQL+ PHP"></a>2.2 安裝 <code>Apache + MySQL+ PHP</code></h3><ol>
<li><p>更新軟體套件清單<br><code>sudo apt get update y</code></p>
</li>
<li><p>更新軟體套件本身<br><code>sudo apt get upgrade y</code></p>
</li>
<li><p>重啟<br><code>reboot</code></p>
</li>
</ol>
<h4 id="2-2-1-安裝-Apache-PHP"><a href="#2-2-1-安裝-Apache-PHP" class="headerlink" title="2.2.1 安裝 Apache PHP"></a>2.2.1 安裝 Apache PHP</h4><ol>
<li><p>安裝軟體</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> get <span class="token function">install</span> apache2 y
<span class="token function">sudo</span> <span class="token function">apt</span> get <span class="token function">install</span> php mysql y
<span class="token function">sudo</span> <span class="token function">apt</span> get <span class="token function">install</span> php mbstring y
<span class="token function">sudo</span> systemctl restart apache2
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/apache2 apache2.conf <span class="token comment">## 設定文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160012.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160012_s.png" class="nofancybox  img-center"></a></p>
<br>
<a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160111.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160111_s.png" class="nofancybox  img-center"></a>

<p><code>sudo nano /etc/ports.conf</code></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160507.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160507_s.png" class="nofancybox  img-center"></a></p>
<p><strong>重啟伺服器</strong><br><code>sudo systemctl restart apache2</code></p>
</li>
<li><p>驗證 <code>apache</code> 正常運作：</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601161921.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601161921_s.png" class="nofancybox  img-center"></a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/www/html/
<span class="token function">sudo</span> <span class="token function">mv</span> index.html index1.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601162829.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601162829_s.png" class="nofancybox  img-center"></a></p>
</li>
<li><p>修改根目錄：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /home/pi/www/web
<span class="token function">sudo</span> <span class="token function">chown</span> -R pi:www-data /home/pi/www/web
<span class="token function">chmod</span> -R <span class="token number">770</span> /home/pi/www/web
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/apache2/apache2.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601165908.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601165908_s.png" class="nofancybox  img-center"></a></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601165936.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601165936_s.png" class="nofancybox  img-center"></a></p>
<p><code>sudo nano /etc/apache2/sites-enabled/000-default.conf</code></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601163545.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601163545_s.png" class="nofancybox  img-center"></a></p>
<blockquote>
<p>cd /etc/apache2/sites-available<br>sudo ln -s /etc/apache2/sites-enabled/000-default.conf<br>sudo systemctl restart apache2</p>
</blockquote>
</li>
<li><p>加入虛擬新網域</p>
<ul>
<li><p>新網域名稱: <code>smarthome.edu.tw</code></p>
</li>
<li><p>建立資料夾: <code>mkdir ~/www/smarthome</code></p>
</li>
<li><p>修改現有檔案: <code>nano /etc/apache2/sites-enabled/000-default.conf</code></p>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">&lt;VirtualHost *:80&gt;
  ServerName smarthome.edu.tw
  #ServerAdmin webmaster@localhost
  DocumentRoot /home/pi/www/smarthome

  &lt;Directory /home/pi/www/smarthome&gt;
    Options indexes FollowSymLinks
    AllowOverride None
    Require all granted
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>重啟 <code>Apache</code> 伺服器<br><code>sudo systemctl restart apache2</code></p>
</li>
<li><p>開啟 <code>PHP</code> 錯誤日誌<br><code>sudo nano /etc/php/7.0/apache2/php.ini</code></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601163646.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601163646_s.png" class="nofancybox  img-center"></a></p>
</li>
</ol>
<h4 id="2-2-2-安裝-MySQL"><a href="#2-2-2-安裝-MySQL" class="headerlink" title="2.2.2 安裝 MySQL"></a>2.2.2 安裝 MySQL</h4><ul>
<li><p>安裝<br><code>apt cache search mysql server</code><br><code>sudo apt get install mysql server</code></p>
</li>
<li><p>Setting MySQL/MariaDB root password  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql u root p
mysql<span class="token operator">&gt;</span> use mysql<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">plugin</span><span class="token operator">=</span><span class="token string">''</span> where u <span class="token assign-left variable">ser</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> flush privileges<span class="token punctuation">;</span>

<span class="token punctuation">(</span>刷新權限，當你直接通過 update 權限後，需要通過刷新使你的授權有效<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">exit</span>
<span class="token function">sudo</span> mysql_secure_installation
<span class="token function">sudo</span> mysql u root p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601170430.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601170430_s.png" class="nofancybox  img-center"></a></p>
<p><a href="https://websiteforstudents.com/mariadb--installedinstalled--witwithouthout--passwordpassword--promptsprompts--forfor--rootroot--onon--ubuntuubuntu--1717--1010--1818--0404--beta/beta/">參考文獻</a></p>
</li>
</ul>
<h4 id="2-2-3-安裝-phpmyadmin"><a href="#2-2-3-安裝-phpmyadmin" class="headerlink" title="2.2.3 安裝 phpmyadmin"></a>2.2.3 安裝 phpmyadmin</h4><ul>
<li><p>安裝 <code>sudo nano ~/www/web/info.php</code></p>
<p>內容加入：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191331.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191331_s.png" class="nofancybox  img-center"></a></p>
</li>
<li><p>檢查 <code>MySql</code> 版本</p>
<p><code>sudo mysql --version</code></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191548.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191548_s.png" class="nofancybox  img-center"></a></p>
</li>
<li><p>檢查 <code>PHP</code> 版本<br><code>sudo php --version</code></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191856.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191856_s.png"></a></p>
</li>
<li><p>找尋下載檔案 <a href="https://www.phpmyadmin.net/downloads/">phpmyadmin</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601192053.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601192053_s.png" class="nofancybox  img-center"></a></p>
<blockquote>
<p>補充:<br> 不可以使用 phpmyadmin 4.9+snapshot 的版本(不支援繁體中文，不穩定版本)</p>
</blockquote>
</li>
<li><p>下載與安裝</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">cd ~/www/web/
sudo wget https://files.phpmyadmin.net/phpMyAdmin/4.7.3/phpMyAdmin-4.7.3-alllanguages.tar.gz
sudo tar -zxvf phpMyAdmin-4.7.3-all-languages.tar.gz
sudo mv phpMyAdmin-4.7.3-all-languages phpMyAdmin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="2-2-4-解決-缺少-tmp-與-移除其他警告訊息"><a href="#2-2-4-解決-缺少-tmp-與-移除其他警告訊息" class="headerlink" title="2.2.4 解決 缺少 tmp 與 移除其他警告訊息"></a>2.2.4 解決 缺少 tmp 與 移除其他警告訊息</h4><ul>
<li><p>現象<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601194654.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601194654_s.png" class="nofancybox  img-center"></a></p>
<ul>
<li><p>解決 1: 移除設定檔案需要設定一組加密密碼 (blowfish_secret)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /var/www/html/phpMyAdmin/config.sample.inc.php  ~/www/web/phpMyAdmin/config.inc.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>sudo nano ~/www/web/phpMyAdmin/config.inc.php</code></p>
<p>將檔案內的 <code>$cfg['blowfish_secret'] = '';</code><br>設定為 ：(至少要 32 個字元)</p>
<p><code>$cfg['blowfish_secret'] = 'xxxxxxxxxxxxxxxx';</code></p>
<blockquote>
<p>意思是：加上一堆亂七八糟的英文數字當作秘鑰</p>
</blockquote>
</li>
<li><p>解決 2: 移除 <code>tmp</code> 警告訊息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /var/www/html/phpMyAdmin/tmp<span class="token punctuation">(</span>若本來就存在，刪除再新增<span class="token punctuation">)</span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> /var/www/html/phpMyAdmin/tmp
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> /var/www/html/phpMyAdmin/tm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601195724.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601195724_s.png" class="nofancybox  img-center"></a></p>
</li>
</ul>
</li>
</ul>
<h2 id="3-影像串流-MJPG-STREAMER-for-WebCam"><a href="#3-影像串流-MJPG-STREAMER-for-WebCam" class="headerlink" title="3. 影像串流  MJPG-STREAMER for WebCam"></a>3. 影像串流  MJPG-STREAMER for WebCam</h2><h3 id="3-1-說明"><a href="#3-1-說明" class="headerlink" title="3.1 說明"></a>3.1 說明</h3><p>  安裝 <code>mjpg-streamer</code>， <code>mjpg-streamer</code> 是用來將視訊網路串流化，透過 <code>mjpg</code> 裡面的解碼器，可以讓影像擷取速率以及畫質有良好的表現。</p>
<ul>
<li><p><a href="http://www.linux-projects.org/uv4l/installation/">參考文獻</a></p>
</li>
<li><p>PI 上安裝影像串流(mjpg-streamer)，把 <code>Raspberry Pi</code> 轉成 <code>Webcam server</code></p>
</li>
<li><p>PI 上安裝 <code>Motion</code>， 動態捕捉, 依照間格時間來抓取.</p>
</li>
</ul>
<h3 id="3-2-安裝相關套件"><a href="#3-2-安裝相關套件" class="headerlink" title="3.2 安裝相關套件"></a>3.2 安裝相關套件</h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新 apt-get</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade
<span class="token comment">#安裝依賴包</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> subversion
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libjpeg-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> imagemagick
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libv4l-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-3-安裝-mjpg-streamer"><a href="#3-3-安裝-mjpg-streamer" class="headerlink" title="3.3 安裝 mjpg-streamer"></a>3.3 安裝 <code>mjpg-streamer</code></h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/source
<span class="token builtin class-name">cd</span> ~/source
<span class="token comment"># 利用 svn 把最新版的 mjpg-streamer 抓下來</span>
svn co https://svn.code.sf.net/p/mjpg-streamer/code/
<span class="token builtin class-name">cd</span> code/mjpg-streamer
<span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>

<span class="token comment"># 拷貝到 *.so /usr/local/lib</span>
<span class="token function">sudo</span> <span class="token function">cp</span>  *.so /usr/local/lib/.
<span class="token comment"># 拷貝到 mjpg_streamer 到 /usr/local/bin</span>
<span class="token function">sudo</span> <span class="token function">cp</span> mjpg_streamer  /usr/local/bin/.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-4-停止-motion"><a href="#3-4-停止-motion" class="headerlink" title="3.4 停止 motion"></a>3.4 停止 <code>motion</code></h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#如果 motion 還在啟動中，先停掉</span>
<span class="token function">sudo</span> <span class="token function">service</span> motion stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-5-啟動-mjpg-streamer"><a href="#3-5-啟動-mjpg-streamer" class="headerlink" title="3.5 啟動 mjpg-streamer"></a>3.5 啟動 <code>mjpg-streamer</code></h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先打開 pi carmera</span>
<span class="token function">sudo</span> raspi-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-1.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-1_s.png" class="nofancybox  img-center"></a></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-2.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-2_s.png" class="nofancybox  img-center"></a></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-3.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-3_s.png" class="nofancybox  img-center"></a></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-4.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-4_s.png" class="nofancybox  img-center"></a></p>
<p><strong>須重開機</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source/code/mjpg-streamer
<span class="token function">sudo</span> ./mjpg_streamer -i <span class="token string">"./input_uvc.so -f 10 -r 1024x768 -d /dev/video0 -y -n"</span> -o <span class="token string">"./output_http.so -w ./www -p 8080"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-5.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-5_s.png" class="nofancybox  img-center"></a></p>
<blockquote>
<p><code>320x240</code> 也可以修改為 <code>640x480</code>，如果啟動失敗，請再執行下列程序:</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span>  /etc/modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>#加入以下內容 :<br>bcm2835-v412</p>
<p>#重新啟動<br><code>sudo reboot</code></p>
</li>
</ul>
<h3 id="3-6-測試"><a href="#3-6-測試" class="headerlink" title="3.6 測試"></a>3.6 測試</h3><p>  啟動後在 raspberry ip 位置。例如: <code>192.168.62.100:8080/stream.html</code> 中，檢查有沒有看到影像串流。</p>
<p>  <code>http://smarthome.edu.tw:8080/?action=streamer</code></p>
<p>  或<br>  <code>http://smarthome.edu.tw:8080/stream_simple.html</code></p>
<p>  如果要客制化頁面的，可以再在自己的頁面上加上 <code>tag</code><br>  <code>http://192.168.62.100:8080/?action=stream"</code>，就能捉的到串流影像。</p>
<ul>
<li><p>例:</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>center</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>560<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>315<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://192.168.62.100:8080/?action=stream<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> 0<span class="token punctuation">"</span></span>
      <span class="token attr-name">allowfullscreen</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-7-設置登入帳號和密碼"><a href="#3-7-設置登入帳號和密碼" class="headerlink" title="3.7 設置登入帳號和密碼"></a>3.7 設置登入帳號和密碼</h3><ul>
<li><p>關掉服務</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查指定程序 id</span>
pidof mjpg_streamer
<span class="token comment">#刪除指定 id</span>
<span class="token function">kill</span> -9 <span class="token punctuation">[</span>pid of mjpg_streamer<span class="token punctuation">]</span>

<span class="token function">sudo</span> ./mjpg_streamer -i <span class="token string">"./input_uvc.so -f 10 -r 320x240 -d /dev/video0 -y -n"</span> -o <span class="token string">"./output_http.so -w ./www -p 8080 -c userid:password"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-8-開機時自動執行串流伺服器"><a href="#3-8-開機時自動執行串流伺服器" class="headerlink" title="3.8 開機時自動執行串流伺服器"></a>3.8 開機時自動執行串流伺服器</h3><ul>
<li><p>操作步驟如下:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">cd <span class="token operator">~</span><span class="token operator">/</span>source
nano mjpg<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>內容如下:</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">import os
os.system('LD_LIBRARY_PATH=/usr/local/lib mjpg_streamer <span class="token punctuation">-</span>i "input_uvc.so <span class="token punctuation">-</span>y <span class="token punctuation">-</span>r 1024x768 <span class="token punctuation">-</span>n" <span class="token punctuation">-</span>o "output_http.so <span class="token punctuation">-</span>w /home/pi/source/code/mjpg<span class="token punctuation">-</span>streamer/www"')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>#改變屬性(可執行)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> mjpg.py
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/crontab

<span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/sh

<span class="token comment">#0 0 * * * root  python /home/pi/source/mjpg.py</span>
@reboot root python /home/pi/source/mjpg.py <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意: import os 與 os.system() 注意前面不要空行</p>
</blockquote>
</li>
</ul>
<h2 id="4-GPIO-控制"><a href="#4-GPIO-控制" class="headerlink" title="4. GPIO 控制"></a>4. GPIO 控制</h2><h3 id="4-1-說明"><a href="#4-1-說明" class="headerlink" title="4.1 說明"></a>4.1 說明</h3><p>  網頁控制 LED(燈與風扇) Relay Control (GPIO)，現在方法使用國外人寫的一個插件模組<a href="http://wiringpi.com/download-and-install/">wiringPI</a>, 然後在網頁上使用執行 linux shell command 來控制腳位(針腳)用 php 控制．</p>
<blockquote>
<p>可改寫成不用這插件, 直接用 <code>python</code> 來控制腳位</p>
</blockquote>
<h3 id="4-2-腳位控制-GPIO"><a href="#4-2-腳位控制-GPIO" class="headerlink" title="4.2 腳位控制 GPIO"></a>4.2 腳位控制 GPIO</h3><ul>
<li><p>腳位</p>
<table>
<thead>
<tr>
<th>腳位名稱</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>GPIO26</td>
<td>RELAY IN1 For Fan</td>
</tr>
<tr>
<td>GPIO27</td>
<td>RELAY IN2 For LED</td>
</tr>
<tr>
<td>GPIO22</td>
<td>RELAY IN3 For LED</td>
</tr>
<tr>
<td>GPIO23</td>
<td>RELAY IN4 For LED</td>
</tr>
</tbody></table>
</li>
<li><p>安裝模組 <code>wiringPi</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> wiringpi<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>目前 PI 都已內建支援 GPIO，使用命令： <code>pinout</code> 可得知腳位訊息。</p>
</blockquote>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-gpio-pinout.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-gpio-pinout_s.png" class="nofancybox  img-center"></a></p>
</li>
</ul>
<h3 id="4-3-測試有無-WiringPi-模組"><a href="#4-3-測試有無-WiringPi-模組" class="headerlink" title="4.3 測試有無 WiringPi 模組"></a>4.3 測試有無 <code>WiringPi</code> 模組</h3><ul>
<li><p>檢查 GPIO 版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpio -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>顯示目前所有 GPIO 的輸入或輸出狀態</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gpio readall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_gpio_readall.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_gpio_readall_s.png" class="nofancybox  img-center"></a></p>
</li>
</ul>
<h3 id="4-4-測試硬體接線狀態"><a href="#4-4-測試硬體接線狀態" class="headerlink" title="4.4 測試硬體接線狀態"></a>4.4 測試硬體接線狀態</h3><ul>
<li><p>使用下列指令作測試</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpio -g mode <span class="token number">26</span> out
gpio -g <span class="token function">write</span> <span class="token number">26</span> <span class="token number">1</span>
gpio -g <span class="token function">write</span> <span class="token number">26</span> <span class="token number">0</span>

gpio -g mode <span class="token number">27</span> out
gpio -g <span class="token function">write</span> <span class="token number">27</span> <span class="token number">1</span>
gpio -g <span class="token function">write</span> <span class="token number">27</span> <span class="token number">0</span>

gpio -g mode <span class="token number">22</span> out
gpio -g <span class="token function">write</span> <span class="token number">22</span> <span class="token number">1</span>
gpio -g <span class="token function">write</span> <span class="token number">22</span> <span class="token number">0</span>

gpio -g mode <span class="token number">23</span> out
gpio -g <span class="token function">write</span> <span class="token number">23</span> <span class="token number">1</span>
gpio -g <span class="token function">write</span> <span class="token number">23</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><a href="https://www.raspberrypi.org/documentation/configuration/config-txt/gpio.md">參考文件: GPIO Control</a></p>
</blockquote>
</li>
</ul>
<h3 id="4-5-使用網頁技術程式控制-GPIO"><a href="#4-5-使用網頁技術程式控制-GPIO" class="headerlink" title="4.5 使用網頁技術程式控制 GPIO"></a>4.5 使用網頁技術程式控制 <code>GPIO</code></h3><h4 id="4-5-1-單顆控制"><a href="#4-5-1-單顆控制" class="headerlink" title="4.5.1 單顆控制"></a>4.5.1 單顆控制</h4><ul>
<li><code>gpio1.php</code></li>
<li><code>gpio2.php</code></li>
<li><code>gpio3.php</code></li>
<li><code>gpio4.php</code></li>
</ul>
<h4 id="4-5-2-多顆控制"><a href="#4-5-2-多顆控制" class="headerlink" title="4.5.2 多顆控制"></a>4.5.2 多顆控制</h4><ul>
<li><code>gpio_all.php</code></li>
</ul>
<h4 id="4-5-3-使用-Ajax-技術-串接-API-控制"><a href="#4-5-3-使用-Ajax-技術-串接-API-控制" class="headerlink" title="4.5.3 使用 Ajax 技術 串接 API 控制"></a>4.5.3 使用 <code>Ajax</code> 技術 串接 <code>API</code> 控制</h4><ul>
<li><code>gpio_all_ajax.php</code></li>
<li><code>gpio_all_ajax_api.php</code></li>
</ul>
<h4 id="4-5-4-使用-Webstorage-儲存狀態，控制-LED"><a href="#4-5-4-使用-Webstorage-儲存狀態，控制-LED" class="headerlink" title="4.5.4 使用 Webstorage 儲存狀態，控制 LED"></a>4.5.4 使用 Webstorage 儲存狀態，控制 LED</h4><ul>
<li><code>gpioControl.php</code></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>iot</tag>
        <tag>wiot</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery</title>
    <url>/jquery/20201116-jquery/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-jQuery-基本概念"><a href="#1-jQuery-基本概念" class="headerlink" title="1. jQuery 基本概念"></a>1. jQuery 基本概念</h2><blockquote>
<p>學習目標：學會如何使用 jQuery，掌握 jQuery 的常用 api，能夠使用 jQuery 實現常見的效果。</p>
</blockquote>
<h3 id="1-1-為什麼要學習-jQuery"><a href="#1-1-為什麼要學習-jQuery" class="headerlink" title="1.1 為什麼要學習 jQuery?"></a>1.1 為什麼要學習 jQuery?</h3><ul>
<li><p>【01-讓div 顯示與設置內容(JS).html】</p>
</li>
<li><p>使用 javascript 開發過程中，有許多的缺點：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> 查找元素的方法太少，麻煩。
<span class="token number">2.</span> 遍歷偽陣列很麻煩，通常要嵌套一大堆的<span class="token keyword">for</span>迴圈。
<span class="token number">3.</span> 有相容性問題。
<span class="token number">4.</span> 想要實現簡單的動畫效果，也很麻煩
<span class="token number">5.</span> 代碼冗餘。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="1-2-jQuery-初體驗"><a href="#1-2-jQuery-初體驗" class="headerlink" title="1.2 jQuery 初體驗"></a>1.2 jQuery 初體驗</h3><ul>
<li><p>【02-讓div顯示與設置內容(jQuery).html】</p>
</li>
<li><p>範例</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//隱式反覆運算：偷偷的遍歷，在jQuery中，不需要手動寫for迴圈了，會自動進行遍歷。</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"我是內容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>優點總結：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> 查找元素的方法多種多樣，非常靈活
<span class="token number">2.</span> 擁有隱式反覆運算特性，因此不再需要手寫<span class="token keyword">for</span>迴圈了。
<span class="token number">3.</span> 完全沒有相容性問題。
<span class="token number">4.</span> 實現動畫非常簡單，而且功能更加的強大。
<span class="token number">5.</span> 代碼簡單、粗暴。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<blockquote>
<p>沒有對比，就沒有傷害，有了對比，處處戳中要害。</p>
</blockquote>
<h3 id="1-3-什麼是-jQuery"><a href="#1-3-什麼是-jQuery" class="headerlink" title="1.3 什麼是 jQuery?"></a>1.3 什麼是 jQuery?</h3><ul>
<li><blockquote>
<p>jQuery的官網 <a href="http://jquery.com/">http://jquery.com/</a></p>
</blockquote>
</li>
<li><blockquote>
<p>jQuery就是一個js庫，使用jQuery的話，會比使用JavaScript更簡單。</p>
</blockquote>
</li>
<li><p><code>js</code> 庫：把一些常用到的方法寫到一個單獨的 <code>js</code> 檔，使用的時候直接去引用這 <code>js</code> 檔就可以了。（animate.js、common.js）</p>
</li>
</ul>
<p>  我們知道了，<code>jQuery</code> 其實就是一個 <code>js</code> 檔，裡面封裝了一大堆的方法方便我們的開發，其實就是一個加強版的 <code>common.js</code>，因此我們學習 <code>jQuery</code>，其實就是學習 <code>jQuery</code> 這個 <code>js</code> 檔中封裝的一大堆方法。</p>
<h3 id="1-4-jQuery-的版本"><a href="#1-4-jQuery-的版本" class="headerlink" title="1.4 jQuery 的版本"></a>1.4 jQuery 的版本</h3><ul>
<li><blockquote>
<p>官網下載地址：<a href="http://jquery.com/download/">http://jquery.com/download/</a></p>
</blockquote>
</li>
<li><blockquote>
<p><code>jQuery</code> 版本有很多，分為 1.x 2.x 3.x</p>
</blockquote>
</li>
<li><p>大版本分類：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>x 版本：能夠相容<span class="token constant">IE678</span>流覽器
<span class="token number">2.</span>x 版本：不相容<span class="token constant">IE678</span>流覽器
<span class="token number">1.</span>x 和 <span class="token number">2.</span>x 版本 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jquery</span><span class="token template-punctuation string">`</span></span> 都不再更新版本了，現在只更新 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">3.x</span><span class="token template-punctuation string">`</span></span> 版本。

<span class="token number">3.</span>x 版本：不相容 <span class="token constant">IE678</span>，更加的精簡（在國內不流行，因為國內使用 jQuery 的主要目的就是相容<span class="token constant">IE678</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>關於壓縮版和未壓縮版</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">jquery<span class="token operator">-</span><span class="token number">1.12</span><span class="token number">.4</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token operator">:</span>壓縮版本，適用於生產環境，因為檔比較小，去除了注釋、換行、空格等東西，但是基本沒有顆閱讀性。
jquery<span class="token operator">-</span><span class="token number">1.12</span><span class="token number">.4</span><span class="token punctuation">.</span>js<span class="token operator">:</span>未壓縮版本，適用于學習與開發環境，源碼清晰，易閱讀。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="1-5-jQuery-的入口函數"><a href="#1-5-jQuery-的入口函數" class="headerlink" title="1.5 jQuery 的入口函數"></a>1.5 <code>jQuery</code> 的入口函數</h3><ul>
<li><p>使用 <code>jQuery</code> 的三個步驟：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> 引入 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jQuery</span><span class="token template-punctuation string">`</span></span> 文件
<span class="token number">2.</span> 入口函數
<span class="token number">3.</span> 功能實現<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>關於jQuery的入口函數：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//第一種寫法</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//第二種寫法</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>jQuery</code> 入口函數與 <code>js</code> 入口函數的對比</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> JavaScript的入口函數要等到頁面中所有資源（包括圖片、檔案）載入完成才開始執行。
<span class="token number">2.</span> jQuery的入口函數只會等待文檔樹載入完成就開始執行，並不會等待圖片、檔的載入。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="1-6-jQuery-物件與-DOM-物件的區別（重點）"><a href="#1-6-jQuery-物件與-DOM-物件的區別（重點）" class="headerlink" title="1.6 jQuery 物件與 DOM 物件的區別（重點）"></a>1.6 <code>jQuery</code> 物件與 <code>DOM</code> 物件的區別（重點）</h3><ul>
<li><p>歸納</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> <span class="token constant">DOM</span> 對象：使用 JavaScript 中的方法獲取頁面中的元素返回的物件就是 <span class="token constant">DOM</span> 物件。
<span class="token number">2.</span> jQuery 對象：jquery 物件就是使用 jquery 的方法獲取頁面中的元素返回的物件就是 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jQuery</span><span class="token template-punctuation string">`</span></span> 物件。
<span class="token number">3.</span> jQuery 物件其實就是 <span class="token constant">DOM</span> 物件的包裝集（包裝了 <span class="token constant">DOM</span> 物件的集合（偽陣列））
<span class="token number">4.</span> <span class="token constant">DOM</span> 物件與 jQuery 物件的方法不能混用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>DOM</code> 物件轉換成 <code>jQuery</code> 物件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> $obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>domObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// $(document).ready(function(){});就是典型的DOM物件轉jQuery物件</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><code>jQuery</code> 物件轉換成 <code>DOM</code> 物件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> $li <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//第一種方法（推薦使用）</span>
$li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment">//第二種方法</span>
$li<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>【練習：隔行變色案例.html】</p>
</li>
</ul>
<h3 id="1-7-符號的實質"><a href="#1-7-符號的實質" class="headerlink" title="1.7 $ 符號的實質"></a>1.7 <code>$</code> 符號的實質</h3><ul>
<li><p><code>$</code> 符號代表是什麼 ?</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> $<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>結果<br>function</li>
</ul>
</li>
<li><p><code>$</code> 其實就是一個函數，以後用$的時候，記得跟小括弧 $();<br>這函式能作什麼，依參數不同，功能就不同，有 3 種功能。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token number">1.</span> 入口函式。
  <span class="token number">2.</span> 把 dom 物件轉換成 jquery 物件。
  <span class="token number">3.</span> 用來找物件。
  
<span class="token operator">-</span> 參數不同，功能就不同，<span class="token number">3</span> 種用法

 <span class="token number">1.</span> 參數是一個 <span class="token keyword">function</span><span class="token punctuation">,</span> 入口函數

    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`javascript
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li><p>參數可以是一個 <code>DOM</code> 對象, 把 <code>DOM</code> 物件轉換成 <code>jquery</code> 物件</p>
<pre class="line-numbers language-jajascript" data-language="jajascript"><code class="language-jajascript">$(document).ready(function () {
  
});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>$(document) 把 <code>DOM</code> 的 <code>document</code> 物件轉換成 <code>jQ</code> 對象, 所以就可用 <code>jQ</code> 的 <code>ready()</code> 方法。</p>
</blockquote>
</li>
<li><p>參數是一個字串(有一定格式),用來找物件。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ol>
</li>
</ul>
<h3 id="1-8-選擇器"><a href="#1-8-選擇器" class="headerlink" title="1.8 選擇器"></a>1.8 選擇器</h3><h4 id="1-8-1-什麼是-jQuery-選擇器"><a href="#1-8-1-什麼是-jQuery-選擇器" class="headerlink" title="1.8.1 什麼是 jQuery 選擇器"></a>1.8.1 什麼是 <code>jQuery</code> 選擇器</h4><ul>
<li><p><code>jQuery</code> 選擇器是 <code>jQuery</code> 為我們提供的一組方法，讓我們更加方便的獲取到頁面中的元素。注意：- <code>jQuery</code> 選擇器返回的是 <code>jQuery</code> 物件。</p>
</li>
<li><p><code>jQuery</code> 選擇器有很多，基本相容了 <code>CSS1</code> 到<code>CSS3</code> 所有的選擇器，並且 <code>jQuery</code> 還添加了很多更加複雜的選擇器。【查看 <code>jQuery</code> 文檔】</p>
</li>
<li><p><code>jQuery</code> 選擇器雖然很多，但是選擇器之間可以相互替代，就是說獲取一個元素，你會有很多種方法獲取到。所以我們平時真正能用到的只是少數的最常用的選擇器。</p>
</li>
</ul>
<blockquote>
<p>找 jQuery 對象與有許多方法。</p>
</blockquote>
<h4 id="1-8-2-基本選擇器"><a href="#1-8-2-基本選擇器" class="headerlink" title="1.8.2 基本選擇器"></a>1.8.2 基本選擇器</h4><ul>
<li>基本選擇器<table>
<thead>
<tr>
<th>名稱</th>
<th>用法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>ID選擇器</td>
<td>$(“#id”);</td>
<td align="left">獲取指定ID的元素</td>
</tr>
<tr>
<td>類別選取器</td>
<td>$(“.class”);</td>
<td align="left">獲取同一類class的元素</td>
</tr>
<tr>
<td>標籤選擇器</td>
<td>$(“div”);</td>
<td align="left">獲取同一類標籤的所有元素</td>
</tr>
<tr>
<td>聯集選擇器</td>
<td>$(“div,p,li”);</td>
<td align="left">使用逗號分隔，只要符合條件之一就可。</td>
</tr>
<tr>
<td>交集選擇器</td>
<td>$(“div.redClass”);</td>
<td align="left">獲取 class 為 redClass 的div元素</td>
</tr>
</tbody></table>
</li>
</ul>
<blockquote>
<p>總結：跟 <code>css</code> 的選擇器用法一模一樣。</p>
</blockquote>
<h3 id="1-9-層級選擇器"><a href="#1-9-層級選擇器" class="headerlink" title="1.9 層級選擇器"></a>1.9 層級選擇器</h3><ul>
<li>層級選擇器<table>
<thead>
<tr>
<th>名稱</th>
<th>用法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>子代選擇器</td>
<td>$(“ul&gt;li”);</td>
<td align="left">使用 &gt; 號，獲取兒子層級的元素，注意，並不會獲取孫子層級的元素</td>
</tr>
<tr>
<td>後代選擇器</td>
<td>$(“ul li”);</td>
<td align="left">使用空格， 代表後代選擇器，獲取 ul 下的所有 li 元素，包括孫子等</td>
</tr>
</tbody></table>
</li>
</ul>
<blockquote>
<p>跟 CSS 的選擇器一模一樣。</p>
</blockquote>
<ul>
<li><p>表單選擇器<br>例一 <code>.disabled</code> 查找所有不可用 <code>input</code> 元素。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-jquery" data-language="jquery"><code class="language-jquery">$("input:disabled")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>結果<br><code>[ &lt;input type="email" name="email" disabled="disabled" /&gt;]</code><br>
例二 `.enabled` 查找所有可用 `input` 元素。

</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-jquery" data-language="jquery"><code class="language-jquery">$("input:enabled")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>結果<br><code>[&lt;input type="text" name="id" /&gt;]</code></li>
</ul>
</li>
</ul>
<h3 id="1-10-過濾選擇器"><a href="#1-10-過濾選擇器" class="headerlink" title="1.10 過濾選擇器"></a>1.10 過濾選擇器</h3><ul>
<li><p>這類別選取器都帶冒號:</p>
<table>
<thead>
<tr>
<th>名稱</th>
<th>用法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>:eq（index）</td>
<td>$(“li:eq(2)”).css(“color”, “red”);</td>
<td align="left">獲取到的li元素中，選擇索引號為2的元素，索引號index從0開始。</td>
</tr>
<tr>
<td>:odd</td>
<td>$(“li:odd”).css(“color”, “red”);</td>
<td align="left">獲取到的li元素中，選擇索引號為奇數的元素</td>
</tr>
<tr>
<td>:even</td>
<td>$(“li:even”).css(“color”, “red”);</td>
<td align="left">獲取到的li元素中，選擇索引號為偶數的元素</td>
</tr>
</tbody></table>
</li>
</ul>
<p>【案例：隔行變色】</p>
<h3 id="1-11-篩選選擇器-方法"><a href="#1-11-篩選選擇器-方法" class="headerlink" title="1.11 篩選選擇器(方法)"></a>1.11 篩選選擇器(方法)</h3><ul>
<li><p>篩選選擇器(方法)</p>
<blockquote>
<p>篩選選擇器的功能與過濾選擇器(對象都是用字串包起來)有點類似，但是用法不一樣，篩選選擇器主要是方法。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">名稱</th>
<th align="left">用法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">children(selector)</td>
<td align="left">$(“ul”).children(“li”)</td>
<td align="left">相當於$(“ul&gt;li”)，子類別選取器</td>
</tr>
<tr>
<td align="left">find(selector)</td>
<td align="left">$(“ul”).find(“li”);</td>
<td align="left">相當於$(“ul li”),後代選擇器</td>
</tr>
<tr>
<td align="left">siblings(selector)</td>
<td align="left">$(“#first”).siblings(“li”);</td>
<td align="left">查找兄弟節點，不包括自己本身。</td>
</tr>
<tr>
<td align="left">parent()</td>
<td align="left">$(“#first”).parent();</td>
<td align="left">查找父親</td>
</tr>
<tr>
<td align="left">eq(index)</td>
<td align="left">$(“li”).eq(2);</td>
<td align="left">相當於$(“li:eq(2)”),index從0開始</td>
</tr>
<tr>
<td align="left">next()</td>
<td align="left">$(“li”).next()</td>
<td align="left">找下一個兄弟</td>
</tr>
<tr>
<td align="left">prev()</td>
<td align="left">$(“li”).prev()</td>
<td align="left">找上一次兄弟</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="1-12-下拉式選單案例"><a href="#1-12-下拉式選單案例" class="headerlink" title="1.12 下拉式選單案例"></a>1.12 下拉式選單案例</h3><ul>
<li><strong><code>mouseenter</code> 與 <code>mouseover</code> 的區別</strong></li>
</ul>
<h3 id="1-13-突出展示案例"><a href="#1-13-突出展示案例" class="headerlink" title="1.13 突出展示案例"></a>1.13 突出展示案例</h3><h3 id="1-14-視窗褶合展示"><a href="#1-14-視窗褶合展示" class="headerlink" title="1.14 視窗褶合展示"></a>1.14 視窗褶合展示</h3><h3 id="1-15-精品展示案例"><a href="#1-15-精品展示案例" class="headerlink" title="1.15 精品展示案例"></a>1.15 精品展示案例</h3><h3 id="1-16-index-方法詳述"><a href="#1-16-index-方法詳述" class="headerlink" title="1.16 index()方法詳述"></a>1.16 index()方法詳述</h3><h3 id="1-17-複習"><a href="#1-17-複習" class="headerlink" title="1.17 複習"></a>1.17 複習</h3><h3 id="1-18-jQuery-的除錯"><a href="#1-18-jQuery-的除錯" class="headerlink" title="1.18 jQuery 的除錯"></a>1.18 <code>jQuery</code> 的除錯</h3><ul>
<li><p><code>jQuery</code> 執行不會報任何錯誤，因為 <code>JS</code> 中程式碼任一行有錯誤就會停止後面的指令繼續執行。</p>
</li>
<li><p>會什麼在 <code>JS</code> 中，執行有錯誤會報錯而 <code>jQuery</code> 不會呢?<br><code>JS</code> 找不到對象時會返回 NONE，針對這 NONE 對象是不能做任何事情的且會報錯，但是 <code>JQ</code> 即使找不到對象也是返回一個 jQuery 對象，只是裡面沒有內容值(屬性或方法..et)，即 <code>.length=0</code>。例如: <code>jQuery.fn.init[0]</code>。</p>
</li>
<li><p><code>jQuery</code> 會出現問題只有找不到對象，那如何除錯呢?</p>
<ol>
<li>使用 <code>console.log()</code> 或 alert()。</li>
<li>使用瀏覽器除錯模式中的斷點功能，檢查所有選取對象是否有找到對象的<strong>內容</strong>。</li>
</ol>
</li>
</ul>
<h3 id="1-19-總結"><a href="#1-19-總結" class="headerlink" title="1.19 總結"></a>1.19 總結</h3><ul>
<li><p><code>jquery</code>: 簡單、粗暴</p>
<p><code>jq</code> 和 <code>js</code> 的關係<br><code>js</code> 是什麼？ <code>js</code> 是一門程式設計語言<br><code>jq</code> 僅僅是基於 <code>js</code> 的一個庫，<code>jq</code> 可理解為就是開發 <code>js</code> 的一個工具。</p>
</li>
<li><p>概念</p>
<ol>
<li>為什麼要學 <code>jquery</code> ？ 簡單，粗暴 沒有相容性問題</li>
<li>什麼是 <code>jquery</code>？ <code>js</code> 庫，說白了就是 <code>js</code> 檔，裡面有一大堆的方法</li>
<li>使用 <code>jquery</code> 的步驟：  1. 引入 <code>jquery</code> 文件 2. 入口函數 功能實現</li>
<li>版本：1.x 2.x 3.x   1.x   壓縮版和未壓縮版</li>
<li>入口函數：  <code>$(document).ready(function)</code>，  <code>$(function(){})</code></li>
<li><code>jQuery</code> 物件與 <code>DOM</code> 物件<br>區別：方法不能混用<br>聯繫： <code>DOM --&gt; jq</code>   花錢，  jq–&gt; dom  [0]， get(0)</li>
</ol>
</li>
<li><p><code>$</code> 的實質：<code>function</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ <span class="token operator">===</span> jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>選擇器</p>
<ol>
<li><p>基本選擇器:  標籤、類別、id選擇器、交集、並集。</p>
</li>
<li><p>層級選擇器： 子代、後代  </p>
</li>
<li><p>過濾選擇器：<br>:odd:奇數  even:偶數  :eq：指定下標<br>:first  :last  :gt  :lt</p>
</li>
<li><p>篩選選擇器<br>children(): 找兒子<br>find():     找後代(兒子、孫子)<br>parent():   找爹<br>siblings(): 找兄弟，不包括自己<br>next:       下一個兄弟<br>prev:       上一次兄弟<br>eq:         指定下標</p>
</li>
</ol>
</li>
<li><p><code>index()</code>：返回的當前元素在所有兄弟裡面的索引。</p>
</li>
</ul>
<hr>
<h2 id="2-jQuery-操作-樣式、屬性、動畫、節點"><a href="#2-jQuery-操作-樣式、屬性、動畫、節點" class="headerlink" title="2. jQuery 操作(樣式、屬性、動畫、節點)"></a>2. <code>jQuery</code> 操作(樣式、屬性、動畫、節點)</h2><h3 id="2-1-jQuery-的操作樣式"><a href="#2-1-jQuery-的操作樣式" class="headerlink" title="2.1 jQuery 的操作樣式"></a>2.1 <code>jQuery</code> 的操作樣式</h3><h4 id="2-1-1-css-操作"><a href="#2-1-1-css-操作" class="headerlink" title="2.1.1 css 操作"></a>2.1.1 <code>css</code> 操作</h4><p>   功能: 設置或者修改樣式，操作的是 <code>style</code> 屬性</p>
<ul>
<li><p>操作單個樣式</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//name: 需要設置樣式名稱</span>
<span class="token comment">//value: 對應的樣式值</span>
<span class="token function">css</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//案例</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#one'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span> <span class="token string">"gray"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//背景樣式修改為灰色</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>設置多個樣式</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//參數是一個對象，對象中包含了需要設置的樣式名稱和樣式值</span>
<span class="token function">css</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//案例</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#one'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string">"background"</span><span class="token punctuation">,</span> <span class="token string">"gray"</span><span class="token punctuation">,</span>
  <span class="token string">"width"</span><span class="token punctuation">,</span><span class="token string">"400px"</span><span class="token punctuation">,</span>
  <span class="token string">"height"</span><span class="token punctuation">,</span> <span class="token string">"200px"</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>獲取樣式</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//name: 需要獲取樣式的名稱</span>
<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">css(name)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token comment">//案例</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意: 獲取樣式操作只會返回第一個元素對應的樣式值。</p>
</blockquote>
</li>
<li><p>隱式迭代:</p>
<ol>
<li>設置操作的時候，如果是多個元素，那麼給所有的元素設置相同的值。</li>
<li>獲取操作的時候，如果是多個元素，那麼只會返回第一個元素的值。</li>
</ol>
</li>
</ul>
<h4 id="2-1-2-class-操作"><a href="#2-1-2-class-操作" class="headerlink" title="2.1.2. class 操作"></a>2.1.2. <code>class</code> 操作</h4><p>   改樣式可用 <code>css();</code> 或 <code>class()</code> 來修改，但 <code>class()</code> 適用於有多個樣式時用(直接定義一個類別)。</p>
<ul>
<li><p><code>案例: 2.1.2 class 操作.html</code></p>
</li>
<li><p>添加樣式類別</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//name:需要填加的樣式類名，注意參數不要帶點 .</span>
<span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//案例，給所有的div 添加 one 的樣式</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>移除樣式類別</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//name:需要移除的樣式類別名稱</span>
<span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//案例，移除 div 中 one 的樣式類別名稱</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>判斷是否有某個樣式類別</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//name:用於判斷的樣式類別名稱，返回值為 true false</span>
<span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//案例，判斷第一個 div 是否有 one 的樣式類別</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>切換樣式類別</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//name:需要切換的樣式類別，如果有，移除該樣式，如果沒有，添加該樣式</span>
<span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//案例，判斷第一個 div 是否有 one 的樣式類別</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>【案例: tab 檔切換案例】  </p>
</li>
</ul>
<h3 id="2-2-jQuery-操作屬性"><a href="#2-2-jQuery-操作屬性" class="headerlink" title="2.2. jQuery 操作屬性"></a>2.2. jQuery 操作屬性</h3><h4 id="2-2-1-attr-操作"><a href="#2-2-1-attr-操作" class="headerlink" title="2.2.1. attr 操作"></a>2.2.1. attr 操作</h4><ul>
<li><p>設置單個屬性</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//第一個參數: 需要設置的屬性名稱</span>
<span class="token comment">//第二個參數: 對應的屬性值</span>
<span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"屬姓名稱"</span><span class="token punctuation">,</span> <span class="token string">"屬性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//案例</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"alt"</span><span class="token punctuation">,</span>   <span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>設置多個屬性</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//參數是一個對象，包含了需要設置的屬性名稱和屬性值。</span>
<span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"屬姓名"</span><span class="token punctuation">,</span> <span class="token string">"屬性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//案例</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string">"alt"</span><span class="token operator">:</span> <span class="token string">"World"</span><span class="token punctuation">,</span>
  <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span>
  <span class="token string">"style"</span><span class="token operator">:</span> <span class="token string">"opacity: .5"</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>獲取屬性</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">傳需要獲取的屬性名稱，返回對應的屬性值。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>【案例: 美女相冊案例】</p>
</li>
</ul>
<h4 id="2-2-2-prop-操作"><a href="#2-2-2-prop-操作" class="headerlink" title="2.2.2. prop 操作"></a>2.2.2. prop 操作</h4><ul>
<li>【案例: 表格全選案例】</li>
</ul>
<h3 id="2-3-jQuery-動畫"><a href="#2-3-jQuery-動畫" class="headerlink" title="2.3 jQuery 動畫"></a>2.3 jQuery 動畫</h3><p><code>jQuery</code> 提供了三組動畫，這些動畫都是標準的、有規律的效果，jQuyery 孩提供了自定義動畫的功能。</p>
<ul>
<li>【案例: 演示 jQuery 動畫】</li>
</ul>
<h4 id="2-3-1-三組基本動畫"><a href="#2-3-1-三組基本動畫" class="headerlink" title="2.3.1 三組基本動畫"></a>2.3.1 三組基本動畫</h4><h5 id="2-3-1-1-顯示-show-與隱藏-hide-是一組動畫"><a href="#2-3-1-1-顯示-show-與隱藏-hide-是一組動畫" class="headerlink" title="2.3.1.1 顯示(show)與隱藏(hide)是一組動畫"></a>2.3.1.1 顯示(show)與隱藏(hide)是一組動畫</h5><h5 id="2-3-1-2-滑入-slideUp-與滑出-slideDown-，效果與捲窗門類似"><a href="#2-3-1-2-滑入-slideUp-與滑出-slideDown-，效果與捲窗門類似" class="headerlink" title="2.3.1.2 滑入(slideUp)與滑出(slideDown)，效果與捲窗門類似"></a>2.3.1.2 滑入(slideUp)與滑出(slideDown)，效果與捲窗門類似</h5><h5 id="2-3-1-3-淡入-fadeIn-與淡出-fadeOut-與切換-slideToggle"><a href="#2-3-1-3-淡入-fadeIn-與淡出-fadeOut-與切換-slideToggle" class="headerlink" title="2.3.1.3 淡入(fadeIn)與淡出(fadeOut)與切換 (slideToggle)"></a>2.3.1.3 淡入(fadeIn)與淡出(fadeOut)與切換 (slideToggle)</h5><ul>
<li><p>語法</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//speed(可選):動畫的執行時間</span>
<span class="token comment">// 1. 如果不傳，就沒有動畫效果。如果是 slide 和 fade 系列，預設是 normal。</span>
<span class="token comment">// 2. 毫秒值(比如 1000), 動畫在 1000 毫秒執行完成(建議)</span>
<span class="token comment">// 3. 固定字串，slow(600)，normal(400)，fast(200), 如果傳其他字串，則預設為 normal</span>
<span class="token comment">// callback(可選): 執行完成動畫後執行的回調函數。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>【案例:下拉菜單動畫版】</strong><br><strong>【案例:幻燈片案例】</strong></p>
</li>
</ul>
<h4 id="2-3-2-自定義動畫"><a href="#2-3-2-自定義動畫" class="headerlink" title="2.3.2 自定義動畫"></a>2.3.2 自定義動畫</h4><ul>
<li><p><code>animate</code> 自定義動畫</p>
</li>
<li><p>語法</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>params<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {params}: 要執行動畫的  CSS 屬性，帶數字(必填)</span>
<span class="token comment">// speed: 執行動畫時長(可選)</span>
<span class="token comment">// easing: 執行效果，預設為swing(緩動) 可以是 linear(均速)</span>
<span class="token comment">// callback: 動畫執行完後立即執行回調函數(可選)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="2-3-3-動畫佇列與停止動畫"><a href="#2-3-3-動畫佇列與停止動畫" class="headerlink" title="2.3.3 動畫佇列與停止動畫"></a>2.3.3 動畫佇列與停止動畫</h4><ul>
<li><strong>【案例:手風琴特效】</strong></li>
</ul>
<h5 id="2-3-3-1-動畫佇列"><a href="#2-3-3-1-動畫佇列" class="headerlink" title="2.3.3.1 動畫佇列"></a>2.3.3.1 動畫佇列</h5><h5 id="2-3-3-2-stop-使用"><a href="#2-3-3-2-stop-使用" class="headerlink" title="2.3.3.2 stop() 使用"></a>2.3.3.2 stop() 使用</h5><ul>
<li><p>在同一個元素上執行多個動畫，那麼對於這個動畫來說，後面的動畫會被放到動畫佇列中，等前面的動畫執行完成了才會執行。</p>
</li>
<li><p>語法</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//stop 方法: 停止當前正在執行動畫</span>
<span class="token function">stop</span><span class="token punctuation">(</span>clearQueue<span class="token punctuation">,</span>  jumpToEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//第一個參數: 是否清除佇列</span>
<span class="token comment">//第二個參數: 是否跳轉到最終效果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h5 id="2-3-3-3-停止動畫"><a href="#2-3-3-3-停止動畫" class="headerlink" title="2.3.3.3 停止動畫"></a>2.3.3.3 停止動畫</h5><ul>
<li><strong>【案例:音樂導航】</strong></li>
</ul>
<h3 id="2-4-jQuery-節點操作"><a href="#2-4-jQuery-節點操作" class="headerlink" title="2.4 jQuery 節點操作"></a>2.4 jQuery 節點操作</h3><h4 id="2-4-0-動態創建節點"><a href="#2-4-0-動態創建節點" class="headerlink" title="2.4.0 動態創建節點"></a>2.4.0 動態創建節點</h4><h4 id="2-4-1-jquery-創建與添加節點"><a href="#2-4-1-jquery-創建與添加節點" class="headerlink" title="2.4.1 jquery 創建與添加節點"></a>2.4.1 <code>jquery</code> 創建與添加節點</h4><ul>
<li><p>創建節點</p>
</li>
<li><p>說明</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//$(htmlstr)</span>
<span class="token comment">//htmlstr: html 格式的字符串</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span&gt;這是一個span元素&lt;/span&gt;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>添加節點</p>
</li>
<li><p>說明</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//append appendTo</span>
<span class="token comment">//append prepentto</span>
<span class="token comment">//before</span>
<span class="token comment">//after</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>【城市選擇案例】</strong></p>
</li>
</ul>
<h4 id="2-4-2-清空節點與刪除節點"><a href="#2-4-2-清空節點與刪除節點" class="headerlink" title="2.4.2 清空節點與刪除節點"></a>2.4.2 清空節點與刪除節點</h4><ul>
<li><p>說明</p>
<p>empty: 清空指定節點的所有元素，自身保留(清理門戶)。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 清空 div 的所有內容(建議使用，會清除子元素上綁定的內容)</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 html 方法來清除元素，不建議使用，會造成記憶體 leak,綁定的事件不會被清除。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>remove: 相對於 empty, 自身也刪除(自殺)</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h4 id="2-4-3-克隆節點"><a href="#2-4-3-克隆節點" class="headerlink" title="2.4.3 克隆節點"></a>2.4.3 克隆節點</h4><ul>
<li><p>作用: 複製匹配的元素</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//複製$(selector)所匹配到的元素(深度複製)</span>
<span class="token comment">//cloneNode(true)</span>
<span class="token comment">//返回值為複製的新元素，和原來的元素沒有任何關係了。即修改新元素，不會影響到原來的元素。</span>
<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>【微博發佈案例】</strong><br><strong>【彈幕效果案例】</strong></p>
</li>
</ul>
<hr>
<h2 id="3-jQuery-特殊屬性操作、jQuery-事件機制、jQuery-補充知識點"><a href="#3-jQuery-特殊屬性操作、jQuery-事件機制、jQuery-補充知識點" class="headerlink" title="3. jQuery 特殊屬性操作、jQuery 事件機制、jQuery 補充知識點"></a>3. <code>jQuery</code> 特殊屬性操作、<code>jQuery</code> 事件機制、<code>jQuery</code> 補充知識點</h2><h3 id="3-1-jQuery-特殊屬性操作"><a href="#3-1-jQuery-特殊屬性操作" class="headerlink" title="3.1 jQuery 特殊屬性操作"></a>3.1 <code>jQuery</code> 特殊屬性操作</h3><h4 id="3-1-1-複習"><a href="#3-1-1-複習" class="headerlink" title="3.1.1 複習"></a>3.1.1 複習</h4><h4 id="3-1-2-val-方法"><a href="#3-1-2-val-方法" class="headerlink" title="3.1.2 val 方法"></a>3.1.2 <code>val</code> 方法</h4><ul>
<li><p><code>val</code> 方法用於設置和獲取表單元素的值，例如 <code>input</code>、<code>textarea</code> 的值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//設置值</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"張三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//獲取值</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>【示範案例：京東搜索】</p>
</li>
</ul>
<h4 id="3-1-3-html-方法與-text-方法"><a href="#3-1-3-html-方法與-text-方法" class="headerlink" title="3.1.3 html 方法與 text 方法"></a>3.1.3 <code>html</code> 方法與 <code>text</code> 方法</h4><ul>
<li><p><code>html</code> 方法相當於 <code>innerHTML</code>，  <code>text</code> 方法相當於 <code>innerText</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//設置內容</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div”).html("</span><span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>這是一段內容<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//獲取內容</span>
<span class="token function">$</span><span class="token punctuation">(</span>"div”<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//設置內容</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div”).text("</span><span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>這是一段內容<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//獲取內容</span>
<span class="token function">$</span><span class="token punctuation">(</span>"div”<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>區別：<code>html</code> 方法會識別 <code>html</code> 標籤，<code>text</code> 方法會那內容直接當成字串，並不會識別 <code>html</code> 標籤。</p>
</blockquote>
</li>
</ul>
<h4 id="3-1-4-width-方法與-height-方法"><a href="#3-1-4-width-方法與-height-方法" class="headerlink" title="3.1.4 width 方法與 height 方法"></a>3.1.4 <code>width</code> 方法與 <code>height</code> 方法</h4><ul>
<li><p>設置或者獲取高度</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//帶參數表示設置高度</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//不帶參數獲取高度</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>獲取網頁的可視區寬高</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//獲取可視區寬度</span>
<span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//獲取可視區高度</span>
<span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="3-1-5-scrollTop-與-scollLeft-方法"><a href="#3-1-5-scrollTop-與-scollLeft-方法" class="headerlink" title="3.1.5 scrollTop 與 scollLeft 方法"></a>3.1.5 <code>scrollTop</code> 與 <code>scollLeft</code> 方法</h4><ul>
<li><p>設置或者獲取垂直捲動條的位置</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//獲取頁面被捲曲的高度</span>
<span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//獲取頁面被捲曲的寬度</span>
<span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>【案例：3.1.8 仿騰訊固定功能表列案例】<br>【案例：3.1.7 小火箭返航案例】</p>
</li>
</ul>
<h4 id="3-1-6-offset-方法與-position"><a href="#3-1-6-offset-方法與-position" class="headerlink" title="3.1.6 offset 方法與 position"></a>3.1.6 <code>offset</code> 方法與 <code>position</code></h4><ul>
<li><p><code>offset</code> 方法獲取元素距離 <code>document</code> 的位置，<code>position</code> 方法獲取的是元素距離有定位的父元素的位置。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//獲取元素距離document的位置,返回值為物件：{left:100, top:100}</span>
<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//獲取相對於其最近的有定位的父元素的位置。</span>
<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/offset_position.jpg" width="80%" height="40%" class="nofancybox img-center">

</li>
</ul>
<h4 id="3-1-7-小火箭返回頂部案例"><a href="#3-1-7-小火箭返回頂部案例" class="headerlink" title="3.1.7 小火箭返回頂部案例"></a>3.1.7 小火箭返回頂部案例</h4><h4 id="3-1-8-固定導航案例"><a href="#3-1-8-固定導航案例" class="headerlink" title="3.1.8 固定導航案例"></a>3.1.8 固定導航案例</h4><h3 id="3-2-jQuery-事件機制"><a href="#3-2-jQuery-事件機制" class="headerlink" title="3.2 jQuery 事件機制"></a>3.2 <code>jQuery</code> 事件機制</h3><p>  <code>JavaScript</code> 中已經學習過了事件，但是 <code>jQuery</code> 對 <code>JavaScript</code> 事件進行了封裝，增加並擴展了事件處理機制。<code>jQuery</code> 不僅提供了更加優雅的事件處理語法，而且極大的增強了事件的處理能力。</p>
<h4 id="3-2-1-jquery-事件機制的發展歷程"><a href="#3-2-1-jquery-事件機制的發展歷程" class="headerlink" title="3.2.1 jquery 事件機制的發展歷程"></a>3.2.1 <code>jquery</code> 事件機制的發展歷程</h4><ul>
<li><p>歷程　簡單事件綁定 -&gt; <code>bind</code> 事件綁定  -&gt;  <code>delegate</code> 事件綁定 -&gt; <code>on</code> 事件綁定(推薦)</p>
</li>
<li><p><code>簡單事件</code>註冊</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">　click</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>        按一下事件
<span class="token function">　mouseenter</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>   滑鼠進入事件
<span class="token function">　mouseleave</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>   滑鼠離開事件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>　缺點：不能同時註冊多個事件</p>
<ul>
<li><p><code>bind</code> 方式註冊事件</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//第一個參數：事件類型</span>
<span class="token comment">//第二個參數：事件處理常式</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"click mouseenter"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//事件回應方法</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>缺點：不支援動態事件綁定</p>
</li>
<li><p><code>delegate</code> 註冊委託事件</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一個參數：selector，要綁定事件的元素</span>
<span class="token comment">// 第二個參數：事件類型</span>
<span class="token comment">// 第三個參數：事件處理函數</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".parentBox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//為 .parentBox下面的所有的p標籤綁定事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>缺點：只能註冊委託事件，因此註冊時間需要記得方法太多了</p>
</li>
</ul>
<h4 id="3-2-2-on-註冊事件的兩種方式"><a href="#3-2-2-on-註冊事件的兩種方式" class="headerlink" title="3.2.2 on 註冊事件的兩種方式"></a>3.2.2 <code>on</code> 註冊事件的兩種方式</h4><p>  可以執行簡單自己註冊事件與委託代理事件。</p>
<ul>
<li><p><code>on</code> 註冊事件(重點)</p>
<blockquote>
<p><code>jQuery1.7</code> 之後，<code>jQuery</code> 用 <code>on</code> 統一了所有事件的處理方法。<br>最現代的方式，相容 <code>zepto</code>(移動端類似 <code>jQuery</code> 的一個庫)，強烈建議使用。</p>
</blockquote>
<ul>
<li><p>`on 註冊簡單事件</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 表示給 $(selector) 綁定事件，並且由自己觸發，不支持動態繫結。</span>
<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><code>on</code> 註冊委託事件</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 表示給 $(selector) 綁定代理事件，當必須是它的內部元素 `span` 才能觸發這個事件，支持動態繫結</span>
<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><code>on</code> 註冊事件的語法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">第一個參數：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">events</span><span class="token template-punctuation string">`</span></span>，綁定事件的名稱可以是由空格分隔的多個事件（標準事件或者自訂事件）
第二個參數：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">selector</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> 執行事件的後代元素（可選），如果沒有後代元素，那麼事件將有自己執行。
第三個參數：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data</span><span class="token template-punctuation string">`</span></span>，傳遞給處理函數的資料，事件觸發的時候通過 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">event.data</span><span class="token template-punctuation string">`</span></span> 來使用（不常使用）
第四個參數：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">handler</span><span class="token template-punctuation string">`</span></span>，事件處理函數。

<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span><span class="token punctuation">,</span>selector<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
</li>
</ul>
<h4 id="3-2-3-事件的執行順序"><a href="#3-2-3-事件的執行順序" class="headerlink" title="3.2.3 事件的執行順序"></a>3.2.3 事件的執行順序</h4><h4 id="3-2-4-表格刪除功能"><a href="#3-2-4-表格刪除功能" class="headerlink" title="3.2.4 表格刪除功能"></a>3.2.4 表格刪除功能</h4><h4 id="3-2-5-移除事件綁定"><a href="#3-2-5-移除事件綁定" class="headerlink" title="3.2.5 移除事件綁定"></a>3.2.5 移除事件綁定</h4><ul>
<li><p>unbind方式（不用）</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//解綁所有的事件</span>
<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//解綁指定的事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>undelegate方式（不用）</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//解綁所有的 delegate 事件</span>
<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解綁所有的 click 事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>off方式（推薦）</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//解綁匹配元素的所有事件</span>
<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//解綁匹配元素的所有click事件</span>
<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="3-2-6-事件對象"><a href="#3-2-6-事件對象" class="headerlink" title="3.2.6 事件對象"></a>3.2.6 事件對象</h4><ul>
<li><p><code>jQuery</code> 事件物件其實就是js事件物件的一個封裝，處理了相容性。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//screenX和screenY        對應螢幕最左上角的值</span>
<span class="token comment">//clientX和clientY        距離頁面左上角的位置（忽視捲軸）</span>
<span class="token comment">//pageX和pageY            距離頁面最頂部的左上角的位置（會計算捲軸的距離）</span>

<span class="token comment">//event.keyCode           按下的鍵盤代碼</span>
<span class="token comment">//event.data              存儲綁定事件時傳遞的附加資料</span>

<span class="token comment">//event.stopPropagation() 阻止事件冒泡行為</span>
<span class="token comment">//event.preventDefault()  阻止流覽器默認行為</span>
<span class="token comment">//return false:           既能阻止事件冒泡，又能阻止流覽器預設行為。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="3-2-7-阻止冒泡和阻止瀏覽器的預設行為"><a href="#3-2-7-阻止冒泡和阻止瀏覽器的預設行為" class="headerlink" title="3.2.7 阻止冒泡和阻止瀏覽器的預設行為"></a>3.2.7 阻止冒泡和阻止瀏覽器的預設行為</h4><h4 id="3-2-8-delay-的用法"><a href="#3-2-8-delay-的用法" class="headerlink" title="3.2.8 delay 的用法"></a>3.2.8 <code>delay</code> 的用法</h4><h3 id="3-3-jQuery-補充知識點"><a href="#3-3-jQuery-補充知識點" class="headerlink" title="3.3 jQuery 補充知識點"></a>3.3 <code>jQuery</code> 補充知識點</h3><h4 id="3-3-1-鏈式編程"><a href="#3-3-1-鏈式編程" class="headerlink" title="3.3.1 鏈式編程"></a>3.3.1 鏈式編程</h4><ul>
<li><p>通常情況下，只有設置操作才能把鏈式程式設計延續下去。因為獲取操作的時候，會返回獲取到的相應的值，無法返回 <code>jQuery</code> 物件。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 篩選選擇器會改變 jQuery 物件的DOM物件，想要回復到上一次的狀態，並且返回匹配元素之前的狀態。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>【案例：五角星評分案例】</p>
</li>
</ul>
<h4 id="3-3-2-五星評分案例"><a href="#3-3-2-五星評分案例" class="headerlink" title="3.3.2 五星評分案例"></a>3.3.2 五星評分案例</h4><h4 id="3-3-3-each-方法"><a href="#3-3-3-each-方法" class="headerlink" title="3.3.3 each 方法"></a>3.3.3 <code>each</code> 方法</h4><ul>
<li><p><code>jQuery</code> 的隱式反覆運算會對所有的 <code>DOM</code> 物件設置相同的值，但是如果我們需要給每一個物件設置不同的值的時候，就需要自己進行反覆運算了。</p>
<p>作用：遍歷 <code>jQuery</code> 物件集合，為每個匹配的元素執行一個函數</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 參數一表示當前元素在所有匹配元素中的索引號</span>
<span class="token comment">// 參數二表示當前元素（DOM物件）</span>
<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span>element</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>【案例：不同的透明度】</p>
</li>
</ul>
<h4 id="3-3-4-衝突"><a href="#3-3-4-衝突" class="headerlink" title="3.3.4 $ 衝突"></a>3.3.4 <code>$</code> 衝突</h4><ul>
<li><p><code>jQuery</code> 使用 <code>$</code> 作為標示符，但是如果與其他框架中的$衝突時，<code>jQuery</code> 可以釋放 <code>$</code> 符的控制權.</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> c <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">noConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//釋放$的控制權,並且把$的能力給了c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h4 id="3-3-5-複習"><a href="#3-3-5-複習" class="headerlink" title="3.3.5 複習"></a>3.3.5 複習</h4><hr>
<h2 id="jquery-插件"><a href="#jquery-插件" class="headerlink" title="jquery 插件"></a><code>jquery 插件</code></h2><ul>
<li><p>常用插件</p>
<p>插件：<code>jquery</code> 不可能包含所有的功能，我们可以通过插件扩展 <code>jquery</code> 的功能。<br><code>jQuery</code> 有着丰富的插件，使用这些插件能给 <code>jQuery</code> 提供一些额外的功能。</p>
</li>
</ul>
<h3 id="4-1-jquery-color-js-的使用"><a href="#4-1-jquery-color-js-的使用" class="headerlink" title="4.1 jquery.color.js 的使用"></a>4.1 <code>jquery.color.js</code> 的使用</h3><ul>
<li><p>animate不支持颜色的渐变，但是使用了jquery.color.js后，就可以支持颜色的渐变了。</p>
<p>使用插件的步骤</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> 引入jQuery文件
<span class="token number">2.</span> 引入插件（如果有用到css的话，需要引入css）
<span class="token number">3.</span> 使用插件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="4-2-jquery-lazyload-js-的使用"><a href="#4-2-jquery-lazyload-js-的使用" class="headerlink" title="4.2 jquery.lazyload.js 的使用"></a>4.2 <code>jquery.lazyload.js</code> 的使用</h3><ul>
<li>懒加载插件</li>
</ul>
<h3 id="4-3-jqueryui-實現新聞模塊"><a href="#4-3-jqueryui-實現新聞模塊" class="headerlink" title="4.3 jqueryui 實現新聞模塊"></a>4.3 <code>jqueryui</code> 實現新聞模塊</h3><ul>
<li><p><code>jQueryUI</code> 專指由 <code>jQuery</code> 官方維護的UI方向的插件。</p>
</li>
<li><p>官方 API：<a href="http://api.jqueryui.com/category/all/">http://api.jqueryui.com/category/all/</a></p>
</li>
<li><p>其他教程：<a href="http://www.runoob.com/jqueryui/jqueryui-tutorial.html">jQueryUI教程</a></p>
</li>
<li><p>基本使用:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> 引入 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jQueryUI</span><span class="token template-punctuation string">`</span></span> 的樣式檔
<span class="token number">2.</span> 引入 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jQuery</span><span class="token template-punctuation string">`</span></span>
<span class="token number">3.</span> 引入 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jQueryUI</span><span class="token template-punctuation string">`</span></span> 的 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">js</span><span class="token template-punctuation string">`</span></span> 文件
<span class="token number">4.</span> 使用 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jQueryUI</span><span class="token template-punctuation string">`</span></span> 功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 <code>jquery.ui.js</code> 實現新聞模組的案例</p>
</li>
</ul>
<h3 id="4-4-原型初體驗"><a href="#4-4-原型初體驗" class="headerlink" title="4.4 原型初體驗"></a>4.4 原型初體驗</h3><h3 id="4-5-簡易版本的-jquery-插件"><a href="#4-5-簡易版本的-jquery-插件" class="headerlink" title="4.5 簡易版本的 jquery 插件"></a>4.5 簡易版本的 <code>jquery</code> 插件</h3><ul>
<li><p>原理：<code>jquery</code> 外掛程式其實說白了就是給 <code>jquery</code> 物件增加一個新的方法，讓 <code>jquery</code> 物件擁有某一個功能。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//通過給 `$.fn` 添加方法就能夠擴展 `jquery` 物件</span>
$<span class="token punctuation">.</span>fn<span class="token punctuation">.</span> <span class="token function-variable function">pluginName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="4-6-手風琴"><a href="#4-6-手風琴" class="headerlink" title="4.6 手風琴"></a>4.6 手風琴</h3><h3 id="4-7-手風琴測試"><a href="#4-7-手風琴測試" class="headerlink" title="4.7 手風琴測試"></a>4.7 手風琴測試</h3><hr>
<h2 id="javascript-與-jquery-的差異整理"><a href="#javascript-與-jquery-的差異整理" class="headerlink" title="javascript 與  jquery 的差異整理"></a><code>javascript</code> 與  <code>jquery</code> 的差異整理</h2><table>
<thead>
<tr>
<th>功能</th>
<th>javascript</th>
<th>案例</th>
<th>jQuery</th>
<th>案例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>樣式操作</td>
<td>style.樣式 = “樣式值”;</td>
<td>style.backgroundColor=”red”;</td>
<td>css(“樣式名”,”樣式值”);</td>
<td>css(“backgroundColor”, “red”)</td>
<td>設置單個樣式</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>css(obj)</td>
<td>css({“backgroundColor”:”red”,”fontSize”:”15px”})</td>
<td>設置多個樣式</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>css(“樣式名”)</td>
<td>css({“backgroundColor”:”red”,”fontSize”:”15px”})</td>
<td>獲取樣式</td>
</tr>
<tr>
<td></td>
<td>className&nbsp;=&nbsp;“樣式類別名稱”</td>
<td>className =”aa bb cc dd”;</td>
<td>addClass(“樣式名”);</td>
<td>addClass(“aa bb cc dd”);</td>
<td>添加類</td>
</tr>
<tr>
<td></td>
<td></td>
<td>removeClass(“樣式類名”);</td>
<td>removeClass(“樣式名”);</td>
<td>removeClass(“one”);</td>
<td>移除類</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>hasClass(“樣式名”)</td>
<td></td>
<td>判斷類</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>toggleClass(“樣式名”)</td>
<td></td>
<td>切換類</td>
</tr>
<tr>
<td>屬性操作</td>
<td>SetAttibute(“屬性名”,”值”);</td>
<td></td>
<td>attr(“屬性名”,”值”)</td>
<td>attr({“屬性名1”,”值1”,”屬性名2”,”值2” });</td>
<td>用法與css一樣</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>prop()</td>
<td></td>
<td>操作布林類型的屬性，disabled checked selected</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>removeAttr()</td>
<td>removeAttr:</td>
<td>移除屬性</td>
</tr>
<tr>
<td>動畫</td>
<td></td>
<td></td>
<td>show/hide</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>slideDown/slideUp/slideToggle</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>fadeIn/fadeOut/fadeToggle</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>animate(prop, [speed], [swing/linear], [callback])</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>stop()</td>
<td></td>
<td></td>
</tr>
<tr>
<td>節點操作</td>
<td></td>
<td></td>
<td>$()</td>
<td></td>
<td>創建節點</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>append</td>
<td></td>
<td>添加節點</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>appendTo</td>
<td></td>
<td>添加節點</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>prepend</td>
<td></td>
<td>添加節點</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>prependTo</td>
<td></td>
<td>添加節點</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>before</td>
<td></td>
<td>添加節點</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>after</td>
<td></td>
<td>添加節點</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>remove</td>
<td></td>
<td>刪除節點</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>empty</td>
<td></td>
<td>清空節點</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>clone()</td>
<td></td>
<td>克隆節點</td>
</tr>
<tr>
<td></td>
<td>innerText</td>
<td>innerText = “Hello”;</td>
<td>text(“Hello”);</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>innerHtml</td>
<td>innerHtml = “&lt;b&gt;Hello&lt;/b&gt;”;</td>
<td>html(‘<b>Hello</b>‘);</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>jquery</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql pdo 物件</title>
    <url>/php-mysql/20200930-mysql-pdo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-singleton"><a href="#1-singleton" class="headerlink" title="1. singleton"></a>1. singleton</h2><p>  <code>singleton</code> 中文名稱為 <code>單例模式</code>，是一種<strong>建構類別</strong>的設計模式(一套編寫類別的規範、技巧，將它作成公版來給大家使用；設計模式有許多種，例如:工廠模式、簡單工廠模式、抽象工廠模式、複雜模式、單例模式、高抽象模式..等)。其目的是為了在全域獲取這個類別的物件時<font color="red">總是能獲取到唯一的物件</font>，而不是每次創建實體時都創建出新的物件的一種類別結構。特別的在 <code>DB</code> 操作中，<code>DB</code> 連接這種物件就必須是通過 <code>單例模式</code> 來實現的。</p>
<ul>
<li><p>說明</p>
<p>介紹在 <code>JavaScript</code> 中寫一個類別的方法: 透過原型方式(Prototype)。</p>
<p><code>01單例模式.html</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token comment">//定義一個類別 Peo 具有特徵(姓名、年紀)</span>
  <span class="token keyword">function</span> <span class="token function">Peo</span><span class="token punctuation">(</span><span class="token parameter">pname<span class="token punctuation">,</span> page</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>perName <span class="token operator">=</span> pname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>peoAge <span class="token operator">=</span> page<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//實例化，每一次對同類別實例化，都會產生新的物件，如下</span>
  <span class="token keyword">var</span> allen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">(</span><span class="token string">'allen'</span><span class="token punctuation">,</span> <span class="token string">'28'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> amy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">(</span><span class="token string">'amy'</span><span class="token punctuation">,</span> <span class="token string">'23'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>類別的主要目的在建構物件，所以每次創建類別都會獲得一個實體，這是正常操作現象，但是為了達到在全局開發中，對一個類別，不管創建幾次都只會得到一個物件，所以有了這個類別的設計模式:單例模式。</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">DBConnectionSingleton</span><span class="token punctuation">{</span>
  <span class="token comment">//通過私有，靜態聲明單例物件</span>
  <span class="token comment">//私有方式: 保證只能在這個類別底下訪問</span>
  <span class="token comment">//靜態變數: 只在聲明時被執行一次，但是可再改變數值的。</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
  <span class="token comment">//function __construct(){}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getconn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">/* self 指該類別內部
       如果它的靜態屬性: $conn 是空的話 (null 的布林值為 0)
       ::調用類常數或靜態變數用
       第一次時存在 private static $conn = null;
       $conn = null 即 false(假)， !假 =&gt; true，所以執行 new self();
       第二次後就視 "private static $conn = null;" 不存在了。 (!self::$conn) =&gt; 結果 !true =&gt; false，所以不執行 new self();
       通過靜態執行一次的特點保證物件唯一性
    */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$conn</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 <span class="token comment">//外部調用第一次，static 聲明過的方法 getconn() 與 屬性 $conn, 不再被執行(視為不存在)，所以直接作判斷</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token comment">//即 $conn 是空的話，將靜態變數 $conn=null 改變值 = new self(), 返回 new self() 給 $conn1</span>
   <span class="token variable">$conn1</span> <span class="token operator">=</span> DBConnectionSingleton<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getconn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">//外部調用第二次，static 聲明過的方法 getconn() 與 屬性 $conn, 不再被執行(視為不存在)，所以直接作判斷</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token comment">// 此時 self::$conn 已被第一次作初始化了，所以 self::$conn 是 true，就不會再執行 "self::$conn = new self();", 返回第一次的 new self() 給 $conn2</span>
   <span class="token variable">$conn2</span> <span class="token operator">=</span> DBConnectionSingleton<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getconn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>練習: 設計一單例模式</p>
<p><code>單例模式.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/*
 self: self 在 php 的類別內部使用，表示當前類別本身
       比如在下面的類別中，self 等價於 richestMan
*/</span>

<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">richestMan</span>
<span class="token punctuation">{</span>
  <span class="token comment">//創建單例類別中的唯一單例，聲明一個私有靜態變數</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$richestPeople</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>

  <span class="token comment">//創建單例方法，用來在全局中獲取唯一單例對象</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">findRichestMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">//如果這人不存在就創建一個最富有的人</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$richestPeople</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$richestPeople</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$richestPeople</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">pname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'最富有的人'</span><span class="token punctuation">;</span>
      <span class="token keyword">echo</span> <span class="token double-quoted-string string">"========"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//如果存在，那麼就不用創建，而是直接把這個人返回就可以了</span>
    <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$richestPeople</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//公有屬性，當對象創建的時候，用來證明對象的身分</span>
  <span class="token keyword">public</span> <span class="token variable">$pname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$richMan1</span> <span class="token operator">=</span> richestMan<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">findRichestman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$richMan2</span> <span class="token operator">=</span> richestMan<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">findRichestman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$richMan1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$richMan2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>輸出</strong></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-pdo-1.png" class="nofancybox img-center">
</li>
<li><p>結論<br>為何需要單例模式:</p>
<ul>
<li>例一:購物車<br>網站中在任一頁面開啟時，購物車應該都只有一個，依過去類別的概念來作，打開一個頁面實例一個對象一個新的購物車對象，這時就須用單例的結構。</li>
<li>例二:地圖<br>全局中只希望一張地圖，否則一經修改又須一張地圖，將耗時耗力。</li>
</ul>
</li>
</ul>
<h2 id="2-PDO-與-DB"><a href="#2-PDO-與-DB" class="headerlink" title="2. PDO 與 DB"></a>2. PDO 與 DB</h2><ul>
<li><p>為何需使用 PDO</p>
<p><code>mysqli_xxx()</code> 一系列的方法，都是針對 <code>mysql</code> 資料庫的操作。</p>
</li>
<li><p>問題</p>
<p>公司成立剛開始人數約莫只有 5人，客戶幾百人，使用 <strong>mysql</strong> 就足夠應付，但公司發展到一規模階段後，比如員工人數有 5000人，用戶從幾千人變成千萬人時，這時 <code>mysql</code> 就不夠足以處理業務上的需求，資料庫需變大，這時如把 <code>mysql DB</code> 更換成容量更大，體積更大，處理能力更強的資料庫，比如升級成 <code>oracle</code>, 但問題是原先的程式都是透過 <code>mysql</code> 處理，所以一旦要變更資料庫，資料庫操作的指令也要改變，如果有多個 <code>php mysql</code> 程式頁面要轉換(例如: 轉成 <code>oracl</code>)，將造成一大維護成本問題產生，所以　<code>php</code> 提供了一訪問資料庫通用的方法。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-pdo-2.png" width="60%" height="40%" class="nofancybox img-center">

<blockquote>
<p>通過 <code>PHP</code> 操作 <code>PDO</code>, <code>PDO</code> 會將這些操作自動轉換成想要連接的資料庫操作的方法</p>
</blockquote>
</li>
<li><p>描述</p>
<ul>
<li><code>PDO</code> 即 <code>PHP</code> 資料物件&nbsp;(<code>PHP Data Object</code>)。</li>
<li><code>PDO</code> 可被視為是一個工具，而這個工具為 <code>PHP</code> 訪問資料庫定義了一個羽量級的一致介面。</li>
<li>實現 <code>PDO</code> 介面的每個資料庫驅動可以公開具體資料庫的特性作為標準擴展功能。</li>
</ul>
</li>
<li><p>語法<br>   <font color="red">$pdo = new PDO(“DB名稱:host=主機名稱;dbname=DB名”,”DB帳號”,”DB密碼”);</font></p>
</li>
<li><p>注意</p>
<ul>
<li>利用 <code>PDO</code> 擴展自身並不能實現任何資料庫功能，必須使用一個具體資料庫的 <code>PDO</code> 驅動來訪問資料庫服務。</li>
<li><font color="red">PDO提供了一個【資料訪問】抽象層，這意味著不管使用哪種資料庫，都可以用相同的函數(方法)來查詢和獲取資料。</font></li>
<li><code>PDO</code> 不提供資料庫抽象層，它不會重寫 <code>SQL</code>，也不會模擬缺失的特性。<br>如果需要的話，應該使用一個成熟的抽象層。</li>
<li>從 <code>PHP 5.1</code> 開始附帶了 <code>PDO</code>，在 <code>PHP 5.0</code> 中是作為一個PECL擴展使用。<br><code>PDO</code> 需要 <code>PHP 5</code> 核心的新特性，因此不能在較早版本的 <code>PHP</code> 上運行。</li>
</ul>
</li>
<li><p>總結<br>   <code>PDO</code> 就像是一把槍，而使用哪種資料庫就好比是選擇不同的子彈。<br>   不管子彈有怎樣的特性，擊發的方法總沒有偏差，都是開槍而已。</p>
<blockquote>
<p>補充：在連接DB的時候，並不是每一次的連接都能保證一定完成。因此我們必須設置一個”保險”來説明我們監測連接的情況，這個東西就是<br> <font color="red"> <code>try…catch</code> </font> 機制。</p>
</blockquote>
</li>
<li><p>範例</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">try</span><span class="token punctuation">{</span>
  <span class="token variable">$pdo</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=frankdb"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token double-quoted-string string">"錯誤"</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在整個 <code>try…catch</code> 結構中，<code>try</code> 部分是可能會出現異常的代碼。<br>而當代碼執行的過程當中一旦 <code>try</code> 部分的代碼真的發生了異常，那麼會立即將這個異常拋出，並執行 <code>catch</code> 部分的代碼。<br><code>catch</code> 部分的形參 <code>$e</code> 就是用來接收拋出的異常的。</p>
<p>可以這樣認為：上述結構是獲取 <code>PDO</code> 時的一個固定結構！</p>
<p><code>pdo對象與mysql數據庫連接.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token comment">/* php 的 PDO 連接資料庫
   $pdo = new PDO("mysql:host=localhost;dbname=class", $user, $password);
   print_r($pdo);
   建立若成功會返回一個空對象。PDO 是一個介面，是一個工具，所以裡面什麼都沒有
   pdo 對象是一個在頁面中不可見內容的對象，這個對象只能靠創建成功與失敗來判斷連接，而無法查看內部的屬性和屬性值。
   因為 PDO 物件唯一空值，即為 false, 所以無法用 if ($pdo) 來做判斷是否連線，所以PHP提供另一機制來判斷 
   try{}catch(PDOException $e){}
   輸出:
   PDO object_get(${1:$object, {
   }
*/</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
   <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=class"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//print_r($pdo);</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"錯誤"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="3-singleton-獲取-PDO"><a href="#3-singleton-獲取-PDO" class="headerlink" title="3. singleton 獲取 PDO"></a>3. singleton 獲取 PDO</h2><ul>
<li><p>目的: 透過單例模式來確保唯一的 <code>$PDO</code> 對象去操作資料庫。</p>
</li>
<li><p>說明:<br>操作資料庫時，後台的 <code>php</code> 頁面 與 <code>mysql DB</code> 是兩個獨立的東西，資料庫如同一表格，而 <code>php</code> 如同一文件，若要操作資料庫需要借助像是 <code>document</code> 類似的對象，這裡就是之前建立的 <code>$PDO</code> 對象。<br>所以要操作資料庫就得透過 <code>$PDO</code> 對象，但如果操作:</p>
<ul>
<li><p>PHP 要插入資料到資料庫時時，先找到一個 <code>$PDO</code> 對象。</p>
</li>
<li><p>PHP 要刪除資料到資料庫時時，再先找到一個 <code>$PDO</code> 對象。</p>
</li>
<li><p>:</p>
<p>假設此刻資料庫為空，若有兩個對象 <code>$PDO</code> 來操作:<br>case1: 一個 <code>$PDO</code> 先加 1, 另一個 <code>$PDO</code> 再-1, 不會有問題發生。<br>case2: 但順序若相反，先做 減, 但資料庫此刻並無數據(一開始為空)，所以操作會失敗。</p>
<p>意味著若使用兩個  <code>$PDO</code> 對象來操作，結果可能會不相同;因為沒辦法確認哪一個 <code>$PDO</code> 對象會先執行(程序是多執行緒性的)。<br>所以解決的唯一辦法，就是指定同一個 <code>$PDO</code> 對象來做操作。</p>
</li>
</ul>
</li>
<li><p>範例<br><code>03單例模式獲取pdo對像.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//通過單例模式，獲取唯一 $PDO:</span>
<span class="token keyword">class</span> <span class="token class-name">singletonPDO</span><span class="token punctuation">{</span>
  <span class="token comment">//創建私有 $靜態變數或常數</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
  <span class="token comment">//獲取單例對象的方法</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//當前類的靜態變數, 第一次調用若為空值時</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//創建一個 $pdo(該 $pdo 為靜態，所以透過 :: 呼叫)</span>
      <span class="token keyword">try</span><span class="token punctuation">{</span>
         self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=class"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">echo</span> <span class="token double-quoted-string string">"錯誤訊息為: "</span> <span class="token punctuation">.</span> <span class="token variable">$error</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//使用</span>
<span class="token variable">$pdo1</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每次使用 DB 要連上 DB 都要寫一次，太麻煩，所以將其寫成一獨立檔案，改成:</p>
<p><code>singletonPDO.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//通過單例模式，獲取唯一 $PDO:</span>
<span class="token keyword">class</span> <span class="token class-name">singletonPDO</span>
<span class="token punctuation">{</span>
  <span class="token comment">//創建私有 $靜態變數或常數</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
  <span class="token comment">//獲取單例對象的方法</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token comment">//當前類的靜態變數, 第一次調用若為空值時</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//創建一個 $pdo(該 $pdo 為靜態，所以透過 :: 呼叫)</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
              self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=class"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">echo</span> <span class="token double-quoted-string string">"錯誤訊息為: "</span> <span class="token punctuation">.</span> <span class="token variable">$error</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然後再來引用:</p>
<p><code>03單例模式獲取pdo對像.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">require_once</span> <span class="token single-quoted-string string">'singletonPDO.php'</span><span class="token punctuation">;</span>
<span class="token variable">$pdo1</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo2</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo3</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//測試，若連線成功會回傳一個 PDO空物件</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$pdo1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="4-PDO-實現-DB-增刪改查"><a href="#4-PDO-實現-DB-增刪改查" class="headerlink" title="4. PDO 實現 DB 增刪改查"></a>4. PDO 實現 DB 增刪改查</h2><p> 在上說明中說過，pdo是一種【資料訪問】層的抽象。<br> 因此本質上來講在面對同一種DB進行操作的時候，pdo的操作和php本身直接操作沒有區別。</p>
<ul>
<li><p>範例<br><code>04pdo實現mysql增刪改操作.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">require_once</span> <span class="token double-quoted-string string">"singletonPDO.php"</span><span class="token punctuation">;</span>
<span class="token comment">//通過單例方法獲取全域pdo單例對象</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getpdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//exec()方法是pdo物件的執行方法，相當於php中的query()方法.</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 新增
   $sql = "INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values('test','test','1qaz@wsx','男','2019-08-01','member','test@gmail.com','http://wda.edu.tw/test','098876543','台北市',1,'2008-10-21 12:06:08','2008-10-21 12:06:08')";
*/</span>

<span class="token comment">//刪除</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"DELETE FROM members WHERE m_username='test'"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//通過 pdo執行db操作</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"error"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試<br>開啟網頁，執行 <code>04pdo實現mysql增刪改操作.php</code>。</p>
</li>
<li><p>結果: success</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-pdo-1.png" class="nofancybox img-center">
</li>
<li><p>刪除功能<br>更換上述程式的 $sql 為:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"DELETE FROM members WHERE username='test'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>更新功能<br>更換上述程式的 $sql 為:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//修改</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"UPDATE members set `m_sex`= '女'"</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">" WHERE m_id = 11"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試: 開啟網頁，執行 <code>04pdo實現mysql增刪改操作.php</code>。</p>
</li>
<li><p>結果: success</p>
<p><strong><font color="red">查詢</font></strong> ，回傳不是布林值:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT * FROM members WHERE 1"</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//這裡得到的是一個物件</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// int(0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>輸出:<br>int(0)</p>
<blockquote>
<p>新增、刪除、修改執行上沒問題，但<strong>查詢</strong>的結果是一個不可見的值，而且這不可見的值，不知如何處理，這裡需借用 PDO 預處理 <code>prepare</code> 和交易處理 <code>transaction</code></p>
</blockquote>
</li>
</ul>
<h2 id="5-PDO-異常處理-Exception"><a href="#5-PDO-異常處理-Exception" class="headerlink" title="5. PDO 異常處理 Exception"></a>5. PDO 異常處理 Exception</h2><p>  <strong>Exception</strong> 指的都是在執行 db 操作的時候發生異常，例如SQL語句異常或語法錯誤。而如果是DB<br>連接發生的錯誤則不會走本異常處理，而是直接由pdo輸出連接失敗。</p>
<ul>
<li><p>異常分兩大類:</p>
<ul>
<li>連接PDO時產生的異常，用 try {} catch(){} 去描述</li>
<li>操作DB時產生的異常，用下面三方法來解決。</li>
</ul>
<p>異常處理Exception是指在<code>try…catch</code>時發生異常時的處理手段，通常異常處理都是直接拋出提醒即可。而設置提醒的手段有三種設置方式：</p>
</li>
<li><p>預設模式<br><font color="red">主要依賴於系統提供的errorCode和errorInfo屬性實現</font></p>
</li>
<li><p>警報模式：<br><font color="red">為pdo設置setAttribu(PDO::ATTR_ERRMODE,PDO::ERRMODE_WARNING);</font></p>
</li>
<li><p>中斷模式：<br><font color="red">為pdo設置setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);</font><br><font color="orange">小貼士：需要說明的是異常處理並不是三種模式必須有一種顯式的去表現出來，哪怕一種都不主動寫出也不會認為是違法。只不過主動實現異常處理能夠在異常發生的時候給予我們更好的提示，因此推薦如果允許的情況下盡可能的添加異常處理模組代碼。</font></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">try</span><span class="token punctuation">{</span>
  <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=class"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//$pdo -&gt; setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_WARNING);</span>
  <span class="token comment">//$pdo -&gt; setAttribut(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOExeption <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token variable">$e</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)"</span><span class="token punctuation">;</span>

<span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"succes"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token variable">$pdo</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">errorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$pdo</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">errorInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>範例:</p>
<p><code>05pdo異常捕獲.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token comment">// 第一類異常，數據庫連接異常</span>
<span class="token comment">// 這種異常直接通過try...catch捕獲</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'mysql:host=localhost;dbname=class'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'root'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 第二類異常，第二種處理方法</span>
  <span class="token comment">// 設置當數據庫操作發生異常的時候，彈出警報，但程序執行不會中斷</span>
  <span class="token comment">//$pdo -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);</span>

  <span class="token comment">// 第二類異常，第三種處理方法</span>
  <span class="token comment">// 設置當數據庫操作發生異常的時候，進行中斷</span>
  <span class="token comment">// $pdo -&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span>

<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token single-quoted-string string">'db 連接失敗，原因是：'</span> <span class="token punctuation">.</span> <span class="token variable">$err</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//連接成功的話</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"UPDATE members set `m_sex`= '男'"</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">" WHERE m_id = 11"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token single-quoted-string string">'操作成功'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 第二類異常，第一種處理方法(直接通過系統提供的errorCode()和errorInfo()屬性實現)</span>
  <span class="token keyword">echo</span> <span class="token single-quoted-string string">'操作失敗'</span><span class="token punctuation">;</span>
  <span class="token comment">// echo $pdo-&gt;errorCode();</span>
  <span class="token comment">// echo $pdo-&gt;errorInfo();</span>
<span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意: 即使 SQL 語句執行成功，但沒更新資料(例:無須改變)，仍會回傳 false。</p>
</blockquote>
</li>
</ul>
<h2 id="6-PDO-預處理-prepare"><a href="#6-PDO-預處理-prepare" class="headerlink" title="6. PDO 預處理 prepare"></a>6. PDO 預處理 prepare</h2><p>   預處理語句<code>prepare</code>是 <code>pdo</code> 提供的一中 <code>db</code> 操作方式。其語言邏輯與正常的 <code>pdo</code> 訪問相同。但區別在於 <code>prepare</code> 語句允許用戶在【設置sql語句】與【執行sql語句】之間部分進行參數的注入與提取操作，而不是像正常的pdo訪問一樣直接將參數寫死。</p>
<ul>
<li><p>正常 <code>pdo</code> 直接訪問程序<br>【設置 <code>sql</code> 語句】→【執行 <code>sql</code> 語句】</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SQL 語句"</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>預處理訪問程序<br>【設置 <code>sql</code> 語句】→ <font color="red">【執行 sql 語句】</font> →  <font color="red">【處理sql中參數】</font>  → 【執行sql語句】</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SQL 語句"</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>prepare</code> 是另一種像是 <code>$PDO</code> 提供資料庫操作 <code>exec</code> 的另一種方法，只是部分功能。<br>預先處理得到一種結果，再用這結果執行另一新方法，這新方法可處理sql中所需參數，然後最後再執行 <code>$pdo-&gt;exec($sql)</code>。</p>
</li>
<li><p>區別<br>在於再處理參數時，預處理可以將當初用  <code>$pdi-&gt;exec();</code> 處理上，看不到，拿不到，獲取不到的內容，通過處理參數後可取得。</p>
<p>處理分三部分</p>
<ol>
<li>關鍵核心: <code>prepare()</code> 預<font color="red">處理 <code>sql</code> 語句</font> 和 <code>execute()</code> <font color="red">處理sql 中參數</font> 兩種方法，</li>
<li>bindValue()</li>
<li>bindColumn()</li>
</ol>
</li>
</ul>
<h3 id="6-1-prepare-方法和execute-方法"><a href="#6-1-prepare-方法和execute-方法" class="headerlink" title="6.1 prepare()方法和execute()方法"></a>6.1 prepare()方法和execute()方法</h3><ol>
<li><p>描述：</p>
<ul>
<li><p>prepare()方法為預處理sql語句的方法，能夠讓pdo預先處理【半成品的】sql語句。<br>並生成一個 <code>PDOStatementObject</code> 類型的結果。</p>
</li>
<li><p>execute()方法是提供給 PDOStatementObject 類型物件去執行的【成品】sql語句的方法並生成一個 <code>PDOStatementObject</code> 類型的結果。</p>
</li>
</ul>
</li>
<li><p>說明：</p>
<ul>
<li><p>交由 pdo去prepare預處理的【半成品】sql語句，使用?問號作為預留位置，表示待傳參的參數</p>
</li>
<li><p>prepare預處理必須只能處理【半成品】sql語句，如果是完整則需要使用exec方法執行</p>
</li>
<li><p>execute()方法允許一個陣列作為參數，將參數帶入到預處理的sql語句中，並且會將結果存放到 PDOStatementObject 對象中。</p>
</li>
<li><p>PDOStatementObject 物件在預處理的不同階段有著不同的含義！！不可混淆，必須根據上下文判斷。</p>
</li>
</ul>
</li>
<li><p>語法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>
<span class="token variable">$pdoStatementObject</span> <span class="token operator">=</span> <span class="token variable">$pdoStatementObject</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$pdoStatementObject</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span>test<span class="token single-quoted-string string">','</span>test<span class="token single-quoted-string string">','</span><span class="token number">1</span>qaz@wsx<span class="token single-quoted-string string">','</span>男<span class="token single-quoted-string string">','</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">01</span><span class="token single-quoted-string string">','</span>member<span class="token single-quoted-string string">','</span>test@gmail<span class="token punctuation">.</span>com<span class="token single-quoted-string string">','</span>http<span class="token punctuation">:</span><span class="token comment">//wda.edu.tw/test','098876543','台北市',1,'2008-10-21 12:06:08','2008-10-21 12:06:08'));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>
<span class="token variable">$pdoStatementObject</span> <span class="token operator">=</span> <span class="token variable">$pdoStatementObject</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面寫法等同:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$pdoStatementObject</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`) values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>範例:</p>
<p><code>06pdo預處理語句.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token single-quoted-string string">'singletonPDO.php'</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//半成品sql語句</span>
<span class="token comment">//只能由prepare 預處理語句執行</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$halfPro</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 得到的是 PDOStatement, PDO 的語句對象，裡面有</span>
<span class="token comment">/*
  object(PDOStatement)#2
  (1) {
        ["queryString"]=&gt; string(195) "INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values(?,?,?,?,?,?,?,?,?,?,?,?,?)"
      }
*/</span>
<span class="token comment">//將半成品通過 execute方法傳入參數，變成成品</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'test'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'$test'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'男'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'2019-08-01'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'member'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'test@gmail.com'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'http://wda.edu.tw/test'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'098876543'</span><span class="token punctuation">,</span>台北市<span class="token single-quoted-string string">',1,'</span><span class="token number">2008</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">21</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">08</span><span class="token single-quoted-string string">','</span><span class="token number">2008</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">21</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">08</span>'<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//執行成功回傳 TRUE</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h3 id="6-2-bindColumn-方法"><a href="#6-2-bindColumn-方法" class="headerlink" title="6.2 bindColumn()方法"></a>6.2 bindColumn()方法</h3><ul>
<li><p>描述：<br><code>bindColumn()</code> 方法允許將執行結果的一列資料綁定到一個指定物件上，本方法需要在 <code>execute()</code> 方法執行結束後在執行。</p>
</li>
<li><p>語法：<font color="red">$pdoStatementObject-&gt;bindColumn(index,指定變數);</font></p>
</li>
<li><p>說明：</p>
<ul>
<li>第一個參數表示結果中的第幾列(col)資料。第一列(col)就寫1，以此類推。<blockquote>
<p>指: SQL 執行的到結果的欄位索引值。</p>
</blockquote>
</li>
<li>第二個參數表示資料要賦值給那個變數，隨便一個變數即可。<blockquote>
<p>指: 用來儲存該欄位的值。</p>
</blockquote>
</li>
<li>bindColumn()方法一次綁定一列給一個變數，如需綁定多個，則執行多次即可。</li>
</ul>
</li>
<li><p>例子：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM members WHERE 1"</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">=</span> $pdo <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">prepare</span><span class="token punctuation">(</span>$<span class="token keyword">sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>$name<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>$username<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>$passwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>$sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>$birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>$<span class="token keyword">level</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>$email<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>$url<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>$phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>$address<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span>$login<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span>$logintime<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span>$jointime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span>$<span class="token keyword">row</span> <span class="token operator">=</span> $pdoStatementObject<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">fetch</span><span class="token punctuation">(</span>PDO::FETCH_COLUMN<span class="token punctuation">)</span><span class="token punctuation">)</span>{
  echo <span class="token string">"{$name}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$username}"</span><span class="token punctuation">.</span> <span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$passwd}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$sex}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$birthday}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$level}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$email}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$url}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$phone}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$login}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$logintime}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$jointime}"</span><span class="token punctuation">.</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>練習: 修改原 <code>06pdo預處理語句.php</code> 的SQL 插入操作，變成查詢 <code>06pdo預處理語句_查詢.php</code>:</p>
<p><code>06pdo預處理語句_查詢.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// bindColumn</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token single-quoted-string string">'singletonPDO.php'</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//半成品sql語句</span>
<span class="token comment">//只能由prepare 預處理語句執行</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT * FROM members WHERE 1"</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$halfPro</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 得到的是 PDOStatement, PDO 的語句對象，裡面有</span>
<span class="token comment">// object(PDOStatement)#2 (1) {</span>
<span class="token comment">// ["queryString"]=&gt;</span>
<span class="token comment">//  string(51) "INSERT INTO members values(?,?,?,?,?,?,?,?,?,?,?,?)"</span>
<span class="token comment">// }</span>
<span class="token comment">//將半成品通過 execute方法傳入參數，但尚讀不出來</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//將結果中的內容綁定在指定變數上</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token variable">$passwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token variable">$sex</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token variable">$birthday</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token variable">$level</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token variable">$phone</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token variable">$address</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token variable">$login</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token variable">$logintime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token variable">$jointime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//讀取查詢結果</span>
<span class="token variable">$info</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_COLUMN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'name'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'username'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'passwd'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$passwd</span><span class="token punctuation">,</span>
      <span class="token single-quoted-string string">'sex'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$sex</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'birthday'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$birthday</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'level'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$level</span><span class="token punctuation">,</span>
      <span class="token single-quoted-string string">'email'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$email</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'url'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'phone'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$phone</span><span class="token punctuation">,</span>
      <span class="token single-quoted-string string">'address'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$address</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'login'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$login</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'logintime'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$logintime</span><span class="token punctuation">,</span>
      <span class="token single-quoted-string string">'jointime'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$jointime</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* while ($row = $halfPro-&gt;fetch(PDO::FETCH_COLUMN)) {
     echo "{$name}" . "----" . "{$username}" . "----" . "{$passwd}" . "----" . "{$sex}" . "----" . "{$birthday}" . "----" . "{$level}" . "----" . "{$email}" . "----" . "{$url}" . "----" . "{$phone}" . "----" . "{$login}" . "----" . "{$logintime}" . "----" . "{$jointime}" . "&lt;br/&gt;"; 
   }
*/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-bindValue-方法"><a href="#3-bindValue-方法" class="headerlink" title="3. bindValue()方法"></a>3. bindValue()方法</h3><ol>
<li><p>前言:<br>之前的方式，<code>SQL</code> 查詢中，使用 <code>prepare()</code> 做SQL 語句預處理，得到的半成品，再利用 <code>execute()</code>　傳遞所需參數，同時轉換得到成品，但讀不到內容，將結果中的內容透過 <code>bindColumn()</code> 來綁定資料在指定變數上。</p>
<p>若不想使用 <code>execute()</code> 來傳遞參數，可以改用 <code>bindValue()</code> 來給半成品的 SQL 語句進行傳值。</p>
</li>
<li><p>描述：<br>bindValue()方法是提供給　pdo　預處理之後得到的　PdoStatementObject 物件使用的方法，用來給【半成品】的sql語句進行傳值。</p>
</li>
<li><p>語法：<font color="red">$pdoStatementObject-&gt;bindValue(index,value);</font></p>
</li>
<li><p>說明:</p>
<ul>
<li>第一個參數表示給sql語句中第幾個參數傳值。第一個就寫1，以此類推。</li>
<li>第二個參數表示給sql語句中的對應參數傳的具體的值。</li>
<li>bindValue一次綁定一個參數，如果有多個則需要調用多次。</li>
</ul>
</li>
<li><p>例子：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO members values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">=</span> $pdo<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">prepare</span><span class="token punctuation">(</span>$<span class="token keyword">sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'1qaz@wsxd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'2019-08-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'member'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'test@gmail.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'http://wda.edu.tw/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'098876543'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'台北市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'2008-10-21 12:06:08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'2008-10-21 12:06:08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
echo $pdoStatementObject<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>07pdo補充bindValue方法.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token single-quoted-string string">'singletonPDO.php'</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>

<span class="token variable">$halfPro</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//在prepare()方法和execute()方法之間，對sql語句中的？傳值</span>
<span class="token comment">//提供了一種更靈活的方式，來編輯sql語句</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'1qaz@wsxd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2019-08-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'member'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test@gmail.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'http://wda.edu.tw/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'098876543'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'台北市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2008-10-21 12:06:08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2008-10-21 12:06:08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//習慣上execute()方法不傳參，僅代表執行作用</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'test'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'男'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2019-08-01'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'member'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test@gmail.com'</span><span class="token punctuation">,</span> 'http<span class="token punctuation">:</span><span class="token comment">//wda.ed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這種方式好處，是傳遞的值可以寫成一變數,提供了一種更靈活的方式，來編輯 <code>sql</code> 語句。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//$name = $_POST['name']</span>
<span class="token comment">//$username = $_POST['username']</span>

<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token single-quoted-string string">'singletonPDO.php'</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>

<span class="token variable">$halfPro</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//在prepare()方法和execute()方法之間，對sql語句中的？傳值</span>
<span class="token comment">//提供了一種更靈活的方式，來編輯sql語句</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'1qaz@wsxd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2019-08-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'member'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test@gmail.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'http://wda.edu.tw/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'098876543'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'台北市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2008-10-21 12:06:08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2008-10-21 12:06:08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//習慣上execute()方法不傳參，僅代表執行作用</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//成功會回傳 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="7-PDO-交易處理-transaction"><a href="#7-PDO-交易處理-transaction" class="headerlink" title="7. PDO 交易處理 transaction"></a>7. PDO 交易處理 transaction</h2><ul>
<li><p>交易：多個事件組成的結構。</p>
</li>
<li><p>事件：事件實際上就是<font color="red">預處理語句執行的<b>execute</b>語句</font>。</p>
<blockquote>
<p>即多個　execute 子句</p>
</blockquote>
</li>
<li><p>注意：</p>
<ol>
<li><p>整個交易操作必須放到　<code>try...catch</code>　中，這是因為我們並不能保證執行的事件一定成功。<br>而對於整個交易而言，任何一個事件的失敗都會導致catch的觸發。<br>而catch觸發就意味著必須將之前做出的所有的操作都必須還原回滾操作: <code>$pdo-&gt;rollBack()</code></p>
</li>
<li><p>動作陳述式(CRUW)必須在交易開啟之後執行，在交易提交之前停止.<br>開啟交易：<code>$pdo-&gt;beginTransaction();</code><br>關閉交易：<code>$pdo-&gt;commit();</code></p>
</li>
<li><p>中文處理方案(避免亂碼)：<br>讀取：<code>$pdo-&gt;query("set names utf8");</code><br>插入：<code>$pdo-&gt;exec('set names utf8');</code></p>
</li>
<li><p>銀行轉帳:</p>
<ul>
<li>提錢 -&gt; 轉多少 -&gt; 輸入密碼 -&gt; 成功　-&gt; 轉帳成功</li>
<li>提錢 -&gt; 轉多少 -&gt; 輸入密碼 -&gt; 錯誤　-&gt; 轉帳失敗</li>
</ul>
<blockquote>
<p>只有成功，才允許轉錢出去。</p>
</blockquote>
</li>
</ol>
</li>
<li><p>交易目的：保證只有在交易成功才會有影響發生，否則不會有任何異動</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">require_once</span> <span class="token double-quoted-string string">"singletonPDO.php"</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getpdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
   <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"UPDATE members set `m_sex`=?, `m_login`=?"</span><span class="token punctuation">;</span>
   <span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">" WHERE m_id = ?"</span><span class="token punctuation">;</span>
   <span class="token variable">$pdoso</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">//成功</span>
   <span class="token variable">$pdoso</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'女'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span>’<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//失敗，參數不符</span>
   <span class="token variable">$pdoso</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">777</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">echo</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token variable">$pdo</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">rollBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token double-quoted-string string">"失敗"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>08pdo交易處理transaction方法.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">require_once</span> <span class="token single-quoted-string string">'singletonPDO.php'</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">//開啟交易處理</span>
  <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//創建一個修改sql語句</span>
  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"UPDATE members set `m_sex`=?, `m_login`=?"</span><span class="token punctuation">;</span>
  <span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">" WHERE m_id = ?"</span><span class="token punctuation">;</span>

  <span class="token variable">$halfPro</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//執行第一條execute語句(第一個事件)</span>
  <span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'女'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//執行第二條execute語句(第二個事件),沒給 m_id， 數據不足，會觸發 Exception，本次交易發生異常</span>
  <span class="token comment">//操作錯誤，屬於第一類異常，執行到這有問題，就該中斷停止繼續往下執行，異常需設中斷模式</span>
  <span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'lileilei'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//提交交易</span>
  <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">rollBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token single-quoted-string string">'交易處理失敗，數據庫回滾到交易開始之前的狀態，沒有受到任何影響'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行第二條 <code>execute</code> 語句(第二個事件),沒給 <code>m_id</code>， 不足數據，所以會觸發 <code>Exception</code>，本次交易發生異常。</p>
<p>此錯誤為操作錯誤，屬於第一類異常，執行到這裏有問題，就該中斷停止繼續往下執行，異常需設中斷模式，在單例模式產生 <code>$PDO</code> 就要加入：<br><code>$pdo -&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//通過單例模式，獲取唯一 $PDO:</span>
<span class="token keyword">class</span> <span class="token class-name">singletonPDO</span>
<span class="token punctuation">{</span>
  <span class="token comment">//創建私有 $靜態變數或常數</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
  <span class="token comment">//獲取單例對象的方法</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">//當前類的靜態變數, 第一次調用若為空值時</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//創建一個 $pdo(該 $pdo 為靜態，所以透過 :: 呼叫)</span>
  　  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    　  self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=class"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"1qaz@wsx"</span>
        self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODEPDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"錯誤訊息為: "</span> <span class="token punctuation">.</span> <span class="token variable">$error</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  　  <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="8-學生管理實例"><a href="#8-學生管理實例" class="headerlink" title="8. 學生管理實例"></a>8. 學生管理實例</h2><hr>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>php&amp;mysql</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 資料庫</title>
    <url>/mysql/20201006-mysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-MySQL資料庫使用與管理"><a href="#1-MySQL資料庫使用與管理" class="headerlink" title="1. MySQL資料庫使用與管理"></a>1. MySQL資料庫使用與管理</h2><h3 id="1-1-關於資料庫"><a href="#1-1-關於資料庫" class="headerlink" title="1.1 關於資料庫"></a>1.1 關於資料庫</h3><p>  要使一個網站達到互動的效果，不是讓網頁充滿了動畫、音樂，而是當瀏覽者對網頁提出要求時能出現回應的結果。而這樣的效果，大多必須搭配資料庫的使用，讓網頁讀出儲存在資料庫中的資料，顯示在網頁上，也因為每個瀏覽者對於某一個相同的網頁所提出的要求不同，顯示出的結果即不同，這才是真正的互動網站。</p>
<h3 id="1-2-認識資料庫"><a href="#1-2-認識資料庫" class="headerlink" title="1.2 認識資料庫"></a>1.2 認識資料庫</h3><p>資料庫 (Database)<br>  可以說是一些相關資料的集合並進行儲存的地方，我們可以一定的原則與方法新增、編輯、刪除資料的內容，進而搜尋、分析、比對所有資料，取得可用的資訊，產生所需的結果。</p>
<p>目前巿面上的主流是「關聯式資料庫管理系統」（Relational Database Management System），例如：<code>Access</code>、<code>MySQL</code>、<code>SQL Server</code> 和 <code>Oracle</code> 等，可以用來管理關聯式資料庫。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-1.png" class="nofancybox img-center">

<h3 id="1-3-關聯式資料庫"><a href="#1-3-關聯式資料庫" class="headerlink" title="1.3 關聯式資料庫"></a>1.3 關聯式資料庫</h3><p>  關聯式資料庫（Relational Database）是由一個或多個資料表所組成，在資料表之間是使用欄位資料值來建立連接，以便實作資料表之間的關聯性。</p>
<p>  在關聯式資料庫是使用二維表格的資料表來儲存記錄資料，在各資料表之間使用欄位值建立關聯性。</p>
<p>例如：使用【學號】欄位值建立兩個資料表之間的關聯性，就可以查詢此學號所修的課程，如右圖所示：</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-2.png" class="nofancybox img-center">

<h3 id="1-4-資料表、記錄與欄位"><a href="#1-4-資料表、記錄與欄位" class="headerlink" title="1.4 資料表、記錄與欄位"></a>1.4 資料表、記錄與欄位</h3><p>  關聯式資料庫是使用「資料表」（Tables）的二維表格儲存資料，每一個資料表使用「欄位」（Fields）分類成很多群組，每一個群組是一筆「記錄」（Records），例如：通訊錄資料表，如下表所示：</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-3.png" class="nofancybox img-center">

<p>  資料表可以使用「索引」（Index）將資料系統化的整理，以便在大量資料中快速找到所需的資料或進行排序。</p>
<p>例如：在通訊錄資料表使用編號欄位建立主索引鍵，或稱為「主鍵」（Primary Key），如此就可以透過編號來加速資料表記錄的搜尋和排序。</p>
<h3 id="1-5-MySQL-資料庫的特色"><a href="#1-5-MySQL-資料庫的特色" class="headerlink" title="1.5 MySQL 資料庫的特色"></a>1.5 MySQL 資料庫的特色</h3><p>  早期的資料庫大都屬於操作在單機或是區域網路的系統，雖然在操作上方便，管理上也比較輕鬆，但是談到資料庫本身的效能或是安全性都是相當不利的弱點。</p>
<p>  隨著 Internet 的興起，開始興起 Internet 資料庫的概念，此時資料庫的角色已經化為一個在網際網路上提供資料存取編輯、應用查詢的伺服器了。<br>  MySQL 資料庫就是這個概念的一個具體表現，在與網站伺服器結合作業後，MySQL 資料庫就成為了一個網路型的資料庫系統。</p>
<h3 id="1-6-資料庫的字元集與連線校對-使用phpMyAdmin-管理程式"><a href="#1-6-資料庫的字元集與連線校對-使用phpMyAdmin-管理程式" class="headerlink" title="1.6 資料庫的字元集與連線校對(使用phpMyAdmin 管理程式)"></a>1.6 資料庫的字元集與連線校對(使用phpMyAdmin 管理程式)</h3><ul>
<li><p><strong>登入 phpMyAdmin 的管理畫面</strong><br>輸入: <code>http://127.0.0.1/phpmyadmin</code></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-4.png" width="60%" height="40%" class="nofancybox img-center">
</li>
<li><p><strong>MySQL 資料庫的字元集與連線校對</strong><br>  MySQL 資料庫在 4.1 版本後支援 utf8 字元編碼來儲存，如此即可解決資料在不同語系文字上儲存與顯示上的問題。所以在 MySQL 中讀取或是寫入資料時能指定正確的字元集與連線校對，是維持資料內容正確的重要課題。</p>
</li>
<li><p>認識字元集與連線校對：<br>字元集 (character set) 是指資料庫中資料文字的編碼方式，而連線校對 (collation) 是資料中字元的排序方式。</p>
</li>
<li><p>中文衝碼問題：<br>在中文的環境中，我們可以選取 big5 繁體中文與 utf8 的編碼方式做為操作MySQL 資料庫的字元集。</p>
<blockquote>
<p>建議中文使用的字元集與連線校對方式:<br>   在 MySQL 資料庫最完美的解決方式還是選擇使用 <code>utf8</code> 的方式來進行文字編碼，如此即可將中文字以 <code>Unicode</code> 的方式進行儲存，徹底解決衝碼問題。</p>
</blockquote>
</li>
<li><p>MySQL 使用的字元集與連線校對：<br>MySQL 由資料庫、資料表、資料欄位各個層級中，都可以單獨設定採用的字體集與連線校對方式。若在某一層操作時沒有設定使用字體集與連線校對方式為何，就會繼承上一層的設定來使用，若都沒有設定就會以MySQL 資料庫的預設值來做使用標準。</p>
</li>
<li><p>mysql 裡 <code>utf8_general_ci</code> 跟 <code>utf8_unicode_ci</code> 連線校對的差異<br>mysql 要在兩個 codepage 裡面找出來相對應的字元位置在哪裡。對 <code>utf8_general_ci</code> 來說，來源 codepage 裡面的一個字元只能對應到目標 codepage 裡面的一個字元，而 <code>utf8_unicode_ci</code> 則可以把來源codepage 裡的一個字元對應到目標 codepage 裡的多個字元（或反過來）。</p>
<p>例如德文裡的 ß 要轉換成英文的時候如果是用 <code>utf8_unicode_ci</code> 轉換會變成正確的 ss ，但是如果用 <code>utf8_general_ci</code> 的話則會變成單一的 s 而已。<br>所以如果可以的話請盡量用 <code>utf8_unicode_ci</code> 而不要用 <code>utf8_general_ci</code>，雖然對 multibyte 字元來說這兩個都沒差，但是 utf8 的網頁誰也不知道哪天會不會有這種字元出現在你的網頁上，所以如果設成 <code>utf8_unicode_ci</code> 你就不需要擔心貼上去之後資料在轉換間遺失了。</p>
</li>
<li><p><strong>新增資料庫</strong><br>回到 phpMyAdmin，我們將要在 MySQL 中建置一個學校班級的資料庫：「class」，並新增一個同學通訊錄資料表：「students」。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-5.png" width="60%" height="40%" class="nofancybox img-center">

<p><strong>認識資料表的欄位：</strong><br>在資料表新增前，首要的動作是要先規劃資料表中所要使用的欄位。其中設定資料欄位的類型非常重要，使用正確的資料型態才能正確的儲存、應用資料。</p>
<p><strong>數值型態：</strong><br>可運用來儲存、計算的數值資料欄位，例如會員的編號或是產品的價格等。在<br>MySQL 中的數值欄位依照所儲存的資料所需空間大小有以下的區別：</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-6.png" class="nofancybox img-center">

<p><strong>文字型態：</strong><br>可用來儲存文字類型的資料，如學生姓名、地址等。在 MySQL 中文字型態資料有下列幾種格式：</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-59.png" width="60%" height="40%" class="nofancybox img-center">

<p><strong>日期及時間型態：</strong><br>日期及時間型態：可用來儲存日期或是時間類型的資料，例如會員的生日、留言的時間等。<br>MySQL 中的日期及時間型態有下列幾種格式：</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-7.png" class="nofancybox img-center">
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-8.png" class="nofancybox img-center">

<p><strong>特殊資料型態：</strong><br>還有二個特殊的資料型態，嚴格來說它們都屬於文字型態，但是因為它們的內容只能由固定的選項內挑選，又有人稱它們為「列舉資料型態」，內容如下：</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-9.png" width="60%" height="40%" class="nofancybox img-center">

<p><strong>重要的欄位屬性：</strong><br>在建置資料表時，除了要依不同性質的資料選擇適合的欄位型態，有些重要的欄位屬性定義也能在不同的型態欄位中發揮其功能，常用的設定如下：</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-10.png" class="nofancybox img-center">
</li>
<li><p>新增資料表<br><strong>欄位規劃：</strong></p>
<p>以下我們要新增一個同學個人資料表：「students」，以下是這個資料表欄位的規劃：</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-11.png" class="nofancybox img-center">

<p>實作如下：</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-12.png" class="nofancybox img-center">
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-13.png" class="nofancybox img-center">
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-14.png" class="nofancybox img-center">

<p><strong>資料新增、資料的新增、瀏覽、編輯與刪除</strong></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-15.png" class="nofancybox img-center">
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-16.png" class="nofancybox img-center">
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-17.png" class="nofancybox img-center">
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-18.png" class="nofancybox img-center">

<p><strong>SQL 指令輸入：</strong></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-19.png" class="nofancybox img-center">

<p><strong>資料瀏覽：</strong></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-20.png" class="nofancybox img-center">

<p><strong>資料的編輯：</strong></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-21.png" class="nofancybox img-center">

<p><strong>資料的刪除：</strong></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-22.png" class="nofancybox img-center">

<p><strong>新增欄位：</strong></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-23.png" class="nofancybox img-center">
</li>
<li><p><strong>資料庫的備份與還原</strong><br>在 <code>MySQL</code> 資料庫裡備份資料，是十分簡單又輕鬆的事情。在本節中我們將說明如何使用 <code>phpMyAdmin</code> 備份 <code>MySQL</code> 的資料表，以及資料表匯入還原的動作。<br>我們可以使用 <code>phpMyAdmin</code> 的管理程式選取資料庫中的所有資料表，匯出成一個單獨的文字檔。當資料庫受到損壞或是要將資料搬移到新的 <code>MySQL</code> 資料庫時，只要將這個文字檔匯入即可完成。</p>
<ul>
<li><p><strong>資料庫備份：</strong></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-24.png" class="nofancybox img-center">
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-25.png" class="nofancybox img-center">
再按「執行」
</li>
<li><p><strong>資料庫還原：</strong></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-26.png" class="nofancybox img-center">
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-27.png" class="nofancybox img-center">
再按「執行」
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-28.png" class="nofancybox img-center">
</li>
</ul>
</li>
<li><p><strong>MySQL 資料庫的安全設定</strong><br>MySQL 資料庫管理系統不同於一般檔案型的資料庫，放置在網路上雖然不會直接被下載，但是只要針對MySQL 服務端口進行攻擊，還是有安全上的顧慮。以下將深入討論 MySQL資料庫在安全性上的設定。</p>
<ul>
<li><strong>對於 MySQL 資料庫的安全問題：</strong></li>
</ul>
<p>MySQL 資料庫是一個存在於網際網路上的資料庫系統，換句話說只要是網際網路上的使用者都可以連接到這個資源，如果沒有權限或其他措施的控管，任何人都可以對 MySQL 資料庫予取予求，為所欲為。</p>
<ul>
<li><p><strong>對於 phpMyAdmin 資料庫的安全考量：</strong><br>phpMyAdmin 是一套網頁介面的 MySQL 管理程式，有許多 PHP 的程式設計師都會將這套工具直接上傳到他的 PHP 網站資料夾裡，那麼管理者只要從遠端透過瀏覽器登入phpMyAdmin 來管理的資料庫了！</p>
</li>
<li><p><strong>防堵安全漏洞的好建議：</strong><br>無論是 MySQL 資料庫本身的權限設定或是 phpMyAdmin 管理程式的安全漏洞，為了避免他人透過網路入侵您的資料庫，有幾件事必須要先做的：</p>
<ol>
<li><p><strong>修改 phpMyAdmin</strong><br>管理程式的資料夾名稱。最好是修改成一個不容易猜，與管理或是MySQL、phpMyAdmin等關鍵字。</p>
</li>
<li><p><strong>為MySQL資料庫的管理帳號加上密碼</strong></p>
</li>
<li><p><strong>養成備份 MySQL 資料庫的習慣</strong></p>
</li>
</ol>
</li>
<li><p><strong>MySQL 的帳號管理</strong><br>在 MySQL 資料庫中的管理者帳號為：「root」，現在我們就使用 phpMyAdmin 來檢視這個帳號的設定。</p>
<ol>
<li><strong>檢視帳號設定：</strong><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-29.png" class="nofancybox img-center"></li>
<li><strong>修改帳號的權限：</strong><br>每個帳號可以設定對於資料編輯、結構調整，甚至是系統管理的權限。請依照下述步驟檢視目前帳號的權限：<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-30.png" class="nofancybox img-center"></li>
<li><strong>建立或修改密碼：</strong><br>若您的帳號沒有使用密碼或是要修改原來的密碼，請在該頁繼續往下捲動並進行下述步驟：<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-31.png" class="nofancybox img-center">
</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>設定 phpMyAdmin 的登入方式</strong><br> phpMyAdmin 是許多人在管理、操作 MySQL 資料庫最常使用的工具。<br> 因為 phpMyAdmin 是以網頁的方式存在，無論是管理者或是一般使用者都可以藉由瀏覽器開啟，登入機制的啟用便是防堵沒有帳號權限的人入侵資料庫的最後一道關卡。<br> phpMyAdmin 有三種登入認證模式：<code>config</code>、<code>cookie</code> 及 <code>http</code>，以下將說明這三種認證模式的差異與設定方法。</p>
<ol>
<li><p>config 登入認證模式：<br>若是您的程式是處於本機開發階段，並沒有安全性上的考量，不希望每次使用 phpMyAdmin 來管理操作 MySQL資料庫時都要一再輸入帳號、密碼，造成開發時的困擾，您可以將資料庫的帳號、密碼直接寫到phpMyAdmin 的設定檔 <code>config.inc.php</code> 中，如此在進入 phpMyAdmin<br>時就會直接跳過登入步驟進入管理畫面中。<br>a. 將root加入密碼：1234</p>
   <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-32.png" class="nofancybox img-center">

<p>b. 開啟「phpMyAdmin/config.inc.php」</p>
   <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/* Authentication type and info */</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'auth_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'config'</span><span class="token punctuation">;</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'root'</span><span class="token punctuation">;</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">;</span>

<span class="token comment">/* Bind to the localhost ipv4 address and tcp */</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'127.0.0.1'</span><span class="token punctuation">;</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'3306'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>c. 即可跳過登入步驟進入管理畫面</p>
</li>
<li><p>http 登入認證模式：<br>若是您的網站伺服器是使用 httpd 的方式來編譯 PHP 的程式頁面，即可使用 http 登入認證模式，如 Apache 伺服器。但若是使用 CGI 的方式來使用 PHP 程式頁面就不能使用，例如 IIS 伺服器。<br>a. 開啟「phpMyAdmin/config.inc.php」</p>
   <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/* Authentication type and info */</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'auth_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'http'</span><span class="token punctuation">;</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'root'</span><span class="token punctuation">;</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">;</span>
<span class="token comment">/* Bind to the localhost ipv4 address and tcp */</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'127.0.0.1'</span><span class="token punctuation">;</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'3306'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>b. 即會顯示對話方塊要求輸入帳號、密碼</p>
   <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-33.png" class="nofancybox img-center">
</li>
<li><p>cookie 登入認證模式：<br>這是一種在設定上限制最少，使用上也很方便的認證模式。只要是使用者的瀏覽器允許 cookie 的使用，即可使用cookie 登入認證模式。</p>
   <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/* Authentication type and info */</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'auth_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'cookie'</span><span class="token punctuation">;</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'root'</span><span class="token punctuation">;</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">;</span>
<span class="token comment">/* Bind to the localhost ipv4 address and tcp */</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'127.0.0.1'</span><span class="token punctuation">;</span>
<span class="token variable">$cfg</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'Servers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'3306'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
<li><p>資料庫的字元集與連線校對(使用命令提示字元介面下使用指令)</p>
<ul>
<li><p><strong>設定 MySQL 的管理密碼</strong><br>  開啟命令提示字元，輸入以下指令：<br>  <code>cd \xampp\mysql\bin</code></p>
</li>
<li><p><strong>登入</strong><br><code>mysql -uroot -p</code><br><code>mysql -uroot -p -P3066</code></p>
<blockquote>
<p>首先在指令模式用 MySQL 的 root 帳號連接到 MySQL</p>
</blockquote>
</li>
<li><p><strong>修改使用者密碼</strong><br><code>mysqladmin -uroot -p1qaz@wsx password 1234</code></p>
<blockquote>
<p>知道密碼的情況下。</p>
</blockquote>
</li>
<li><p><strong>忘記 Windows 平台上的 MySQL 密碼</strong></p>
<ol>
<li><p>停止MySQL服務</p>
</li>
<li><p>使用命令提示字元</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">\</span>xampp<span class="token punctuation">\</span>mysql<span class="token punctuation">\</span>bin
mysqld --datadir<span class="token operator">=</span>e:<span class="token punctuation">\</span>xampp<span class="token punctuation">\</span>mysql<span class="token punctuation">\</span>data --skip-grant-tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>或 \xampp\mysq\data\my.ini 加入</p>
<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[mysqld]</span>
<span class="token constant">datadir</span><span class="token attr-value"><span class="token punctuation">=</span>/xampp/mysql/data</span>
<span class="token constant">socket</span><span class="token attr-value"><span class="token punctuation">=</span>/xampp/tmp/mysql.sock</span>
skip-grant-tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>使用MySQL安全模式啟動，跳過權限檢查</p>
</blockquote>
</li>
<li><p>開啟一個新視窗</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">cd \xampp\mysql\bin
mysql
mysql<span class="token operator">&gt;</span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">describe</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string<span class="token operator">=</span>PASSWORD<span class="token punctuation">(</span><span class="token string">"你的密碼"</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">UPDATE</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">SET</span> authentication_string <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'你的密碼'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plugin <span class="token operator">=</span> <span class="token string">'mysql_native_password'</span> <span class="token keyword">WHERE</span> <span class="token keyword">User</span> <span class="token operator">=</span> <span class="token string">'root'</span> <span class="token operator">AND</span> Host <span class="token operator">=</span> <span class="token string">'localhost'</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> quit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>檢查欄位與是否是檢視表(View)</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> host<span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">,</span>password<span class="token punctuation">,</span>authentication_string<span class="token punctuation">,</span>plugin <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> <span class="token keyword">FULL</span> <span class="token keyword">TABLES</span> <span class="token operator">IN</span> mysql <span class="token keyword">WHERE</span> TABLE_TYPE <span class="token operator">LIKE</span> <span class="token string">'VIEW'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>重新啟動 <code>MySQL</code></p>
</li>
<li><p>即可登入</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>顯示資料庫</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p
mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>查詢：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">use</span> class<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>class<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="2-SQL-語法"><a href="#2-SQL-語法" class="headerlink" title="2. SQL 語法"></a>2. SQL 語法</h2><h3 id="2-1-結構化查詢語言：SQL"><a href="#2-1-結構化查詢語言：SQL" class="headerlink" title="2.1 結構化查詢語言：SQL"></a>2.1 結構化查詢語言：SQL</h3><p>  <code>SQL</code> 全名是結構化查詢語言(Structured Query Language)，是用於資料庫中的標準數據查詢語言。<br>  <code>SQL</code> 是目前關聯式資料庫系統所使用查詢語法的標準，使用者可以應用 SQL 語法對資料庫系統進行資料的存取、編輯、刪除及管理…等動作。<br>  <code>SQL</code> 語法的內容是利用簡單的英文語句所構成，使用上十分的白話。</p>
<h3 id="2-2-定義資料庫物件語法"><a href="#2-2-定義資料庫物件語法" class="headerlink" title="2.2 定義資料庫物件語法"></a>2.2 定義資料庫物件語法</h3><p>  SQL 語法在應用上對於 DDL (Data Definition Language)：定義資料庫物件使用的語法是很基礎而重要的，其中重要的功能關鍵字有：</p>
<ol>
<li>CREATE 建立資料庫的物件。</li>
<li>ALTER  變更資料庫的物件。</li>
<li>DROP   刪除資料庫的物件。</li>
</ol>
<ul>
<li><p>建立資料庫<br>CREATE 是 SQL 指中建立資料庫或資料表的關鍵字，新增資料庫的語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 資料庫名稱
<span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token punctuation">]</span><span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> 字元集
<span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token punctuation">]</span><span class="token keyword">COLLATE</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> 連線校對<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>建立資料表<br>新增資料表的動作更為頻繁而重要，其語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 資料表名稱
<span class="token punctuation">(</span>欄位名稱 資料類別 <span class="token punctuation">[</span>資料屬性<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">,</span>欄位名稱 資料類別 <span class="token punctuation">[</span>資料屬性<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>資料庫或是資料表在新增後，可以使用 <code>ALTER</code> 指令語法進行修改。</p>
</blockquote>
</li>
<li><p>修改資料庫<br><code>ALTER DATABASE</code> 指令可以修改存在的資料庫結構，基本語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> 資料庫名稱
<span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token punctuation">]</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> 字元集
<span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token punctuation">]</span> <span class="token keyword">COLLATE</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> 連線校對<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修改資料表欄位<br><code>ALTER TABLE</code> 指令可以修改存在的資料表結構，基本語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 資料表名稱
CHANGE 原欄位名稱 新欄位名稱 資料類別 <span class="token punctuation">[</span>資料屬性<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">,</span>原欄位名稱 新欄位名稱 資料類別 <span class="token punctuation">[</span>資料屬性<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>新增資料表欄位<br><code>ALTER TABLE</code> 指令可以在已存在的資料表中新增資料表欄位，其語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 資料表名稱
<span class="token keyword">ADD</span> 欄位名稱 資料類別 <span class="token punctuation">[</span>資料屬性<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token keyword">ADD</span> 欄位名稱 資料類別<span class="token punctuation">[</span>資料屬性<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token keyword">FIRST</span> <span class="token operator">|</span> <span class="token keyword">AFTER</span> 欄位名稱<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>刪除資料表欄位<br><code>ALTER TABLE</code> 指令可以在已存在的資料表中刪除資料表欄位，其語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 資料表名稱
<span class="token keyword">DROP</span> 欄位名稱<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>DROP：刪除資料庫及資料表內容<br>資料庫或是資料表在新增後，可以使用 <code>DROP</code> 指令語法進行修改。<br>刪除資料庫與資料表的語法相似，刪除資料庫的語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 資料庫名稱<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這個刪除資料庫的動作會連同儲存在資料庫中的所有物件，如資料表都一同刪除。刪除資料表的語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 資料表名稱<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h3 id="2-3-查詢資料庫資料的內容"><a href="#2-3-查詢資料庫資料的內容" class="headerlink" title="2.3 查詢資料庫資料的內容"></a>2.3 查詢資料庫資料的內容</h3><p>  SQL 語法在應用上對於 DML(Data Manipulation Language)：查詢維護資料庫資料內容的語法在使用上是更重要的，無論是查詢資料庫或顯示資料庫的內容，更新或刪除資料庫中的資料，都必須依靠這些指令。其中重要的功能關鍵字有：</p>
<ol>
<li>SELECT：查詢選取資料庫中的資料。</li>
<li>INSERT：新增資料到資料表中。</li>
<li>UPDATE：更改資料表中的資料。</li>
<li>DELETE：刪除資料表中的資料。</li>
</ol>
<ul>
<li><p>SELECT：查詢資料<br>資料的查詢應是資料庫系統最重要的工作了，所以 SELECT 可能是 SQL 語法中最重要的指令，因為所有查詢資料的動作都必須由這個指令開始。</p>
<p>SELECT 基本語法：<br><code>SELECT</code> 指令應用於使用者要向資料庫系統查詢資料的時候，其基本的語法格式如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 欄位名稱 <span class="token keyword">FROM</span> 資料表名稱<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>選取所有的欄位：</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>指定資料表選取欄位：</strong><br>基本格式如下：</p>
<p><code>SELECT 資料表名稱.欄位名稱　FROM 資料表名稱；</code></p>
<p>例:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cName<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>AS:設定選取欄位別名：</strong><br>在選取要顯示的欄位時，可能因為該欄位名稱不易判讀或是套用函式而不易顯示，可使用<code>AS</code>設定顯示時使用的別名，其基本的語法格式如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 欄位名稱 <span class="token keyword">AS</span> 欄位別名 <span class="token keyword">FROM</span> 資料表名稱；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>例:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token string">'座號'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>cName<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token string">'姓名'</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>SELECT DISTINCT:去除重複資料顯示一筆：</strong><br>如果需要知道某個資料表欄位內有哪些不同的值，而每個值出現的次數並不重要時，可以使用 <code>SELECT DISTINCT</code> 的方式去達成，其基本的語法格式如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 欄位名稱　<span class="token keyword">FROM</span> 資料表名稱；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>問 1: 想知道全班有幾種性別 ！<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-34.png" class="nofancybox img-center"></p>
</li>
<li><p>WHERE：設定篩選條件<br>在查詢資料時，並不是每一次都要顯示所有的內容。我們可能會為顯示的資料設定一些條件，來篩選顯示的內容，這就是 <code>WHERE</code> 指令的功能。</p>
<p><strong>WHERE 基本語法：</strong><br>WHERE 的基本語法格式為：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 欄位名稱 <span class="token keyword">FROM</span> 資料表名稱 <span class="token keyword">WHERE</span> 條件敘述句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>問 2: 想要由 students 資料表中挑出所有男性的資料！<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-35.png" class="nofancybox img-center"></p>
<p><strong>比較運算子：</strong></p>
<table>
<thead>
<tr>
<th align="left">=</th>
<th align="left">!=</th>
<th align="left">&lt;&gt;</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&gt;</td>
<td align="left">&lt;=</td>
<td align="left">IS NULL</td>
</tr>
</tbody></table>
<p><strong>AND、OR、NOT：連接多個條件式：</strong><br>問 3: 想要由 students 資料表中找出座號大於<code>5</code>的男生<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-36.png" class="nofancybox img-center"></p>
<p>問 4: 想要由 students 資料表中找出座號不大於<code>5</code>的男生<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-37.png" class="nofancybox img-center"></p>
<p>問 5: 想要由 students 資料表中找出座號大於<code>5</code>的男生以外的資料<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-38.png" class="nofancybox img-center"></p>
</li>
<li><p>BETWEEN … AND：設定篩選範圍<br>BETWEEN … AND 基本語法<br>BETWEEN … AND 設定篩選範圍是加在 WHERE 之後，它的基本語法格式為：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 欄位名稱 <span class="token keyword">FROM</span> 資料表名稱 <span class="token keyword">WHERE</span> 條件敘述句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>設定數值篩選範圍：</strong><br>問 6: 由 students 資料表中找出座號大於<code>3</code>且小於<code>7</code>的學生資料<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-39.png" class="nofancybox img-center"></p>
<p><strong>設定日期時間範圍：</strong><br>問 7: 想要尋找日期在 <code>1987 ~ 1988</code> 之間的學生資料<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-40.png" class="nofancybox img-center"></p>
</li>
<li><p>IN：指定多個篩選值<br><code>IN</code> 指定多個篩選值是加在 <code>WHERE</code> 之後，它的基本語法格式為：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 欄位名稱
<span class="token keyword">FROM</span> 資料表名稱
<span class="token keyword">WHERE</span> 欄位名稱 <span class="token operator">IN</span> <span class="token punctuation">(</span>欄位值<span class="token number">1</span><span class="token punctuation">,</span>欄位值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>若是設定篩選值時，若想要直接由某個欄位指定幾個值來顯示可以使用 IN 進行值的指定。指定的值必須放置在「()」左右括號中，每個值之間以「,」逗號區隔。<br>問 8: 想要由 students 資料表中找出座號為 1,3,5,7,9 的學生資料<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-41.png" class="nofancybox img-center"></p>
</li>
<li><p>LIKE：設定字串比對的篩選值<br><strong>萬用字元的使用：</strong><br>在文字資料中常要找以某些文字開頭、某些文字結尾，或是字串中包含哪些文字的內容，此時即可以使用 <code>LIKE</code> 運算子，並搭配以下萬用字元來進行查詢：</p>
<p>問 9:  想要由 students 資料表中，出電話號碼是「0918」開頭的學生資料<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-42.png" class="nofancybox img-center"></p>
<p>問10: 想要由 students 資料表中，找出學生的名字中有「林」這個字的學生資料。<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-43.png" class="nofancybox img-center"></p>
<p>問11: 想要由 students 資料表中，找出學生的地址中有「建國」這個字的資料。<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-44.png" class="nofancybox img-center"></p>
</li>
<li><p>ORDER BY：設定查詢結果的排序<br><code>ORDER BY</code> 的功能是用來設定欄位，進行排序查詢結果，它的基本語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 欄位名稱
<span class="token keyword">FROM</span> 資料表名稱
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 指定排序的欄位 排序方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>其中排序方式有二種：</p>
<ol>
<li><strong>ASC</strong>：遞增排序，由小排到大，也是未指定時預設的排序方法。</li>
<li><strong>DESC</strong>：遞減排序，由大排到小。</li>
</ol>
<p>問12: 想要由 students 資料表所有同學的資料依生日遞減排序。<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-45.png" class="nofancybox img-center"></p>
<p>問13: 想要由 students 資料表所有同學的資料依性別遞增排序，再依生日遞減排序。<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-46.png" class="nofancybox img-center"></p>
</li>
<li><p>LIMIT：設定查詢顯示的筆數<br>LIMIT 可以設定查詢後由哪一筆開始顯示，並顯示多少筆數，它的基本語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 欄位名稱
<span class="token keyword">FROM</span> 資料表名稱
<span class="token keyword">LIMIT</span> 開始顯示的筆數<span class="token punctuation">,</span>顯示多少筆資料<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>LIMIT 是由查詢後的結果再進行擷取資料的動作，如果與 ORDER BY 進行排序搭配可以輕易取得最前的 10 筆資料或是最後的 10 筆資料的結果。<br>也因為如此，LIMIT 在使用時必須放置在 ORDER BY 之後。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cSex<span class="token punctuation">`</span> <span class="token keyword">ASC</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cBirthday<span class="token punctuation">`</span> <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h3 id="2-4-MySQL-常用函式"><a href="#2-4-MySQL-常用函式" class="headerlink" title="2.4 MySQL 常用函式"></a>2.4 MySQL 常用函式</h3><p>  <code>MySQL</code> 資料庫系統本身提供了許多函式可供使用者搜尋資料時進行相關的處理，以下將分成幾個較常使用的函式類別加以介紹。</p>
<ul>
<li><p>算術運算子與數學函式<br>面對數值資料欄位，可以使用算術運算子及數學函式對於欄位的值進行處理成為查詢結果。為了以下的範例說明，我們將要在「students」資料表新增二個欄位：「身高」、「體重」，其格式內容如下：</p>
<table>
<thead>
<tr>
<th align="left">名稱</th>
<th align="left">欄位名稱</th>
<th align="left">資料型態</th>
<th align="left">屬性</th>
<th align="left">NULL</th>
<th align="left">其他</th>
</tr>
</thead>
<tbody><tr>
<td align="left">身高</td>
<td align="left">cHeight</td>
<td align="left">TINYINT(3)</td>
<td align="left">UNSIGNED</td>
<td align="left">是</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">體重</td>
<td align="left">cWeight</td>
<td align="left">TINYINT(3)</td>
<td align="left">UNSIGNED</td>
<td align="left">是</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>問14: 計算每個學生的標準體重，其公式為 <code>身高-70 x 0.6</code>，並顯示一欄計算目前體重與標準體重的差距。<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-47.png" class="nofancybox img-center"></p>
</li>
<li><p>數學函數</p>
<table>
<thead>
<tr>
<th align="left">名稱</th>
<th align="left">語法</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ABS()</td>
<td align="left">ABS(數值)</td>
</tr>
<tr>
<td align="left">POW()</td>
<td align="left">POW(基數,次方數)</td>
</tr>
<tr>
<td align="left">SQRT()</td>
<td align="left">SQRT(數值)</td>
</tr>
<tr>
<td align="left">PI()</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ROUND()</td>
<td align="left">ROUND(數值,小數位數)</td>
</tr>
</tbody></table>
<p>問15: 每個學生的BMI值，其公式為:體重除以身高的平方 (BMI= kg / m^2)<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-48.png" class="nofancybox"></p>
<blockquote>
<p>m 指單位: 公尺</p>
</blockquote>
</li>
<li><p>日期時間函式<br>MySQL 可以使用日期時間函式處理資欄位或是語法中相關的部份，常用的函式如下：</p>
<table>
<thead>
<tr>
<th align="left">函式</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">NOW()</td>
<td align="left">返回目前日期時間，格式為「YYYY-MM-DD HH:MM:SS」、「YYYYMMDD HHMMSS」或時戳記，依需求返回。</td>
</tr>
<tr>
<td align="left">CURDATE()</td>
<td align="left">返回目前系統年月日。也可寫為 CURRENT_DATE()，CURRENT_DATE。</td>
</tr>
<tr>
<td align="left">CURTIME()</td>
<td align="left">返回目前系統時分秒。 CURRENT_TIME()，CURRENT_TIME。</td>
</tr>
<tr>
<td align="left">YEAR(日期時間)</td>
<td align="left">返回指定時間的年份，範圍在 1000 到 9999。</td>
</tr>
<tr>
<td align="left">MONTH(日期時間)</td>
<td align="left">返回指定時間的月份，範圍在 1 到 12。</td>
</tr>
<tr>
<td align="left">DAY(日期時間)</td>
<td align="left">返回指定時間的日期，範圍在 1 到 31。</td>
</tr>
<tr>
<td align="left">DATE(日期時間)</td>
<td align="left">返回指定時間的年月日。</td>
</tr>
<tr>
<td align="left">TIME(日期時間)</td>
<td align="left">返回指定時間的時分秒。</td>
</tr>
<tr>
<td align="left">HOUR(日期時間)</td>
<td align="left">返回指定時間的小時，範圍在 0 到 23。</td>
</tr>
<tr>
<td align="left">MINUTE(日期時間)</td>
<td align="left">返回指定時間的分鐘，範圍在 0 到 59。</td>
</tr>
<tr>
<td align="left">SECOND(日期時間)</td>
<td align="left">返回指定時間的秒數，範圍在 0 到 59。</td>
</tr>
<tr>
<td align="left">DAYNAME(日期時間)</td>
<td align="left">返回指定時間的星期名，如 Sunday、Monday 等。</td>
</tr>
<tr>
<td align="left">MONTHNAME(日期時間)</td>
<td align="left">返回指定時間的月份名，如 January、Febrary。</td>
</tr>
<tr>
<td align="left">QUARTER(日期時間)</td>
<td align="left">返回指定時間一年中的季度，範圍 1 到 4。</td>
</tr>
<tr>
<td align="left">DAYOFWEEK(日期時間)</td>
<td align="left">返回指定時間的星期索引 (1=週日、2=周一、…7=週六)。</td>
</tr>
<tr>
<td align="left">DAYOFMONTH(日期時間)</td>
<td align="left">與 DAY() 相同, 返回指定時間的日期，範圍在 1 到 31 範圍內。</td>
</tr>
<tr>
<td align="left">DAYOFYEAR(日期時間)</td>
<td align="left">返回指定時間在一年中的日數，在 1 到 366 範圍內。</td>
</tr>
<tr>
<td align="left">LAST_DAY(日期時間)</td>
<td align="left">返回指定時間該月的最後一天，一般可用來判斷是否為閏年。</td>
</tr>
<tr>
<td align="left">TO_DAYS(日期時間)</td>
<td align="left">返回指定時間由西元元年到原目前的天數。</td>
</tr>
</tbody></table>
<p>問16: 篩選出生日日期在星期二的同學<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-49.png" class="nofancybox img-center"></p>
<blockquote>
<p>提示: 利用 DAYNAME() 函數得到 「cBirthday」欄位的星期名稱</p>
</blockquote>
<p>問17: 篩選大於 20 歲的同學<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-50.png" class="nofancybox img-center"></p>
<blockquote>
<p>提示: 衍生屬性</p>
</blockquote>
</li>
<li><p>統計函式<br>MySQL 的 SQL 語法還提供許多統計函式，可以總計出一些資料表中的彙整資料。為了以下的範例說明，我們要在「class」資料庫中再加入一個儲存成績的資料表：「scorelist」，以下是這個資料表欄位的規劃：</p>
<table>
<thead>
<tr>
<th align="left">名稱</th>
<th align="left">欄位</th>
<th align="left">資料型態</th>
<th align="left">屬性</th>
<th align="left">NULL</th>
<th align="left">其他</th>
</tr>
</thead>
<tbody><tr>
<td align="left">編號</td>
<td align="left">id</td>
<td align="left">TINYINT(4)</td>
<td align="left">UNSIGNED</td>
<td align="left">否</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">座號</td>
<td align="left">cID</td>
<td align="left">TINYINT(2)</td>
<td align="left">UNSIGNED ZEROFILL</td>
<td align="left">否</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">科目</td>
<td align="left">course</td>
<td align="left">ENUM(‘國文’,’英文’,’數學’)</td>
<td align="left"></td>
<td align="left">否</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">分數</td>
<td align="left">score</td>
<td align="left">TINYINT(3)</td>
<td align="left"></td>
<td align="left">否</td>
<td align="left"></td>
</tr>
</tbody></table>
<ul>
<li><p>SUM():合計值<br>問18: 想要算出全班國文、英文及數學總分<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-51.png" class="nofancybox img-center"></p>
<p>問19: 想要算出全班國文總分<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-52.png" class="nofancybox img-center"></p>
</li>
<li><p>AVG():平均值<br>問20: 想要算出全班國文的平均分數<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-53.png" class="nofancybox img-center"></p>
</li>
<li><p>count():計次<br>問21: 由 students 資料表統計全班人數<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-54.png" class="nofancybox img-center"></p>
</li>
<li><p>MAX()、MIN():最大值、最小值<br>問22: 找出全班國文最高分<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-55.png" class="nofancybox img-center"></p>
<p>問23: 找出全班數學最低分<br>結果: <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-56.png" class="nofancybox img-center"></p>
</li>
<li><p>GROUP BY:分組排列<br>結果: 問24: 想要顯示每個學生的總分</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-57.png" class="nofancybox img-center">
</li>
<li><p>HAVING:GROUP BY 的條件式<br>若希望對 GROUP BY 的 SQL 敘述加上條件式的限制，就不能使用 WHERE 的方法，而是用 HAVING。</p>
<p>問25: 想要顯示座號 1 到 5 同學的分數總計<br>結果:<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql-58.png" class="nofancybox img-center"></p>
</li>
</ul>
</li>
</ul>
<h3 id="2-5-新增、更新、刪除"><a href="#2-5-新增、更新、刪除" class="headerlink" title="2.5 新增、更新、刪除"></a>2.5 新增、更新、刪除</h3><p>  查詢雖然是資料庫中重要的功能，但是新增、更新與刪除資料的動作，才是維護資料庫內容的主要核心功能，以下將說明 SQL 語法中新增、更新與刪除資料的指令與語法。</p>
<ul>
<li><p>INSERT:新增資料<br>可以使用 <code>INSERT</code> 語法為資料表新增資料，其基本語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token punctuation">[</span><span class="token keyword">INTO</span><span class="token punctuation">]</span> 資料表名稱<span class="token punctuation">[</span><span class="token punctuation">(</span>欄位名稱<span class="token number">1</span><span class="token punctuation">,</span>欄位名稱<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">VALUE</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>例:新增繼續新增 3 位同學進入 <code>students</code> 資料表</strong></p>
<table>
<thead>
<tr>
<th align="left">座號</th>
<th align="left">姓名</th>
<th align="left">性別</th>
<th align="left">生日</th>
<th align="left">電子郵件</th>
<th align="left">電話</th>
<th align="left">地址</th>
<th align="left">身高</th>
<th align="left">體重</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left">Bill1</td>
<td align="left">男</td>
<td align="left">1988-02-10</td>
<td align="left"><a href="mailto:Bill1@bb.com">Bill1@bb.com</a></td>
<td align="left">0925932221</td>
<td align="left">台北</td>
<td align="left">176</td>
<td align="left">89</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">Bill2</td>
<td align="left">男</td>
<td align="left">1988-02-10</td>
<td align="left"><a href="mailto:Bill2@bb.com">Bill2@bb.com</a></td>
<td align="left">0925932222</td>
<td align="left">新竹</td>
<td align="left">170</td>
<td align="left">81</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">Bill3</td>
<td align="left">男</td>
<td align="left">1988-02-10</td>
<td align="left"><a href="mailto:Bill3@bb.com">Bill3@bb.com</a></td>
<td align="left">0925932223</td>
<td align="left">桃園</td>
<td align="left">172</td>
<td align="left">84</td>
</tr>
</tbody></table>
<ul>
<li><p>新增一筆資料</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>cName<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cSex<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cBirthday<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cEmail<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cPhone<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cAddr<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cHeight<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cWeight<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'Bill1'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'1988-02-10'</span><span class="token punctuation">,</span><span class="token string">'Bill1@bb.com'</span><span class="token punctuation">,</span><span class="token string">'0925932221'</span><span class="token punctuation">,</span><span class="token string">'台北'</span><span class="token punctuation">,</span><span class="token string">'176'</span><span class="token punctuation">,</span><span class="token string">'89'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>新增多筆資料(以「,」加以區隔)</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>cName<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cSex<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cBirthday<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cEmail<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cPhone<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cAddr<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cHeight<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cWeight<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Bill2'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'1988-02-10'</span><span class="token punctuation">,</span><span class="token string">'Bill2@bb.com'</span><span class="token punctuation">,</span><span class="token string">'0925932223'</span><span class="token punctuation">,</span><span class="token string">'台北'</span><span class="token punctuation">,</span><span class="token string">'170'</span><span class="token punctuation">,</span><span class="token string">'81'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Bill3'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'1988-02-10'</span><span class="token punctuation">,</span><span class="token string">'Bill3@bb.com'</span><span class="token punctuation">,</span><span class="token string">'0925932223'</span><span class="token punctuation">,</span><span class="token string">'台北'</span><span class="token punctuation">,</span><span class="token string">'172'</span><span class="token punctuation">,</span><span class="token string">'84'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>UPDATE:更新資料<br>可以使用 <code>UPDATE</code> 語法為資料表更新資料，其基本語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> 資料表名稱
<span class="token keyword">SET</span> 欄位名稱<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token punctuation">,</span> 欄位名稱<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">WHERE</span> 條件式<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>UPDATE 更新資料的動作可以一次更動多筆資料的內容，所以 <code>WHERE</code> 後加上的條件式十分重要，只要符合條件的資料內容即會進行更新的動作，要特別注意。</p>
</blockquote>
<ul>
<li><p>問 26: 要修改座號為 <code>11</code> 同學的身高體重。</p>
</li>
<li><p>解 26:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span> <span class="token keyword">SET</span> <span class="token punctuation">`</span>cHeight<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">174</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>cWeight<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">92</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>DELETE:刪除資料<br>可以使用 <code>DELETE</code> 語法為資料表刪除資料，其基本語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 資料表名稱
<span class="token keyword">WHERE</span> 條件式<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>DELETE</code> 刪除資料的動作可以一次刪除多筆資料的內容，所以 <code>WHERE</code> 後加上的條件式十分重要，只要符合條件的資料內容即會進行刪除的動作，要特別注意。</p>
<ul>
<li><p>問 27: 刪除座號大於 <code>11</code> 的同學的資料。</p>
</li>
<li><p>解 27:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token operator">&gt;</span><span class="token number">11</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
</li>
</ul>
<h3 id="2-6-多資料表關聯查詢"><a href="#2-6-多資料表關聯查詢" class="headerlink" title="2.6 多資料表關聯查詢"></a>2.6 多資料表關聯查詢</h3><p>  除了在一個資料表中選取欄位進行查詢，我們也可以在多個資料表中之中選取不同的欄位，進行查詢的動作。這樣的查詢方式是必須有前提的，那就是資料表之間要有一欄可以指定相關或是建立關聯。</p>
<ul>
<li><p>結合資料表的查詢<br>結合資料表的基本語法，若要結合二個資料表的基本語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 顯示欄位<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> 資料表_A<span class="token punctuation">,</span> 資料表_B
<span class="token keyword">WHERE</span> 資料表_A<span class="token punctuation">.</span>相關欄位 <span class="token operator">=</span> 資料表_B<span class="token punctuation">.</span>相關欄位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql_relation.png" class="nofancybox img-center">

<ul>
<li><p>問 28: 在「class」資料庫中 students 資料表與「scorelist」資料表，分別記錄著學生的個人資料及成績。在這兩個資料表中可以使用 <code>cID</code> 欄位結合並進行查詢。</p>
</li>
<li><p>解 28:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>course<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>score<span class="token punctuation">`</span>  <span class="token keyword">FROM</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>問 29: 在「class」資料庫中 students 資料表與「scorelist」資料表，分別記錄著學生的個人資料及成績。使用 <code>cID</code> 欄位結合並進行查詢，顯示出學生座號、姓名及其國文成績的查詢。</p>
</li>
<li><p>解 29:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cName<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>course<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'國文 '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>問 30: 在「class」資料庫中 students 資料表與「scorelist」資料表，分別記錄著學生的個人資料及成績。使用 <code>cID</code> 欄位結合並進行查詢，想要顯示同學的座號、姓名、總分及總平均的查詢。</p>
</li>
<li><p>解 30:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cName<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>總分<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>平均<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>總分<span class="token punctuation">`</span> <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql_relation2.png" class="nofancybox img-center">

</li>
</ul>
</li>
</ul>
<h3 id="2-7-使用-JOIN-結合資料表"><a href="#2-7-使用-JOIN-結合資料表" class="headerlink" title="2.7 使用 JOIN 結合資料表"></a>2.7 使用 JOIN 結合資料表</h3><ul>
<li><p>JOIN 的基本語法</p>
<ul>
<li><p>若要 JOIN 語法結合二個資料表的基本語法如下：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 顯示欄位<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> 資料表_A<span class="token punctuation">[</span><span class="token keyword">INNER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 資料表_B
<span class="token keyword">ON</span> 資料表_A<span class="token punctuation">.</span>相關欄位 <span class="token operator">=</span> 資料表_B<span class="token punctuation">.</span>相關欄位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>另一個方式為：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 顯示欄位<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> 資料表_A<span class="token punctuation">[</span><span class="token keyword">INNER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 資料表_B
<span class="token keyword">USING</span><span class="token punctuation">(</span>相關欄位<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<blockquote>
<p>無論何種方式結合資料表，會顯示的資料必須在兩邊資料表有資料，只要有一方法有，即不會出現在結果中。例如有一個學生沒有登錄成績，就不會顯示結果中，如此很容易有漏失資訊的情況。</p>
</blockquote>
</li>
<li><p>例:顯示出學生座號、姓名及其國文成績的查詢。</p>
<ul>
<li><p>使用 <code>JOIN</code></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cName<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>course<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'國文'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>例:希望可以列出全班同學每個人的成績總分與平均。</p>
<ul>
<li><p>使用<strong>結合資料表基本語法</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cName<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cName<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql_relation4.png" class="nofancybox img-center">
</li>
<li><p>LEFT JOIN、RIGHT JOIN 語法</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 顯示欄位 <span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> 資料表 A <span class="token keyword">LEFT</span><span class="token operator">|</span><span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> 資料表 B
<span class="token keyword">ON</span> A<span class="token punctuation">.</span>相關欄位＝ B<span class="token punctuation">.</span>相關欄位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>使用 JOIN 基本語法：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cName<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span> <span class="token keyword">ON</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql_relation5_1.png" class="nofancybox img-center">
</li>
<li><p>使用 LEFT JOIN：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cName<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span> <span class="token keyword">ON</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>scorelist<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>cName<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mysql_relation5_2.png" class="nofancybox img-center">
</li>
</ul>
</li>
</ul>
</li>
<li><p>練習</p>
<ul>
<li><p>mysql</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--</span>
<span class="token comment">-- 資料庫： `mydatabase`</span>
<span class="token comment">--</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>mydatabase<span class="token punctuation">`</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_unicode_ci<span class="token punctuation">;</span>
<span class="token keyword">USE</span> <span class="token punctuation">`</span>mydatabase<span class="token punctuation">`</span><span class="token punctuation">;</span>
<span class="token comment">--</span>
<span class="token comment">-- 資料表結構 `grade`</span>
<span class="token comment">--</span>
<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span> <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>GID<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>SNO<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>COURSE<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>SCORE<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_unicode_ci<span class="token punctuation">;</span>
<span class="token comment">--</span>
<span class="token comment">-- 資料表的匯出資料 `grade`</span>
<span class="token comment">--</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>GID<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>SNO<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>COURSE<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>SCORE<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'1001'</span><span class="token punctuation">,</span> <span class="token string">'CHI'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'1002'</span><span class="token punctuation">,</span> <span class="token string">'ENG'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'1002'</span><span class="token punctuation">,</span> <span class="token string">'MATH'</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'1003'</span><span class="token punctuation">,</span> <span class="token string">'CHI'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'1003'</span><span class="token punctuation">,</span> <span class="token string">'ENG'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'1003'</span><span class="token punctuation">,</span> <span class="token string">'ENG'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'1005'</span><span class="token punctuation">,</span> <span class="token string">'CHI'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">--</span>
<span class="token comment">-- 資料表結構 `student`</span>
<span class="token comment">--</span>
<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>SNO<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>SNAME<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_unicode_ci<span class="token punctuation">;</span>
<span class="token comment">--</span>
<span class="token comment">-- 資料表的匯出資料 `student`</span>
<span class="token comment">--</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>SNAME<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token string">'1001'</span><span class="token punctuation">,</span> <span class="token string">'JOHN'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'1002'</span><span class="token punctuation">,</span> <span class="token string">'MARY'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'1003'</span><span class="token punctuation">,</span> <span class="token string">'TOM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'1004'</span><span class="token punctuation">,</span> <span class="token string">'JERRY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>資料庫: MYDATABASE</p>
</li>
<li><p>資料表(): STUDENT</p>
<table>
<thead>
<tr>
<th align="left">SNO</th>
<th align="left">SNAME</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CHAR(10)</td>
<td align="left">CHAR(10)</td>
</tr>
<tr>
<td align="left">1001</td>
<td align="left">JOHN</td>
</tr>
<tr>
<td align="left">1002</td>
<td align="left">MARY</td>
</tr>
<tr>
<td align="left">1003</td>
<td align="left">TOM</td>
</tr>
<tr>
<td align="left">1004</td>
<td align="left">JERRY</td>
</tr>
</tbody></table>
</li>
<li><p>資料表(): GRADE</p>
<table>
<thead>
<tr>
<th align="left">GID</th>
<th align="left">SNO</th>
<th align="left">COURSE</th>
<th align="left">SCORE</th>
</tr>
</thead>
<tbody><tr>
<td align="left">INT</td>
<td align="left">CHAR(10)</td>
<td align="left">CHAR(10)</td>
<td align="left">INT</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">1001</td>
<td align="left">CHI</td>
<td align="left">70</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">1002</td>
<td align="left">ENG</td>
<td align="left">80</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">1002</td>
<td align="left">MATH</td>
<td align="left">90</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">1003</td>
<td align="left">CHI</td>
<td align="left">80</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">1003</td>
<td align="left">ENG</td>
<td align="left">70</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">1003</td>
<td align="left">MATH</td>
<td align="left">60</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">1005</td>
<td align="left">CHI</td>
<td align="left">50</td>
</tr>
</tbody></table>
</li>
<li><p>使用 JOIN</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SNAME<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>COURSE<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SCORE<span class="token punctuation">`</span>
<span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span>
<span class="token keyword">ON</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用 JOIN LEFT</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SNAME<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>COURSE<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SCORE<span class="token punctuation">`</span>
<span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span>
<span class="token keyword">ON</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用 JOIN RIGHT</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SNAME<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>COURSE<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SCORE<span class="token punctuation">`</span>
<span class="token keyword">FROM</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span>
<span class="token keyword">ON</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>SNO<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>php mvc 框架</title>
    <url>/php/20201130-php-mvc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://www.awaimai.com/128.html">php MVC</a></p>
<h2 id="1-簡介"><a href="#1-簡介" class="headerlink" title="1. 簡介"></a>1. 簡介</h2><p>   <code>MVC</code> 模式（Model-View-Controller）是軟體工程中的一種軟體架構模式。</p>
<ul>
<li><p><code>MVC</code> 把軟體系統分為三個基本部分： 模型（Model）、視圖（View）和控制器（Controller）。</p>
</li>
<li><p><code>PHP</code> 中 <code>MVC</code> 模式也稱 <code>Web MVC</code>，從上世紀 70 年代進化而來。</p>
</li>
<li><p><code>MVC</code> 的目的是實現一種動態的程式設計，便於後續對程式的修改和擴展簡化，並且使程式某一部分的重複利用成為可能。<br>除此之外，此模式通過對複雜度的簡化，使程式結構更加直觀。</p>
</li>
<li><p>MVC 各部分的職能：</p>
<ul>
<li>模型 <code>Model</code> – 管理大部分的業務邏輯和所有的資料庫邏輯。模型提供了連接和操作資料庫的抽象層。</li>
<li>控制器 <code>Controller</code> - 負責回應使用者請求、準備資料，以及決定如何展示資料。</li>
<li>視圖 <code>View</code> – 負責渲染資料，通過 <code>HTML</code> 方式呈現給使用者。</li>
</ul>
<br>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/web_mvc.gif" class="nofancybox img-center">
</li>
<li><p>一個典型的 Web MVC 流程：</p>
<ol>
<li><code>Controller</code> 截獲用戶發出的請求；</li>
<li><code>Controller</code> 調用 <code>Model</code> 完成狀態的讀寫操作；</li>
<li><code>Controller</code> 把資料傳遞給 <code>View</code>；</li>
<li><code>View</code> 渲染最終結果並呈獻給用戶。</li>
</ol>
</li>
<li><p><code>MVC</code> 的設計，<code>Controller</code> 是程式的進入點，掌控整體流程，也是事件的觸發器。如下圖:</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/controller.png" class="nofancybox img-center">
</li>
<li><p><code>Controller</code> 處理的來源，就是接收網址與參數，例如：</p>
<p><code>http://php_mvc.edu/message.php?Action=add</code></p>
<p>由 <code>URL</code> 知道，使用者想讀取的頁面是 <code>message.php</code><br>使用者的行為(此範例定義為 Action)是 <code>add</code><br>程式將由此進入控制點後<br>由 <code>Controller進行</code> 事件的觸發，初步定義 <code>Controller</code> 想要達到以下的效果:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> 可讀取對應的檔案 Ex <span class="token operator">:</span> controller<span class="token punctuation">.</span>message<span class="token punctuation">.</span>php
<span class="token number">2.</span> 觸發 message_add 物件的事件
<span class="token number">3.</span> 將結果回傳到 message_add<span class="token punctuation">.</span>html中
<span class="token number">4.</span> 頁面結果呈現<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上是 <code>Controller</code> 所構思開發的整體邏輯，接下來就是實作部分了</p>
</li>
</ul>
<h2 id="2-代碼規範"><a href="#2-代碼規範" class="headerlink" title="2. 代碼規範"></a>2. 代碼規範</h2><p>  在目錄設置好以後，我們接下來規定代碼的規範：</p>
<ul>
<li><code>MySQL</code> 的資料表名需小寫或小寫加底線，如：item，car_orders。</li>
<li>模組名稱（Models）需用大駝峰命名法，即首字母大寫，並在名稱後添加 <code>Model</code>，如：<br>ItemModel，CarModel。</li>
<li>控制器（Controllers）需用大駝峰命名法，即首字母大寫，並在名稱後添加 <code>Controller</code>，如：<code>ItemController</code>，<code>CarController</code>。</li>
<li>方法名稱（Action）需用小駝峰命名法，即首字母小寫，如： <code>index</code>，<code>indexPost</code>。</li>
<li>視圖（Views）部署結構為控制器名稱/行為名稱，如：<code>item/view.php</code>，<code>car/buy.php</code>。</li>
</ul>
<h2 id="3-目錄準備"><a href="#3-目錄準備" class="headerlink" title="3. 目錄準備"></a>3. 目錄準備</h2><p>   設計 <code>Myphp</code> 框架</p>
<p>project                 WEB 部署根目錄<br>├─app                   應用目錄<br>│  ├─controllers        控制器目錄<br>│  ├─models             模組目錄<br>│  ├─views              視圖目錄<br>├─config                設定檔目錄<br>|  |-config.php         設定檔文件<br>├─fastphp               框架核心目錄<br>│ ├─base                MVC基類目錄<br>│ ├─db                  資料庫操作類目錄<br>│ ├─myphp.php           內核文件<br>├─static                靜態檔目錄<br>├─index.php             入口文件</p>
<blockquote>
<p>然後按照下一步，把 <code>Nginx</code> 或者 <code>Apache</code> 的網站根目錄配置到 <code>project</code> 目錄。</p>
</blockquote>
<h2 id="4-重新定向"><a href="#4-重新定向" class="headerlink" title="4. 重新定向"></a>4. 重新定向</h2><p>  重定向的目的有兩個：設置根目錄為 <code>project</code> 所在位置，以及將所有請求都發送給 <code>index.php</code> 文件。</p>
<ul>
<li><p>如果是 <code>Apache</code> 伺服器，在 project 目錄下新建一個 <code>.htaccess</code> 檔，內容為：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">&lt;IfModule mod_rewrite.c<span class="token punctuation">&gt;</span>
  <span class="token comment"># 打開 Rerite功能</span>
  RewriteEngine On

  <span class="token comment"># 如果請求的是真實存在的檔或目錄，直接訪問</span>
  RewriteCond %<span class="token punctuation">{</span>REQUEST_FILENAME<span class="token punctuation">}</span> <span class="token tag">!-f</span>
  RewriteCond %<span class="token punctuation">{</span>REQUEST_FILENAME<span class="token punctuation">}</span> <span class="token tag">!-d</span>

  <span class="token comment"># 如果訪問的檔或目錄不是真事存在，分發請求至 index.php</span>
  RewriteRule . index.php
&lt;/IfModule<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>如果是 <code>Nginx</code> 伺服器，修改設定檔，在 <code>server</code> 塊中加入如下的重定向：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">location / <span class="token punctuation">{</span>
  <span class="token comment"># 重新向所有非真是存在的請求到index.php</span>
  try_files $uri $uri/ /index.php$args;
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>這樣做的主要原因是：<br> （1）靜態檔能直接訪問。</p>
<pre><code> &amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;如果檔案或者目錄真實存在，則直接訪問存在的檔案/目錄。
 &amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;比如，靜態檔 `static/css/main.css` 真實存在，就可以直接訪問它。</code></pre>
<p> （2）程式有單一的入口。</p>
<pre><code> &amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;這種情況是請求位址不是真實存在的檔案或目錄，這樣請求就會傳到 `index.php` 上。
 &amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;例如，訪問位址：localhost/item/detail/1，在檔案系統中並不存在這樣的檔或目錄。
 &amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;那麼，`Apache`或 `Nginx` 伺服器會把請求發給 `index.php`，並且把功能變數名稱之後的字串賦值給 `REQUEST_URI` 變數。
 &amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;這樣在 `PHP` 中用 `$_SERVER['REQUEST_URI']` 就能拿到 `/item/detail/1`。</code></pre>
</blockquote>
</li>
</ul>
<h2 id="5-PHP-MVC-核心文件"><a href="#5-PHP-MVC-核心文件" class="headerlink" title="5. PHP MVC 核心文件"></a>5. PHP MVC 核心文件</h2><h3 id="5-1-入口文件"><a href="#5-1-入口文件" class="headerlink" title="5.1 入口文件"></a>5.1 入口文件</h3><ul>
<li><p>在 <code>myphp</code> 目錄下新建 <code>index.php</code> 入口檔，檔內容為：作用是保存一些常用配置。</p>
</li>
<li><p>程式碼</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//定義應用目錄為當前目錄</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'APP_PATH'</span><span class="token punctuation">,</span> <span class="token constant">__DIR__</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//開啟偵錯模式</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'APP_DEBUG'</span><span class="token punctuation">,</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//加載框架文件</span>
<span class="token keyword">require</span> <span class="token constant">APP_PATH</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"myphp/myphp.php"</span><span class="token punctuation">;</span>

<span class="token comment">//加載配置框架文件</span>
<span class="token variable">$config</span> <span class="token operator">=</span> <span class="token keyword">require</span> <span class="token constant">APP_PATH</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"config/config.php"</span><span class="token punctuation">;</span>

<span class="token comment">//實例化框架類別 (myphp/myphp.php)</span>

<span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">myphp<span class="token punctuation">\</span>myphp</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="5-2-配置文件"><a href="#5-2-配置文件" class="headerlink" title="5.2 配置文件"></a>5.2 配置文件</h3><ul>
<li><p>作用是保存一些常用配置。</p>
</li>
<li><p><code>config.php</code> 檔內容如下，作用是定義資料庫連接參數參數，以及配置預設控制器名稱和操作名稱：</p>
</li>
<li><p>程式碼</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// 資料庫配置(2 維陣列) db[ ["host"]=&gt;"localhost" ] ]    array[ley]</span>
<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'localhost'</span><span class="token punctuation">;</span>
<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'root'</span><span class="token punctuation">;</span>
<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">;</span>
<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'dbname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'myphp'</span><span class="token punctuation">;</span>

<span class="token comment">// 預設控制器和操作名稱</span>
<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'defaultController'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Item'</span><span class="token punctuation">;</span>
<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'defaultAction'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'index'</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token variable">$config</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="5-3-框架核心類別"><a href="#5-3-框架核心類別" class="headerlink" title="5.3 框架核心類別"></a>5.3 框架核心類別</h3><ul>
<li><p>入口檔對框架類做了兩步操作：產生實體，調用 <code>run()</code> 方法。</p>
</li>
<li><p>產生實體操作接受 <code>$config</code> 參數配置，並保存到物件屬性中。</p>
</li>
<li><p><code>run()</code> 方法則調用用類自身方法，完成下面幾個操作：</p>
<ol>
<li>類自動載入</li>
<li>環境檢查</li>
<li>過濾敏感字元</li>
<li>移除全域變數的老用法</li>
<li>路由處理</li>
</ol>
</li>
<li><p>在 <code>myphp</code> 目錄下新建核心類別檔案，名稱 <code>myphp.php</code>，代碼：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">namespace</span> <span class="token package">myphp</span><span class="token punctuation">;</span>

  <span class="token comment">// 框架根目錄</span>
  <span class="token function">defined</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'CORE_PATH'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'CORE_PATH'</span><span class="token punctuation">,</span> <span class="token constant">__DIR__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/**
  * my 框架核心
  */</span>
  <span class="token keyword">class</span> <span class="token class-name">myphp</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// 配置內容</span>
    <span class="token keyword">protected</span> <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span> <span class="token operator">=</span> <span class="token variable">$config</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 運行程式</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'loadClass'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setReporting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">removeMagicQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">unregisterGlobals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setDbConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 路由處理</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token variable">$controllerName</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'defaultController'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token variable">$actionName</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'defaultAction'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token variable">$param</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 清除?之後的內容</span>
      <span class="token variable">$position</span> <span class="token operator">=</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$position</span> <span class="token operator">===</span> <span class="token boolean constant">false</span> <span class="token operator">?</span> <span class="token variable">$url</span> <span class="token punctuation">:</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$position</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 刪除前後的“/”</span>
      <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 使用 "/" 分割字串，並保存在陣列中</span>
          <span class="token variable">$urlArray</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 刪除空的陣列元素</span>
          <span class="token variable">$urlArray</span> <span class="token operator">=</span> <span class="token function">array_filter</span><span class="token punctuation">(</span><span class="token variable">$urlArray</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment">// 獲取控制器名</span>
          <span class="token variable">$controllerName</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token variable">$urlArray</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment">// 獲取動作名</span>
          <span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token variable">$urlArray</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token variable">$actionName</span> <span class="token operator">=</span> <span class="token variable">$urlArray</span> <span class="token operator">?</span> <span class="token variable">$urlArray</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$actionName</span><span class="token punctuation">;</span>

          <span class="token comment">// 獲取URL參數</span>
          <span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token variable">$urlArray</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token variable">$param</span> <span class="token operator">=</span> <span class="token variable">$urlArray</span> <span class="token operator">?</span> <span class="token variable">$urlArray</span> <span class="token punctuation">:</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 判斷控制器和操作是否存在</span>
      <span class="token variable">$controller</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'app\\controllers\\'</span><span class="token punctuation">.</span> <span class="token variable">$controllerName</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'Controller'</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token variable">$controller</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'控制器不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">,</span> <span class="token variable">$actionName</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token variable">$actionName</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'方法不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 如果控制器和操作名存在，則產生實體控制器，因為控制器物件裡面</span>
      <span class="token comment">// 還會用到控制器名和操作名，所以產生實體的時候把他們倆的名稱也</span>
      <span class="token comment">// 傳進去。結合Controller基類一起看</span>
      <span class="token variable">$dispatch</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$controller</span><span class="token punctuation">(</span><span class="token variable">$controllerName</span><span class="token punctuation">,</span> <span class="token variable">$actionName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// $dispatch保存控制器產生實體後的物件，我們就可以調用它的方法，</span>
      <span class="token comment">// 也可以像方法中傳入參數，以下等同於：$dispatch-&gt;$actionName($param)</span>
      <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$dispatch</span><span class="token punctuation">,</span> <span class="token variable">$actionName</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 檢測開發環境</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setReporting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">APP_DEBUG</span> <span class="token operator">===</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'display_errors'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'On'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'display_errors'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'Off'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'log_errors'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'On'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 刪除敏感字元</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">stripSlashesDeep</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'stripSlashesDeep'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 檢測敏感字元並刪除</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">removeMagicQuotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token variable">$_GET</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">stripSlashesDeep</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span>
          <span class="token variable">$_POST</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">stripSlashesDeep</span><span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span>
          <span class="token variable">$_COOKIE</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">stripSlashesDeep</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span>
          <span class="token variable">$_SESSION</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">stripSlashesDeep</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 檢測自訂全域變數並移除。因為 register_globals 已經棄用，如果</span>
  <span class="token comment">// 已經棄用的 register_globals 指令被設置為 on，那麼區域變數也將</span>
  <span class="token comment">// 在腳本的全域作用域中可用。 例如， $_POST['foo'] 也將以 $foo 的</span>
  <span class="token comment">// 形式存在，這樣寫是不好的實現，會影響代碼中的其他變數。 相關資訊，</span>
  <span class="token comment">// 參考: http://php.net/manual/zh/faq.using.php#faq.register-globals</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">unregisterGlobals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'register_globals'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'_SESSION'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'_POST'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'_GET'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'_COOKIE'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'_REQUEST'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'_SERVER'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'_ENV'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'_FILES'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token variable">$value</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$var</span> <span class="token operator">===</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 配置資料庫資訊</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setDbConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">define</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'DB_HOST'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">define</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'DB_NAME'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'dbname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">define</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'DB_USER'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">define</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'DB_PASS'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'db'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 自動載入類</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token variable">$classMap</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">classMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$classMap</span><span class="token punctuation">[</span><span class="token variable">$className</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 包含內核檔</span>
          <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$classMap</span><span class="token punctuation">[</span><span class="token variable">$className</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'\\'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean constant">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 包含應用（application目錄）檔</span>
          <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token constant">APP_PATH</span> <span class="token punctuation">.</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'\\'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$className</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'.php'</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">include</span> <span class="token variable">$file</span><span class="token punctuation">;</span>

      <span class="token comment">// 這裡可以加入判斷，如果名為$className的類、介面或者性狀不存在，則在調試模式下拋出錯誤</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 內核檔命名空間映射關係</span>
  <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">classMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>
          <span class="token single-quoted-string string">'fastphp\base\Controller'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token constant">CORE_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/base/Controller.php'</span><span class="token punctuation">,</span>
          <span class="token single-quoted-string string">'fastphp\base\Model'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token constant">CORE_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/base/Model.php'</span><span class="token punctuation">,</span>
          <span class="token single-quoted-string string">'fastphp\base\View'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token constant">CORE_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/base/View.php'</span><span class="token punctuation">,</span>
          <span class="token single-quoted-string string">'fastphp\db\Db'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token constant">CORE_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/db/Db.php'</span><span class="token punctuation">,</span>
          <span class="token single-quoted-string string">'fastphp\db\Sql'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token constant">CORE_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/db/Sql.php'</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下面重點講解主請求方法 <code>route()</code>，它也稱路由方法。<br>路由方法的主要作用是：截取URL，並解析出控制器名稱、方法名稱和URL參數。<br>假設我們的 <code>URL</code> 是這樣：<br><code>yoursite.com/controllerName/actionName/queryString</code><br>當流覽器訪問上面的 <code>URL</code>，<code>route()</code> 從全域變數 <code>$_SERVER['REQUEST_URI']</code> 中獲取到字串 <code>/controllerName/actionName/queryString</code>。<br>然後，會將這個字串分割成三部分：<code>controllerName</code>、<code>actionName</code> 和 <code>queryString</code>。<br>例如，<code>URL</code> 連結為：<code>yoursite.com/item/detail/1/hello</code>，那麼 <code>route()</code> 分割之後，</p>
<ul>
<li><code>ControllerName</code> 名就是：<code>item</code></li>
<li><code>actionName</code> 名就是：<code>detail</code></li>
<li><code>URL</code> 參數就是：array(1, hello)<br>分割完成後，路由方法再產生實體控制器：itemController，並調用其中的detail方法 。</li>
</ul>
</li>
</ul>
<h3 id="5-4-Controller-基礎類別"><a href="#5-4-Controller-基礎類別" class="headerlink" title="5.4 Controller 基礎類別"></a>5.4 Controller 基礎類別</h3><p>接下來，就是在 <code>myphp</code> 中創建 <code>MVC</code> 基類，包括控制器、模型和視圖三個基類。<br>在 <code>myphp/base/</code> 目錄下新建控制器基類，檔案名 <code>Controller.php</code>，功能就是總調度，內容如下：</p>
<ul>
<li><p>程式碼</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">namespace</span> <span class="token package">fastphp<span class="token punctuation">\</span>base</span><span class="token punctuation">;</span>

  <span class="token comment">/**
   * 控制器基類
   */</span>
  <span class="token keyword">class</span> <span class="token class-name">Controller</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$_controller</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$_action</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$_view</span><span class="token punctuation">;</span>

    <span class="token comment">// 構造函數，初始化屬性，並產生實體對應模型</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">,</span> <span class="token variable">$action</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">_controller</span> <span class="token operator">=</span> <span class="token variable">$controller</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">_action</span> <span class="token operator">=</span> <span class="token variable">$action</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">_view</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">View</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">,</span> <span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 分配變數</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">_view</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 渲染視圖</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">_view</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>Controller</code> 類用 <code>assign()</code> 方法實現把變數保存到 <code>View</code> 物件中。<br>這樣，在調用 <code>$this-&gt;render()</code> 後視圖檔就能顯示這些變數。</p>
</li>
</ul>
<h3 id="5-5-Model-基礎類別"><a href="#5-5-Model-基礎類別" class="headerlink" title="5.5 Model 基礎類別"></a>5.5 Model 基礎類別</h3><ul>
<li><p>新建模型基類，繼承自資料庫操作類Sql類。</p>
</li>
<li><p>因為資料庫操作比較複雜，所以SQL操作我們單獨創建一個類。</p>
</li>
<li><p><code>Model</code> 基類涉及到3個類：<code>Model</code> 基類本身，它的父類 <code>SQL</code>，以及提供資料庫連接控制碼的 <code>Db</code> 類。</p>
</li>
<li><p>在 <code>myphp/base/</code> 目錄下新建模型基類檔，名為 <code>Model.php</code>，代碼如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">namespace</span> <span class="token package">myphp<span class="token punctuation">\</span>base</span><span class="token punctuation">;</span>

  <span class="token keyword">use</span> <span class="token package">myphp<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Sql</span><span class="token punctuation">;</span>
  <span class="token keyword">class</span> <span class="token class-name">Model</span> <span class="token keyword">extends</span> <span class="token class-name">Sql</span>
  <span class="token punctuation">{</span>
      <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>
      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
          <span class="token comment">// 獲取資料庫表名</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

             <span class="token comment">// 獲取模型類名稱</span>
             <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">model</span> <span class="token operator">=</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

             <span class="token comment">// 刪除類名最後的 Model 字元</span>
             <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">model</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">model</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

             <span class="token comment">// 資料庫表名與類名一致</span>
             <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">table</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">model</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 `myphp/db/目錄下建立一個資料庫基類 Sql.php，代碼如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
   <span class="token keyword">namespace</span> <span class="token package">fastphp<span class="token punctuation">\</span>db</span><span class="token punctuation">;</span>
   <span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\</span>PDOStatement</span><span class="token punctuation">;</span>

   <span class="token keyword">class</span> <span class="token class-name">Sql</span>
   <span class="token punctuation">{</span>
     <span class="token comment">// 資料庫表名</span>
     <span class="token keyword">protected</span> <span class="token variable">$table</span><span class="token punctuation">;</span>

     <span class="token comment">// 資料庫主鍵</span>
     <span class="token keyword">protected</span> <span class="token variable">$primary</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'id'</span><span class="token punctuation">;</span>

     <span class="token comment">// WHERE和ORDER拼裝後的條件</span>
     <span class="token keyword">private</span> <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span>

     <span class="token comment">// Pdo bindParam()綁定的參數集合</span>
     <span class="token keyword">private</span> <span class="token variable">$param</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token comment">/**
      * 查詢準則拼接，使用方式：
      *
      * $this-&gt;where(['id = 1','and title="Web"', ...])-&gt;fetch();
      * 為防止注入，建議通過$param方式傳入參數：
      * $this-&gt;where(['id = :id'], [':id' =&gt; $id])-&gt;fetch();
      *
      * @param array $where 條件
      * @return $this 當前物件
      */</span>
      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$where</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$param</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">filter</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token single-quoted-string string">' WHERE '</span><span class="token punctuation">;</span>
          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">filter</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">' '</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">param</span> <span class="token operator">=</span> <span class="token variable">$param</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">/**
       * 拼裝排序條件，使用方式：
       *
       * $this-&gt;order(['id DESC', 'title ASC', ...])-&gt;fetch();
       *
       * @param array $order 排序條件
       * @return $this
      */</span>
      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token variable">$order</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">filter</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token single-quoted-string string">' ORDER BY '</span><span class="token punctuation">;</span>
          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">filter</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">','</span><span class="token punctuation">,</span> <span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token comment">// 查詢所有</span>
     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
       <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"select * from `%s` %s"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">filter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token variable">$sth</span> <span class="token operator">=</span> Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">pdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token variable">$sth</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">formatParam</span><span class="token punctuation">(</span><span class="token variable">$sth</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">param</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token keyword">return</span> <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token comment">// 查詢一條</span>
     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"select * from `%s` %s"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">filter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sth</span> <span class="token operator">=</span> Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">pdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sth</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">formatParam</span><span class="token punctuation">(</span><span class="token variable">$sth</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">param</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token comment">// 根據條件 (id) 刪除</span>
     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"delete from `%s` where `%s` = :%s"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">primary</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">primary</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sth</span> <span class="token operator">=</span> Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">pdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sth</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">formatParam</span><span class="token punctuation">(</span><span class="token variable">$sth</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">primary</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$id</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token comment">// 新增數據</span>
     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
       <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"insert into `%s` %s"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">formatInsert</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token variable">$sth</span> <span class="token operator">=</span> Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">pdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token variable">$sth</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">formatParam</span><span class="token punctuation">(</span><span class="token variable">$sth</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token variable">$sth</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">formatParam</span><span class="token punctuation">(</span><span class="token variable">$sth</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">param</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 修改資料</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"update `%s` set %s %s"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">formatUpdate</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">filter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token variable">$sth</span> <span class="token operator">=</span> Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">pdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token variable">$sth</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">formatParam</span><span class="token punctuation">(</span><span class="token variable">$sth</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token variable">$sth</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">formatParam</span><span class="token punctuation">(</span><span class="token variable">$sth</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">param</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 預留位置綁定具體的變數值
     * @param PDOStatement $sth 要綁定的PDOStatement對象
     * @param array $params 參數，有三種類型：
     * 1）如果SQL語句用問號?預留位置，那麼$params應該為
     *    [$a, $b, $c]
     * 2）如果SQL語句用冒號:預留位置，那麼$params應該為
     *    ['a' =&gt; $a, 'b' =&gt; $b, 'c' =&gt; $c]
     *    或者
     *    [':a' =&gt; $a, ':b' =&gt; $b, ':c' =&gt; $c]
     *
     * @return PDOStatement
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">formatParam</span><span class="token punctuation">(</span>PDOStatement <span class="token variable">$sth</span><span class="token punctuation">,</span> <span class="token variable">$params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$params</span> <span class="token keyword">as</span> <span class="token variable">$param</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token variable">$param</span> <span class="token operator">=</span> <span class="token function">is_int</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$param</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token single-quoted-string string">':'</span> <span class="token punctuation">.</span> <span class="token function">ltrim</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token variable">$sth</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 將陣列轉換成插入格式的sql語句</span>
  <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">formatInsert</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token variable">$fields</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$names</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token variable">$fields</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"`%s`"</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token variable">$names</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">":%s"</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token variable">$field</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">','</span><span class="token punctuation">,</span> <span class="token variable">$fields</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">','</span><span class="token punctuation">,</span> <span class="token variable">$names</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"(%s) values (%s)"</span><span class="token punctuation">,</span> <span class="token variable">$field</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 將陣列轉換成更新格式的sql語句</span>
  <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">formatUpdate</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token variable">$fields</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token variable">$fields</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"`%s` = :%s"</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">','</span><span class="token punctuation">,</span> <span class="token variable">$fields</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>應該說，<code>Sql</code> 基類是框架的核心部分。為什麼？<br>因為通過它，我們創建了一個 SQL 抽象層，可以大大減少了資料庫的程式設計工作。<br>雖然 <code>PDO</code> 介面本來已經很簡潔，但是抽象之後框架的可靈活性更高。<br><code>Sql</code> 類裡面有用到 <code>Db:pdo()</code>方法，這是我們創建的Db類，它提供一個PDO單例。<br>在 <code>myphp/db/</code> 目錄下創建 <code>Db.php</code> 檔，內容：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">namespace</span> <span class="token package">fastphp<span class="token punctuation">\</span>db</span><span class="token punctuation">;</span>
  <span class="token keyword">use</span> <span class="token package">PDO</span><span class="token punctuation">;</span>
  <span class="token keyword">use</span> <span class="token package">PDOException</span><span class="token punctuation">;</span>

  <span class="token comment">/**
   * 資料庫操作類。
   * 其$pdo屬性為靜態屬性，所以在頁面執行週期內，
   * 只要一次賦值，以後的獲取還是首次賦值的內容。
   * 這裡就是PDO物件，這樣可以確保運行期間只有一個
   * 資料庫連線物件，這是一種簡單的單例模式
   * Class Db
  */</span>
  <span class="token keyword">class</span> <span class="token class-name">Db</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">pdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">!==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token variable">$dsn</span>    <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'mysql:host=%s;dbname=%s;charset=utf8'</span><span class="token punctuation">,</span> <span class="token constant">DB_HOST</span><span class="token punctuation">,</span> <span class="token constant">DB_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token variable">$option</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_DEFAULT_FETCH_MODE</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token variable">$dsn</span><span class="token punctuation">,</span> <span class="token constant">DB_USER</span><span class="token punctuation">,</span> <span class="token constant">DB_PASS</span><span class="token punctuation">,</span> <span class="token variable">$option</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="5-6-View-基礎類別"><a href="#5-6-View-基礎類別" class="headerlink" title="5.6 View 基礎類別"></a>5.6 View 基礎類別</h3><hr>
<h2 id="PHP-框架自製"><a href="#PHP-框架自製" class="headerlink" title="PHP 框架自製"></a>PHP 框架自製</h2><p><strong>參考文獻:</strong></p>
<ol>
<li><a href="https://www.cnblogs.com/sweng/p/6624827.html">「七天自製PHP框架」第一天:路由與控制器</a></li>
<li><a href="https://www.cnblogs.com/sweng/p/6624845.html">「七天自製PHP框架」第二天:模型與資料庫</a></li>
<li><a href="https://www.cnblogs.com/sweng/p/6666008.html">「七天自製PHP框架」第三天:PHP實現的設計模式</a></li>
<li><a href="https://www.cnblogs.com/sweng/p/7089991.htm">「七天自製PHP框架」第四天:模型關聯</a></li>
</ol>
<p><a href="https://www.bilibili.com/s/video/BV1cg4y1z7Gh">https://www.bilibili.com/s/video/BV1cg4y1z7Gh</a></p>
<h2 id="1-路由與控制器"><a href="#1-路由與控制器" class="headerlink" title="1. 路由與控制器"></a>1. 路由與控制器</h2><h2 id="2-模型與資料庫"><a href="#2-模型與資料庫" class="headerlink" title="2. 模型與資料庫"></a>2. 模型與資料庫</h2><h3 id="2-1-何謂模型"><a href="#2-1-何謂模型" class="headerlink" title="2.1 何謂模型"></a>2.1 何謂模型</h3><p>我們的 <code>WEB</code> 系統一定會和各種資料打交道，實際開發過程中，往往一個類別對應了關聯式資料庫的一張或多張資料表，這裡就會出現兩個問題。</p>
<ol>
<li><p>類別和資料表，一方修改會導致另一方的修改，只要資料表結構不定下來，業務邏輯的開發幾乎沒法開工</p>
</li>
<li><p>獲取資料時會牽涉很多 <code>SQL</code> 語句的拼接，如果資料結構變動，這些 <code>SQL</code> 需要改寫，假如要開發一個溫溼度系統，我們設計兩個 <code>Model</code> 和兩張資料表。</p>
</li>
</ol>
<ul>
<li><p>第一張資料表，表名是 <code>post</code>，儲存博客文章，資料如下：</p>
<table>
<thead>
<tr>
<th align="left">id</th>
<th align="left">content</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">hello</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">world</td>
</tr>
</tbody></table>
</li>
<li><p>第二張資料表，表名是 <code>comment</code>，儲存博客文章的評論，資料如下：</p>
<table>
<thead>
<tr>
<th align="left">id</th>
<th align="left">content</th>
<th align="left">postid</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">c11</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">c12</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">c21</td>
<td align="left">2</td>
</tr>
</tbody></table>
</li>
</ul>
<blockquote>
<p>post 和 comment 是一對多的關係，每一篇博客文章對應了多條評論，每一條評論只屬於一篇文章。</p>
</blockquote>
<ul>
<li><p><code>Model</code> 類的設計之前，我們先定義好三個介面:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">  <span class="token keyword">interface</span> <span class="token class-name">IModel</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$condition</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token operator">-</span> 定義 Model 類別
  
  ```php
  <span class="token keyword">class</span> <span class="token class-name">Model</span> implement IModel<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$table</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> ststic <span class="token variable">$db</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$db</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$condition</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$sql</span><span class="token operator">=</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"select * from %s where %s='%s'"</span><span class="token punctuation">,</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$table</span><span class="token punctuation">,</span><span class="token variable">$condition</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$sql</span><span class="token operator">=</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"select * from %s"</span><span class="token punctuation">,</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>這三個介面分別負責了三種查詢：遍歷查詢，條件查詢，按編號查詢，其實這三種介面的設計並不是最科學的，甚至get方法不過是where的一種特殊形式，但是這樣的設計並不影響我們工程，甚至也有助於理解，我們後期會對這段代碼做改動。<br>之所以在 <code>Model</code> 類裡就完成了 <code>SQL</code> 的拼接，就是希望在子類中不必重複再寫 <code>SQL</code>。</p>
<ul>
<li><p>然後定義 Post 類別</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">PostModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$postid</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$table</span><span class="token operator">=</span><span class="token single-quoted-string string">'post'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>定義 Comment 類別</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">CommentModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$commentid</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$table</span><span class="token operator">=</span><span class="token single-quoted-string string">'comment'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>我們可以在控制器的方法中寫這樣的代碼來完成調用資料</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$post</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PostModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$post</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$arr</span><span class="token operator">=</span><span class="token variable">$post</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$comment</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CommentModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$arr</span><span class="token operator">=</span><span class="token variable">$comment</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="2-2-模型與資料庫"><a href="#2-2-模型與資料庫" class="headerlink" title="2.2 模型與資料庫"></a>2.2 模型與資料庫</h3><ul>
<li><p>先寫一個 <code>DB</code> 抽象類別，規定類需要實現的方法。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DB</span><span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token variable">$IP</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token variable">$user</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token variable">$pwd</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token variable">$connection</span><span class="token punctuation">;</span>

  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<blockquote>
<p>這裡以 <code>MySQL</code> 資料為例，當然你也完全可以實現一套 <code>Sqlite</code> 資料庫的介面。</p>
</blockquote>
<ul>
<li><p>程式碼</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">MySQL</span> <span class="token keyword">extends</span> <span class="token class-name">DB</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">MySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">/*Config*/</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">IP</span><span class="token operator">=</span><span class="token single-quoted-string string">'*'</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">ServerID</span><span class="token operator">=</span><span class="token single-quoted-string string">'*'</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">ServerPassword</span><span class="token operator">=</span><span class="token single-quoted-string string">'*'</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">DataBaseName</span><span class="token operator">=</span><span class="token single-quoted-string string">'*'</span><span class="token punctuation">;</span>
      <span class="token comment">/*End of Config*/</span>

      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token operator">=</span><span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">IP</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">ServerID</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">ServerPassword</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">DataBaseName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Could not connect'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$arr</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$row</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>談到資料庫類，上述的寫法仍不是最好的，因為我們可以使用單例模式來保證DB 類只有一次初始化，來節省硬體資源的開銷。</p>
</blockquote>
</li>
</ul>
<h2 id="3-PHP-實現的設計模式"><a href="#3-PHP-實現的設計模式" class="headerlink" title="3. PHP 實現的設計模式"></a>3. <code>PHP</code> 實現的設計模式</h2><h3 id="3-1-為什麼要使用設計模式？"><a href="#3-1-為什麼要使用設計模式？" class="headerlink" title="3.1 為什麼要使用設計模式？"></a>3.1 為什麼要使用設計模式？</h3><p>設計模式，為了達到 <strong>可複用</strong>這個目標，而設計的一套相互協作的類。</p>
<blockquote>
<p>可以參考《Design Patterns: Elements of Reusable Object-Oriented Software》，四位作者（Gang of Four）在書中列舉了業界聞名的23種設計模式。</p>
</blockquote>
<p>這裡先介紹我們框架要涉及的三種設計模式。</p>
<ul>
<li><p>單例模式（singleton）</p>
<p>單例模式可以保證一個類別只有一個物件實例，常用在資料庫存取類，從而節省硬體資源的消耗。</p>
<p>這裡，我們改寫上面的 <code>MySQL</code> 類別</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">MySQL</span> <span class="token keyword">extends</span> <span class="token class-name">DB</span><span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$instance</span><span class="token operator">=</span><span class="token constant">null</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$instance</span><span class="token operator">==</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$instance</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$instance</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">MySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">/*Config*/</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">IP</span><span class="token operator">=</span><span class="token single-quoted-string string">'*'</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">ServerID</span><span class="token operator">=</span><span class="token single-quoted-string string">'*'</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">ServerPassword</span><span class="token operator">=</span><span class="token single-quoted-string string">'*'</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">DataBaseName</span><span class="token operator">=</span><span class="token single-quoted-string string">'*'</span><span class="token punctuation">;</span>
      <span class="token comment">/*End of Config*/</span>

      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token operator">=</span><span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">IP</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">ServerID</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">ServerPassword</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">DataBaseName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Could not connect'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$arr</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$row</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">connection</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這裡要注意的是，如果產生實體一個 <code>MySQL</code> 類，我們不再寫<br><code>$db=new MySQL();</code></p>
<p>而是這樣：<br><code>$db=MySQL::getInstance();</code></p>
<p>因為只有 <code>getInstance</code> 這個靜態函數，才能保證只調用一次 <code>MySQL</code> 類的構造函數。</p>
</li>
<li><p>面板模式（Facade）<br>因為命名空間的問題，面板模式可以保證一個類別的諸多方法看似是 <strong>一個類別提供的</strong>，這裡我們先設計一個簡單的服務提供者類別:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">echo</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這個類別只有一個 <code>Write</code> 方法，就是把參數列印出來，然後定義一個 <code>Facade</code> 類別。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Facade</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token variable">$classname</span><span class="token punctuation">,</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token variable">$classname</span><span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getFacadeAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">__callstatic</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$instance</span><span class="token operator">=</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getFacadeAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$instance</span><span class="token punctuation">,</span><span class="token variable">$method</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>要理解這個類，我們只要關注最後一個函數，就是 <code>__callstatic</code> 魔術方法。這個方法就是 <code>Facade</code> 類型物件或者其子類在調用他自身沒有定義過的函數時，<br>就會調用 <code>__callstatic</code> 方法，而這個方法最後調用了 <code>call_user_func_array</code> 函數，就是把任務交給提供這項服務的類去完成，同時完成參數的傳遞。</p>
<p>我們再寫一個 <code>Facade</code> 子類別</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">MyFacade</span> <span class="token keyword">extends</span> <span class="token class-name">Facade</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getFacadeAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> ServiceProvider<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這裡注意，子類實現了父類沒有具體實現的getFacadeAccessor方法，這個方法就是要告訴父類的__callstatic方法：<strong>我作為Facade，代表的是什麼哪個類，任務就由他來實現吧</strong>，從語法上看，只是返回了一個表示類名的字串。所以父類起初並不知道它的子類都代表著什麼“服務提供者類”，只有當子類的靜態函數被調用後，因為子類沒有該靜態函數，所以父類的 <code>__callstatic</code> 方法被啟動了。</p>
</li>
<li><p>抽象工廠（Factory）<br>我對抽象工廠有一個粗俗的理解：*物件與字串的對應**，也就是用一個字串就可以創造一個類的物件。這種做法主要用在兩種情況下是很方便的：</p>
<ol>
<li>類名不穩定，會在專案中頻繁修改<br>類名修改，很多時候並不是設計者的<strong>命名潔癖</strong>或者<strong>命名強迫症</strong>導致的修改，而是在項目的不斷反覆運算，發覺這個類設計的不合理。如果這個類用的不頻繁，那麼改個類名只要手工做一些小的修改即可，但是如果這個類通篇存在於代碼之中（假如是資料庫類），那修改工作量就大了，當然，我們也可以對代碼檔使用<strong>字串替換</strong>，但是假如一個 <code>PHP</code> 寫成的專案，<code>PHP</code> 檔有幾十上百個，這也是不合理的事。</li>
<li>類的設計者並不是類的使用者<br>類的設計者和類的使用者不是同一個開發人員，那麼記憶一個字串或許比記憶一個類名要生動的多。我們都學過電腦網路原理，都知道記憶一個功能變數名稱要比記憶一個IP位址要生動的多，這就是 <code>DNS</code> 解決的問題。</li>
</ol>
<p>因為抽象工廠很多教材都有涉及，不再贅述，本文將介紹一下目前非常流行的服務容器。<br>我們希望整個工程項目中，DB類，Session類，FileSystem類“拿來即用”，不用每次繁瑣的初始化，比如寫$db=new DB(arg1,arg2);這類語句，也希望DB等類型的物件像一個“全域”變數一般，在整個程式運行期間，隨時可以調用。<br>服務容器可以讓調用DB等類型的程式師不用知道這個類太多的細節，甚至可以用一個字串的別名來創建這樣一個物件。<br>我們定義一個服務容器類</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Container</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$bindings</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$concrete</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span><span class="token variable">$parameters</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以把服務容器簡單的看成一個全域變數，bind方法就是用關聯陣列把字串和構造函數做綁定。<br>至此，有了服務容器，我們的Model類就要做修改了</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Model</span> <span class="token keyword">implements</span> <span class="token class-name">IModel</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$table</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$container</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$db</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$container</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$container</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'db'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">return</span> MySQL<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$db</span><span class="token operator">=</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$container</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'db'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$condition</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token variable">$sql</span><span class="token operator">=</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"select * from %s where %s='%s'"</span><span class="token punctuation">,</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$table</span><span class="token punctuation">,</span><span class="token variable">$condition</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token variable">$sql</span><span class="token operator">=</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"select * from %s"</span><span class="token punctuation">,</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 觀察上面代碼，我們同時用了單例模式和服務容器。<br> 總結：如果要做一個PHP框架，應該要做好代碼的複用。設計模式一直是很多爭論的焦點，“究竟該不該使用設計模式？”，本文開始，我也努力回避“過於糾結這個問題”，我認為，設計模式有其存在的價值，至少在具體專案中，確實在很多版本反覆運算中節省了工作量，提高工作效率，但是如果在一個小項目中為了“秀一下我會設計模式”而使用設計模式，就不合理了。</p>
</li>
</ul>
<h2 id="4-模型關聯"><a href="#4-模型關聯" class="headerlink" title="4. 模型關聯"></a>4. 模型關聯</h2><p>平時做 <code>PHP</code> 專案常常要和 <strong>新聞發佈</strong>，<strong>博客評論</strong>打交道，而每一次寫功能都會重寫<strong>相似</strong>的代碼，如果能夠把這一塊代碼做好重用，以後只需修改幾個參數就能用在另一個項目，就可以很短時間完成一個功能。</p>
<p>當然使用 <code>PHP</code> 框架，會讓你工作效率得到成倍的提升，但是，你的學習成本也就跟著上去了。</p>
<p>最初使用 <code>Laravel</code> 框架的時候，覺得 <code>Eloquent</code> 的語法實現得很美，比如：</p>
<ul>
<li><p>範例</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$comments</span> <span class="token operator">=</span> App\<span class="token package">Post</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">comments</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$comments</span> <span class="token keyword">as</span> <span class="token variable">$comment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如何做模型關聯。</p>
<p>模型，簡單點說，就是把資料庫中這麼多表格抽象成若干個物件，使得開發的過程中，不用再關心資料表的結構，而是專心類別和物件的設計。<br>就拿在微信朋友圈發消息來說，這裡涉及到了3個物件：消息（純文字，圖片，或者圖文），點贊，評論。</p>
<p><img src="images/php_mvc/model.png" alt=" "></p>
<p>根據這個圖，我們設計三個類：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">MessageModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token variable">$messageid</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token single-quoted-string string">'message_list'</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$table</span><span class="token operator">=</span><span class="token single-quoted-string string">'message'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LikeModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token variable">$likeid</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token single-quoted-string string">'like_list'</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$table</span><span class="token operator">=</span><span class="token single-quoted-string string">'messagelike'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CommentModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$commentid</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token single-quoted-string string">'comment_list'</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$table</span><span class="token operator">=</span><span class="token single-quoted-string string">'reply'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這是典型的 <strong>一對多</strong> 的模型，也就是一個 <code>Message</code> 物件對應了多個 <code>Like</code> 物件和 <code>Comment</code> 物件，而一個 <code>Like</code> 物件或者 <code>Comment</code> 只對應了一個 <code>Message</code> 物件。</p>
<p>有人說，為什麼不用 <code>SQL</code> 中的 <code>where</code> 或者 <code>join</code> 來查詢？<br>因為我實在厭倦了拼接 <code>SQL</code>，實在太無趣了。<br>關鍵是查詢完得到的多維陣列，還需要寫一段代碼來組裝成物件陣列，讓我不得不思考怎麼避免這低效勞動。<br>我的方案是每一個 <code>Model</code> 都實現這樣的介面，讓你儘量少寫 <code>select</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$condition</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token variable">$sql</span><span class="token operator">=</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"select * from %s where %s='%s'"</span><span class="token punctuation">,</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$table</span><span class="token punctuation">,</span><span class="token variable">$condition</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token variable">$sql</span><span class="token operator">=</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"select * from %s limit %s"</span><span class="token punctuation">,</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$table</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token variable">$sql</span><span class="token operator">=</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"select * from %s"</span><span class="token punctuation">,</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那如果要實現一對多，怎麼辦？ <code>Laravel</code> 使用了 <code>trait</code> 特性，讓 <code>Model</code> 來 <code>use</code> 這個特性。這裡我們簡單的做一個函數：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">HasMany</span><span class="token punctuation">(</span>Model <span class="token variable">$model</span><span class="token punctuation">,</span><span class="token variable">$foreignkey</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token variable">$this</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$model</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$foreignkey</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$model</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$foreignkey</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
              <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$model</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$model</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>對於三張資料表：Message，Like，Comment 來說，Message的主鍵是msgid，而msgid同時也是Like和Comment這兩張表格的外鍵，靠著外鍵，三張表形成了一對多的關係。</p>
<p>所以憑藉這樣的一個關聯陣列的操作，我們把Like和Comment陣列作為一個關聯陣列的Value塞入Message陣列中的一個元素。<br>最後我們測試一下效果：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$messageModel</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MessageModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$messageModel</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$data</span><span class="token operator">=</span><span class="token variable">$messageModel</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$likeModel</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LikeModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$likeModel</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$data</span><span class="token operator">=</span><span class="token variable">$likeModel</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$commentModel</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CommentModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$commentModel</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$data</span><span class="token operator">=</span><span class="token variable">$commentModel</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$messageModel</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">HasMany</span><span class="token punctuation">(</span><span class="token variable">$likeModel</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'msgid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$messageModel</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">HasMany</span><span class="token punctuation">(</span><span class="token variable">$commentModel</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'msgid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$messageModel</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>最後使用 <code>JSON</code> 格式輸出，結構一目了然，給前端調用也很便利</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token double-quoted-string string">"0"</span> <span class="token punctuation">:</span> <span class="token double-quoted-string string">"2017/6/25"</span>





  <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>php &amp; mysql</title>
    <url>/php-mysql/20200930-php-mysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="MySQL-資料庫簡介"><a href="#MySQL-資料庫簡介" class="headerlink" title="MySQL 資料庫簡介"></a>MySQL 資料庫簡介</h2><p><code>MySQL</code> 是一種開放原始程式碼的關係型數據庫管理系統（RDBMS），使用最常用的資料庫管理語言–結構化查詢語言（SQL）進行資料庫管理。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/2020-08-23-15-21-57.png" class="nofancybox img-center">

<p><code>MySQL</code> 是開放原始程式碼的，因此任何人都可以在 <code>General Public License</code> 的許可下下載並根據個性化的需要對其進行修改。</p>
<p><code>MySQL</code><br>因為其速度、可靠性和適應性而備受關注。大多數人都認為在不需要事務化處理的情況下，<code>MySQL</code> 是管理內容最好的選擇。</p>
<p>時至今日 <code>MySQL</code> 和 <code>php</code> 的結合絕對是完美.很多大型的網站也用到 <code>Mysql</code> 資料庫.</p>
<h2 id="MySQL資料庫的視覺化工具"><a href="#MySQL資料庫的視覺化工具" class="headerlink" title="MySQL資料庫的視覺化工具"></a>MySQL資料庫的視覺化工具</h2><h3 id="1-1-phpmyadmin"><a href="#1-1-phpmyadmin" class="headerlink" title="1.1. phpmyadmin"></a>1.1. phpmyadmin</h3><p style="margin-bottom:130px;"><a href="https://www.phpmyadmin.net/"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/phpmyadmin-logo.png" class="img-logo nofancybox"></a></p>

<h3 id="1-2-Navicat-for-MySQL"><a href="#1-2-Navicat-for-MySQL" class="headerlink" title="1.2. Navicat for MySQL"></a>1.2. Navicat for MySQL</h3><p style="margin-bottom:100px;"><a href="https://www.navicat.com/cht/products/navicat-for-mysql"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/navicat_logo_rainbow.png" class="img-logo nofancybox"></a></p>

<h3 id="1-3-MySQL-Workbench"><a href="#1-3-MySQL-Workbench" class="headerlink" title="1.3. MySQL Workbench"></a>1.3. MySQL Workbench</h3><p style="margin-bottom:150px;"><a href="https://dev.mysql.com/downloads/workbench/"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/MySQLWorkbench.png" class="img-logo nofancybox"></a></p>

<blockquote>
<p>ps：需要說明一點就是無論是 <code>phpmyadmin</code> 也好還是 <code>navivat for mysql</code> 或 <code>MySQL Workbench</code> 也好，兩者都僅是一個對於資料庫操作和管理的工具，他們並不是資料庫本身。</p>
</blockquote>
<p>練習:<br>  通過 <code>phpmyadmin</code> 工具，新建一個資料庫名為 <code>libraryDB</code></p>
<ul>
<li>為這個資料庫添加一張表，表中有 5 個欄位，分別為<br>【bookId】【bookName】【bookAuthor】【bookPrice】【bookNum】</li>
<li>查詢表中所有條目。</li>
<li>添加兩個條目，並再次查詢所有條目。</li>
<li>修改其中 <code>Id</code> 是 2 的條目，價格改成 300，數量改成 1000。<br>修改完畢後查詢 <code>id</code> 是 2 的條目。</li>
<li>刪除 <code>id</code> 是 1 的條目。</li>
</ul>
<h2 id="php-連接資料庫與基本操作配置"><a href="#php-連接資料庫與基本操作配置" class="headerlink" title="php 連接資料庫與基本操作配置"></a>php 連接資料庫與基本操作配置</h2><ul>
<li><p>(1) <code>php</code> 創建資料庫【連接】<br>語法：Object <font color="red">mysqli_connect(“功能變數名稱”,”DB帳號”,”DB密碼”,”DB庫名稱”)</font><br>例子：<code>$con = mysqli_connect('localhost','root','','frankdb');</code></p>
</li>
<li><p>(2)向 <code>DB</code> 中插入資料時包含中文出現亂碼的解決方案<br>語法：<font color="red">mysqli_query($con,”set names utf8”);</font><br>說明：設置成功會返回 <code>1</code>，根據實際情況並不一定必須保存返回結果。</p>
</li>
<li><p>(3)設置 <code>client</code> 端和 <code>server</code> 端保持字元編碼一致<br>語法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"set character_set_client=utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"set character_set_results=utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>(4)執行 <code>sql</code> 語句<br>語法：<font color="red">$結果 = $DB連接-&gt;query(sql語句);</font><br>例子： <code>var_dump($result = $con-&gt;query($sql));</code></p>
</li>
</ul>
<h2 id="php-操作資料庫【增刪改查】操作"><a href="#php-操作資料庫【增刪改查】操作" class="headerlink" title="php 操作資料庫【增刪改查】操作"></a>php 操作資料庫【增刪改查】操作</h2><ul>
<li>(1) 使用 <code>sql</code> 語句基本【範本】<br>提供範本並不是說以後我們操作資料庫就都採用這種結構，而是對於初學者而言我們在沒有接觸過資料庫的情況下，這樣的範本能夠説明我們快速的上手從php中操作mysql資料庫。</li>
</ul>
<p> a. 建立連接<br> b. 判斷是否連接<br> c. 設置編碼<br> d. <font color="red">創建sql語句</font><br> e. <font color="red">執行sql語句，並獲得結果</font><br> f. 判斷結果條數<br> g. 拼湊結果<br> h. json化返回</p>
  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'localhost'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'root'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//a.建立連接</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                                      <span class="token comment">//b.判斷是否連接</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'set character_set_client=utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//c.設置編碼</span>
  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'set character_set_results=utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'select * from friendslist where 1'</span><span class="token punctuation">;</span>                  <span class="token comment">//d.創建 sql 語句</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$con</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//e.執行sql語句，並獲得結果</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">num_rows</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                     <span class="token comment">//f.判斷結果條數</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$jsonInfo</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$row</span><span class="token operator">=</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//g.拼湊結果</span>
      <span class="token variable">$jsonInfo</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$jsonInfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//h.json化返回</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>(2) sql查詢語句<br>描述：表示去資料庫中指定的表內根據條件查詢指定的內容<br>語法： <code>$sql = "select 【信息】 from 【哪張表】 where 【查詢準則】";</code><br>說明：</p>
<ul>
<li><p>a.【信息】有兩種寫法：<br>一是寫*星號，代表查詢所有欄位對應的資訊</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"select * from friendslist where 1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>二是寫指定欄位，代表查詢某個欄位對應資訊，如果有多個則用逗號隔開</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"select friendsName from friendslist where 1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>b.【哪張表】就是直接寫出對應表的名字即可</p>
</li>
<li><p>c.【查詢準則】有兩種寫法：<br>一是無條件查詢，那麼直接寫1即可。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"select * from class where 1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>二是有條件查詢，在後面寫出額外的查詢準則。如果有多個用and或or連接</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"select * from class where cName='aby'"</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"select * from class where cName='aby' and cSex='f';
<span class="token interpolation"><span class="token variable">$sql</span></span> = "</span>select <span class="token operator">*</span> from <span class="token keyword">class</span> <span class="token class-name">where</span> cSex<span class="token operator">=</span><span class="token single-quoted-string string">'m'</span> <span class="token keyword">or</span> cAge<span class="token operator">=</span><span class="token number">18</span>"<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>(3) sql插入語句</p>
<p>語法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"insert into 表名(欄位1,欄位2,...) values ('值1','值2',...)"</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"insert into 表名 values(值1,值2,...)"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>(4) sql修改語句</p>
<p>語法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"update 表名 set 欄位1='新值1',… where id=<span class="token interpolation"><span class="token variable">$id</span></span>"</span><span class="token punctuation">,</span>…<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<p>注意：修改的關鍵字是 <code>update</code>，而不是 <code>updata</code>！！<br>注意：<code>where</code>後面的條件可以和修改的內容相同。</p>
<ul>
<li><p>(5) sql刪除語句</p>
<p>語法：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">'delete from 表名 where 條件'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>(6) html與php+MySQL完成前後端交互</p>
<pre><code>&lt;img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/2020-08-23-16-08-59.png" width=60% height=40% class="nofancybox img-center" /&gt;</code></pre>
</li>
</ul>
<p><strong>前端關鍵部分代碼：【ajax請求】</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  type<span class="token operator">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>
  url<span class="token operator">:</span><span class="token string">'add.php'</span><span class="token punctuation">,</span>
  dataType<span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span><span class="token punctuation">{</span>
   friendsName<span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.fname'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   …
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">error</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>後臺部分代碼：【 php 接受 ajax request，並通過 echo 給出 response】</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'localhost'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'root'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'frankdb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$success</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"code"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token double-quoted-string string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$error</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"code"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token double-quoted-string string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'set character_set_client=utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'set character_set_results=utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token variable">$fname</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'friendsName'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  …
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$con</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"insert into friendslist values(<span class="token interpolation"><span class="token variable">$fname</span></span>,…)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$success</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>(7) 登錄案例</p>
</li>
</ul>
<p>對於登錄案例的業務邏輯各位應當都不陌生，但具體的實現過程需要我們細化到語句才可以。在本例中我們並不過多的考慮在實現登錄過程中前端語法部分對使用者的要求，而把重心暫時放在如何實現WEB請求回應上面。而我們已經瞭解並掌握的部分有：</p>
<p>(1)將使用者輸入資訊發送給後臺——– <code>ajax</code> 請求實現<br>(2)後臺接收使用者發送的內容——– <code>php</code>中的 <code>$_POST</code> 或 <code>$_GET</code> 對象獲取<br>(3)在資料庫中搜索目標條目——– <code>sql</code> 查詢語句<br>(4)返回前端response——– <code>echo</code> 語句返回 <code>json_encode</code> 內容</p>
<p>因此我們亟待解決的問題就只剩下了一個：</p>
<p><font color="red">使用者輸入併發送給後臺的資料，應如何判斷其是合法帳戶？</font></p>
<p>答案呼之欲出：</p>
<p>   資料庫中不存在和使用者輸入的資訊相匹配的條目，則該帳戶不存在，即登錄失敗。而如果存在則登錄成功。</p>
<p>操作資料庫的基本步驟大多相同，只不過是sql語句結構的區別。不同的sql語句能夠完成不同的功能，因此學習如何操作資料庫實際上就是在學習如何編寫sql語句。</p>
<h2 id="html與php-MySQL完成前後端交互"><a href="#html與php-MySQL完成前後端交互" class="headerlink" title="html與php+MySQL完成前後端交互"></a>html與php+MySQL完成前後端交互</h2><h3 id="CRUD-範例"><a href="#CRUD-範例" class="headerlink" title="CRUD 範例"></a>CRUD 範例</h3><p>資料操縱語言（Data Manipulation Language, DML）是用於資料庫操作，<br>歐美地區的開發人員把這四種指令，以「CRUD」(分別為 Create, Read, Update,<br>Delete英文四字首字母縮略的術語)來稱呼；而亞洲地區使用漢語的開發人員，或可能以四個漢字：增、查、改、刪 來略稱。  </p>
<h4 id="1-創建資料庫"><a href="#1-創建資料庫" class="headerlink" title="1. 創建資料庫**"></a>1. 創建資料庫**</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> class<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-創建資料表"><a href="#2-創建資料表" class="headerlink" title="2. 創建資料表**"></a>2. 創建資料表**</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>class<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>students<span class="token punctuation">`</span> <span class="token punctuation">(</span>
   <span class="token punctuation">`</span>cID<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> ZEROFILL <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token punctuation">,</span>
   <span class="token punctuation">`</span>cName<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
   <span class="token punctuation">`</span>cSex<span class="token punctuation">`</span> <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'F'</span> <span class="token punctuation">,</span>
   <span class="token punctuation">`</span>cBirthday<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
   <span class="token punctuation">`</span>cEmail<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
   <span class="token punctuation">`</span>cPhone<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
   <span class="token punctuation">`</span>cAddr<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
   <span class="token punctuation">`</span>cHeight<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
   <span class="token punctuation">`</span>cWeight<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>cID<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>PS:<br>  長度值:     指輸入的字數<br>  編碼與排序: 數字或英文字母不用指定沒問題，中文必要，沒設的話會繼承資料庫的設定。<br>  最後用瀏覽來檢視設定正確與否。</p>
</blockquote>
<h4 id="3-插入20筆資料"><a href="#3-插入20筆資料" class="headerlink" title="3. 插入20筆資料**"></a>3. 插入20筆資料**</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>students<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>cName<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>cSex<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>cBirthday<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>cEmail<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>cPhone<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>cAddr<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>cHeight<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>cWeight<span class="token punctuation">`</span><span class="token punctuation">)</span> 
<span class="token keyword">VALUES</span>
   <span class="token punctuation">(</span><span class="token string">'簡奉君'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'1987-04-04'</span><span class="token punctuation">,</span> <span class="token string">'elven@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0922988876'</span><span class="token punctuation">,</span> <span class="token string">'台北市濟洲北路12號'</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'黃靖輪'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'1987-07-01'</span><span class="token punctuation">,</span> <span class="token string">'jinglun@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0918181111'</span><span class="token punctuation">,</span> <span class="token string">'台北市敦化南路93號5樓'</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'潘四敬'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'1987-08-11'</span><span class="token punctuation">,</span> <span class="token string">'sugie@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0914530768'</span><span class="token punctuation">,</span> <span class="token string">'台北市中央路201號7樓'</span><span class="token punctuation">,</span> <span class="token number">162</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'賴勝恩'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'1984-06-20'</span><span class="token punctuation">,</span> <span class="token string">'shane@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0946820035'</span><span class="token punctuation">,</span> <span class="token string">'台北市建國路177號6樓'</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'黎楚寧'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'1988-02-15'</span><span class="token punctuation">,</span> <span class="token string">'ivy@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0920981230'</span><span class="token punctuation">,</span> <span class="token string">'台北市忠孝東路520號6樓'</span><span class="token punctuation">,</span> <span class="token number">164</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'蔡中穎'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'1987-05-05'</span><span class="token punctuation">,</span> <span class="token string">'zhong@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0951983366'</span><span class="token punctuation">,</span> <span class="token string">'台北市三民路1巷10號'</span><span class="token punctuation">,</span> <span class="token number">172</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'徐佳螢'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'1985-08-30'</span><span class="token punctuation">,</span> <span class="token string">'lala@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0918123456'</span><span class="token punctuation">,</span> <span class="token string">'台北市仁愛路100號'</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'林雨媗'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'1986-12-10'</span><span class="token punctuation">,</span> <span class="token string">'crystal@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0907408965'</span><span class="token punctuation">,</span> <span class="token string">'台北市民族路204號'</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'林心儀'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'1988-12-01'</span><span class="token punctuation">,</span> <span class="token string">'peggy@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0916456723'</span><span class="token punctuation">,</span> <span class="token string">'台北市建國北路10號'</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'王燕博'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'1993-08-10'</span><span class="token punctuation">,</span> <span class="token string">'albert@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0918976588'</span><span class="token punctuation">,</span> <span class="token string">'台北市北環路2巷80號'</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'簡奉君1'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'1967-04-04'</span><span class="token punctuation">,</span> <span class="token string">'elven1@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0922988871'</span><span class="token punctuation">,</span> <span class="token string">'台北市濟洲北路12號1'</span><span class="token punctuation">,</span> <span class="token number">161</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'黃靖輪1'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'1967-07-01'</span><span class="token punctuation">,</span> <span class="token string">'jinglun1@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0918181112'</span><span class="token punctuation">,</span> <span class="token string">'台北市敦化南路93號5樓1'</span><span class="token punctuation">,</span> <span class="token number">172</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'潘四敬1'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'1967-08-11'</span><span class="token punctuation">,</span> <span class="token string">'sugie1@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0914530763'</span><span class="token punctuation">,</span> <span class="token string">'台北市中央路201號7樓1'</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'賴勝恩1'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'1964-06-20'</span><span class="token punctuation">,</span> <span class="token string">'shane1@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0946820034'</span><span class="token punctuation">,</span> <span class="token string">'台北市建國路177號6樓1'</span><span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'黎楚寧1'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'1968-02-15'</span><span class="token punctuation">,</span> <span class="token string">'ivy1@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0920981235'</span><span class="token punctuation">,</span> <span class="token string">'台北市忠孝東路520號6樓1'</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'蔡中穎1'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'1967-05-05'</span><span class="token punctuation">,</span> <span class="token string">'zhong1@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0951983367'</span><span class="token punctuation">,</span> <span class="token string">'台北市三民路1巷10號1'</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'徐佳螢1'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'1965-08-30'</span><span class="token punctuation">,</span> <span class="token string">'lala1@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0918123458'</span><span class="token punctuation">,</span> <span class="token string">'台北市仁愛路100號1'</span><span class="token punctuation">,</span> <span class="token number">157</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'林雨媗1'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'1966-12-10'</span><span class="token punctuation">,</span> <span class="token string">'crystal1@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0907408969'</span><span class="token punctuation">,</span> <span class="token string">'台北市民族路204號1'</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'林心儀1'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'1968-12-01'</span><span class="token punctuation">,</span> <span class="token string">'peggy1@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0916456720'</span><span class="token punctuation">,</span> <span class="token string">'台北市建國北路10號1'</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span><span class="token string">'王燕博1'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'1963-08-10'</span><span class="token punctuation">,</span> <span class="token string">'albert1@superstar.com'</span><span class="token punctuation">,</span> <span class="token string">'0918976581'</span><span class="token punctuation">,</span> <span class="token string">'台北市北環路2巷80號1'</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-新建-php-mysql-basic-php"><a href="#4-新建-php-mysql-basic-php" class="headerlink" title="4. 新建 php-mysql-basic.php"></a>4. 新建 <code>php-mysql-basic.php</code></h4><p>   <strong>需先連線</strong></p>
<ul>
<li><p>第一種寫法</p>
 <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">;</span>
  <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">;</span>
  <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost:3306"</span><span class="token punctuation">;</span>
  <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"class"</span><span class="token punctuation">;</span>
  <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"3306"</span><span class="token punctuation">;</span>

  <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span><span class="token variable">$user</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"資料庫連線錯誤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>第二種寫法</p>
 <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">;</span>
  <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">;</span>
  <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span>
  <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"class"</span><span class="token punctuation">;</span>
  <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"3306"</span><span class="token punctuation">;</span>

  <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span><span class="token variable">$user</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$db</span><span class="token punctuation">,</span><span class="token variable">$port</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"資料庫連線錯誤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>輸入網址: <code>http://localhost/php-mysql-basic.php</code> 若連線正常，畫面會是一片空白。</p>
</blockquote>
</li>
</ul>
<p><strong>5. 選擇資料庫</strong></p>
   <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">;</span>
  <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">;</span>
  <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost:3306"</span><span class="token punctuation">;</span>
  <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"class"</span><span class="token punctuation">;</span>
  <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"3306"</span><span class="token punctuation">;</span>

  <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span><span class="token variable">$user</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"資料庫連線錯誤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  @<span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  @<span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"set names utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//資料庫編碼</span>
  @<span class="token function">mysqli_set_charset</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//字元集</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>6. 資料庫查詢</strong></p>
   <pre class="line-numbers language-php" data-language="php"><code class="language-php">   <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
     <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT * FROM `students`"</span><span class="token punctuation">;</span>    <span class="token comment">//大小寫無關</span>
     <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//執行 SQL 語法, 查詢結果放到  $result</span>

     <span class="token comment">//取出資料庫資料</span>
     <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//取出一筆資料</span>

     <span class="token comment">//先用簡單方式取出</span>
     <span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cID'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cName'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cSex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cBirthday'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cEmail'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cPhone'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> 
<span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cAddr'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cHeight'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cWeight'</span><span class="token punctuation">]</span>
   <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>   結果:  畫面如下，呈現亂碼。<br>   <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/2020-08-23-17-44-04.png" width="60%" height="40%" class="nofancybox img-center"></p>
<p>   問題: 取出中文字出問題<br>   網頁: <meta charset="utf-8"> 是 UTF-8; 資料庫編碼也採: UTF-8, 但有些瀏覽器會判斷錯誤，確認抓出資料時是用<br><code>UTF-8</code> 的方式再編碼; 所以在從連線後 <code>mysqli_select_db($conn, $db);</code>, 需在這裡後面加入:</p>
   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysqli_query<span class="token punctuation">(</span>$conn<span class="token punctuation">,</span> <span class="token string">"set Names utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>   在檢視頁面是否中文正常顯示。<br>   <br><br>   再增加資料庫連線字元集設定:<br>   <code>mysqli_set_charset($conn, "utf8");</code><br>   <br></p>
<p>   <strong>註解掉上面的語法</strong></p>
   <pre class="line-numbers language-php" data-language="php"><code class="language-php">   <span class="token comment">//$row = mysqli_fetch_assoc($result);  //取出一筆資料</span>
   <span class="token comment">//echo $row['cID'] . $row['cName'] . $row['cSex']. $row['cBirthday']. $row['cEmail']. $row['cPhone']. </span>
<span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cAddr'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cHeight'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cWeight'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>   <strong>改用</strong></p>
   <pre class="line-numbers language-php" data-language="php"><code class="language-php">   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cID'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cName'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cSex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cBirthday'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cEmail'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cPhone'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> 
<span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cAddr'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cHeight'</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cWeight'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>測試: 利用 <code>phpmyadmin</code>  新增加一筆資料後，再執行程式看結果會不會也多一筆。</p>
</blockquote>
<p><strong>7. 加入表格</strong><br>將上面 <code>php-mysql-basic.php</code> 的 <code>while{}</code> 部分, 改寫到 <code>&lt;body&gt;</code> 內。 因要用  <code>Table</code> 表示，在  <code>&lt;?php  ..  ?&gt;</code><br>裡面寫較有<br>問題。</p>
<p>第一種方法: 將 <code>html</code> 寫在  <code>&lt;?php  :  ?&gt;</code> 內:<br>方法: 將上面 <code>php-mysql-basic.php</code> 另存新檔成 <code>php-mysql-1.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">table, td</span><span class="token punctuation">{</span>
    <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>學生資料管理系統<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 資料內容 --&gt;</span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;table border='1' align='center'&gt;"</span><span class="token punctuation">;</span>
<span class="token comment">//表格表頭</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;tr&gt;
        &lt;th&gt;座號&lt;/th&gt;
        &lt;th&gt;姓名&lt;/th&gt;
        &lt;th&gt;性別&lt;/th&gt;
        &lt;th&gt;生日&lt;/th&gt;
        &lt;th&gt;電子郵件&lt;/th&gt;
        &lt;th&gt;電話&lt;/th&gt;
        &lt;th&gt;住址&lt;/th&gt;
        &lt;th&gt;身高&lt;/th&gt;
        &lt;th&gt;體重&lt;/th&gt;
     &lt;/tr&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row_result</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;tr&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cID"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cName'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cSex'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cBirthday'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cEmail'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cPhone'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cAddr'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cHeight'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cWeight'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/tr&gt;"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/table&gt;"</span><span class="token punctuation">;</span>
<span class="token function">mysqli_free_result</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//關閉資料庫連接</span>
 <span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第二種方法: 將 <code>php</code> 寫在  <code>html</code> 內:<br>方法: 將上面 <code>php-mysql-basic.php</code> 另存新檔成 <code>php-mysql-2.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">table, td</span><span class="token punctuation">{</span>
    <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>學生資料管理系統<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 表格表頭 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>座號<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>性別<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>生日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>電子郵件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>電話<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>住址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>身高<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>體重<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row_result</span><span class="token operator">=</span><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token delimiter important">?&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cID"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cName"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cSex"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cBirthday"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cEmail"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cPhone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cAddr"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cHeight"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cWeight"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
   <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">}</span> <span class="token delimiter important">?&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>8. 將資料庫連線獨立成外部檔案處理</strong><br><code>connDB.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">;</span>
<span class="token variable">$host</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost:3306"</span><span class="token punctuation">;</span>
<span class="token variable">$db</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"class"</span><span class="token punctuation">;</span>
<span class="token variable">$port</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"3306"</span><span class="token punctuation">;</span>

<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"資料庫連線錯誤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
@<span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
@<span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"set names utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//資料庫編碼</span>
@<span class="token function">mysqli_set_charset</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字元集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 <code>&lt;h1 align="center"&gt;學生資料管理系統&lt;/h1&gt;</code> 下面新增:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>目前資料筆數：<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$total_records</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> 
<span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php-mysql-2-add.php<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>新增學生資料<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在 <code>&lt;td&gt;&lt;?php echo $row["cWeight"]; ?&gt;&lt;/td&gt;</code> 下面新增:</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>php-mysql-2-update.php?cID=<span class="token punctuation">"</span>.$row_result[<span class="token punctuation">"</span>cID<span class="token punctuation">"</span>].<span class="token punctuation">"</span><span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>php-mysql-2-del.php?cID=<span class="token punctuation">"</span>.$row_result[<span class="token punctuation">"</span>cID<span class="token punctuation">"</span>].<span class="token punctuation">"</span><span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>刪除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>修改 <code>php-mysql-2.php</code>, 刪除下面內容:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">;</span>
<span class="token variable">$host</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost:3306"</span><span class="token punctuation">;</span>
<span class="token variable">$db</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"class"</span><span class="token punctuation">;</span>
<span class="token variable">$port</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"3306"</span><span class="token punctuation">;</span>

<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"資料庫連線錯誤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
@<span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
@<span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"set names utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//資料庫編碼</span>
@<span class="token function">mysqli_set_charset</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//字元集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>換成:<br><code>require_once "connDB.php";</code></p>
<p><strong>9. 分頁處理</strong><br>在 <code>$result = mysqli_query($conn, $sql);</code> 後面加入以下程式碼:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//分頁</span>
<span class="token comment">//預設每頁筆數</span>
<span class="token variable">$pageRow_records</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">//預設頁數</span>
<span class="token variable">$num_pages</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">//若已經有翻頁，將頁數更新</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$num_pages</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//本頁開始記錄筆數 = (頁數-1)*每頁記錄筆數</span>
<span class="token variable">$startRow_records</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$num_pages</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token variable">$pageRow_records</span><span class="token punctuation">;</span>
<span class="token comment">//未加限制顯示筆數的SQL敘述句</span>
<span class="token variable">$sql_query</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT * FROM `students`"</span><span class="token punctuation">;</span>
<span class="token comment">//加上限制顯示筆數的SQL敘述句，由本頁開始記錄筆數開始，每頁顯示預設筆數</span>
<span class="token variable">$sql_query_limit</span> <span class="token operator">=</span> <span class="token variable">$sql_query</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">" LIMIT "</span> <span class="token punctuation">.</span> <span class="token variable">$startRow_records</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">", "</span> <span class="token punctuation">.</span> <span class="token variable">$pageRow_records</span><span class="token punctuation">;</span>
<span class="token comment">//以加上限制顯示筆數的SQL敘述句查詢資料到 $result 中</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql_query_limit</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//以未加上限制顯示筆數的SQL敘述句查詢資料到 $all_result 中</span>
<span class="token variable">$all_result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql_query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//計算總筆數</span>
<span class="token variable">$total_records</span> <span class="token operator">=</span> <span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$all_result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//計算總頁數=(總筆數/每頁筆數)後無條件進位。</span>
<span class="token variable">$total_pages</span> <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token variable">$total_records</span> <span class="token operator">/</span> <span class="token variable">$pageRow_records</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 <code>php-mysql-2.php</code> 的 <code>&lt;/body&gt;</code> 前面加入以下:</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token prolog">&lt;?php if ($num_pages &gt; 1) { // 若不是第一頁則顯示 ?&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php-mysql-2.php?page=1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>第一頁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php-mysql-2.php?page=&lt;?php echo $num_pages-1;?&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>上一頁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token prolog">&lt;?php } ?&gt;</span>
    <span class="token prolog">&lt;?php if ($num_pages &lt; $total_pages) { // 若不是最後一頁則顯示 ?&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php-mysql-2.php?page=&lt;?php echo $num_pages+1;?&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>下一頁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php-mysql-2.php?page=&lt;?php echo $total_pages;?&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>最後頁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token prolog">&lt;?php } ?&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>頁數：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token prolog">&lt;?php
    for($i=1;$i&lt;=$total_pages;$i++){
       echo "&lt;td&gt;";
       if($i==$num_pages)
         echo $i;
       else
         echo "&lt;a href='php-mysql-2.php?page=$i'&gt;$i&lt;/a&gt;";
         echo "&lt;/td&gt;";  
       }
    ?&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>10. 新增資料的處理(Create)</strong><br>新增檔案 <code>php-mysql-2-add.php</code></p>
<p>前端畫面處理:</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>學生資料管理系統<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>學生資料管理系統 - 新增資料<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php-mysql-2.php<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>回主畫面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formAdd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formAdd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>欄位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>資料<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cName<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cName<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>性別<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cSex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>男
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cSex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>F<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>生日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cBirthday<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cBirthday<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>電子郵件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cEmail<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cEmail<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>電話<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cPhone<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cPhone<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>住址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cAddr<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cAddr<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>身高<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cHeight<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cHeight<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>   
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>體重<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cWeight<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cWeight<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>新增資料<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button2<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重新填寫<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>後端畫面處理:<br>在 <code>&lt;html&gt;</code> 標籤前面加入後端處理。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"action"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"action"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token double-quoted-string string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"connDB.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$sql_query</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO `students` (`cName` ,`cSex` ,`cBirthday` ,`cEmail` ,`cPhone` 
,`cAddr`,`cHeight`,`cWeight`) VALUES ("</span><span class="token punctuation">;</span>
    <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"'"</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cName"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"',"</span><span class="token punctuation">;</span>
    <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"'"</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cSex"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"',"</span><span class="token punctuation">;</span>
    <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"'"</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cBirthday"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"',"</span><span class="token punctuation">;</span>
    <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"'"</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cEmail"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"',"</span><span class="token punctuation">;</span>
    <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"'"</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cPhone"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"',"</span><span class="token punctuation">;</span>
    <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"'"</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cAddr"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"')"</span><span class="token punctuation">;</span>
    <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"'"</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cHeight"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"')"</span><span class="token punctuation">;</span>
    <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"'"</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cWeight"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"')"</span><span class="token punctuation">;</span>

    <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql_query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//關閉資料庫連接</span>
    <span class="token comment">//重新導向回到主畫面</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: php-mysql-2.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>11. 更新資料的處理(Update)</strong><br>新增檔案: <code>php-mysql-2-update.php</code></p>
<p>前端畫面處理:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>學生資料管理系統<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>學生資料管理系統 - 修改資料<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php-mysql-2.php<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>回主畫面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formFix<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formFix<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>欄位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>資料<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cName<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> 
<span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cName"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>性別<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cSex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cSex"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token double-quoted-string string">"M"</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> 
<span class="token double-quoted-string string">"checked"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></span><span class="token punctuation">&gt;</span></span>男
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cSex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>F<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cSex"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token double-quoted-string string">"F"</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> 
<span class="token double-quoted-string string">"checked"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></span><span class="token punctuation">&gt;</span></span>女
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>生日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cBirthday<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cBirthday<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> 
<span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cBirthday"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>電子郵件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cEmail<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cEmail<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> 
<span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cEmail"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>電話<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cPhone<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cPhone<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> 
<span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cPhone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>住址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cAddr<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cAddr<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> 
<span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cAddr"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>住址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cHeight<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cHeight<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> 
<span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cHeight"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>住址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cWeight<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cWeight<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> 
<span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cWeight"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cID<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cID"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updata<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>更新資料<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button2<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重新填寫<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>後端畫面處理:<br>於 <code>&lt;html&gt;</code> 前追加下面程式碼:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"connDB.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"action"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"action"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token double-quoted-string string">"updata"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
 <span class="token variable">$sql_query</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"UPDATE `students` SET "</span><span class="token punctuation">;</span>
 <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"`cName`='"</span> <span class="token punctuation">.</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cName"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"',"</span><span class="token punctuation">;</span>
 <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"`cSex`='"</span> <span class="token punctuation">.</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cSex"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"',"</span><span class="token punctuation">;</span>
 <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"`cBirthday`='"</span> <span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cBirthday"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"',"</span><span class="token punctuation">;</span>
 <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"`cEmail`='"</span> <span class="token punctuation">.</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cEmail"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"',"</span><span class="token punctuation">;</span>
 <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"`cPhone`='"</span> <span class="token punctuation">.</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cPhone"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"',"</span><span class="token punctuation">;</span>
 <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"`cAddr`='"</span> <span class="token punctuation">.</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cAddr"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"' "</span><span class="token punctuation">;</span>
 <span class="token variable">$sql_query</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"WHERE `cID`="</span> <span class="token punctuation">.</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cID"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
 <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql_query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//關閉資料庫連接</span>
 <span class="token comment">//重新導向回到主畫面</span>
 <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: php-mysql-2.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$sql_db</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT * FROM `students` WHERE `cID`="</span> <span class="token punctuation">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cID"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql_db</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$row_result</span><span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token constant">MYSQLI_BOTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//關閉資料庫連接</span>
<span class="token delimiter important">?&gt;</span></span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>12. 刪除資料的處理(Delete)</strong><br>前端畫面處理:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"connDB.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>學生資料管理系統<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"\n您確定要刪除這筆資料嗎?\n刪除後無法恢復\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>學生資料管理系統 - 刪除資料<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php-mysql-2.php<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>回主畫面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formDel<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formDel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>欄位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>資料<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cName"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>性別<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cSex"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token double-quoted-string string">"M"</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"男"</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"女"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>生日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cBirthday"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>電子郵件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cEmail"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>電話<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cPhone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>住址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cAddr"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>身高<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cHeight"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>體重<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cWeight"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cID<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$row_result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cID"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>刪除這筆資料<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      
      <span class="token comment">&lt;!--
      &lt;button onclick="return myFunction();"&gt;刪除這筆資料&lt;/button&gt;
      --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="登錄案例"><a href="#登錄案例" class="headerlink" title="登錄案例"></a>登錄案例</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>FrontEnd.html</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>用戶名稱:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>用戶密碼:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>登入<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery-1.12.3.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'button click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
         type<span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>
         url<span class="token operator">:</span> <span class="token string">'./BackEnd.php'</span><span class="token punctuation">,</span>
         dataType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>
         data<span class="token operator">:</span> <span class="token punctuation">{</span>
           myUname<span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
           myUpass<span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.password'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span>infoCode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token comment">//document.location.href = "新頁面的url";</span>
             <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#output'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'  '</span> <span class="token operator">+</span> <span class="token string">'&lt;font color="green"&gt;登入成功&lt;/font&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span>infoCode <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'登錄失敗，賬戶名或密碼錯誤'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'網絡連接失敗，請檢查網絡連接！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'登入失敗!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>output<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="後端"><a href="#後端" class="headerlink" title="後端"></a>後端</h4><p>BackEnd.php</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'myUname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$userpass</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'myUpass'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$success</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'msg'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token single-quoted-string string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//宣告一結合陣列</span>
<span class="token comment">// $success = ['msg' =&gt; 'OK'];</span>
<span class="token comment">// $success = array('msg' =&gt; 'OK');</span>
<span class="token comment">// return</span>

<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"class"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"連線失敗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'set character_set_client=utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'set character_set_results=utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT * FROM members WHERE 1"</span><span class="token punctuation">;</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//$info[] = $row;</span>
    <span class="token comment">//判斷是否與當前記錄的用戶名相同</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'m_username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//如果相同，繼續判斷是否與當前記錄的密碼相同</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'m_passwd'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$userpass</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//0代表登錄成功</span>
        <span class="token variable">$success</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"infoCode"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token variable">$success</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'m_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//1代表登錄失敗</span>
        <span class="token variable">$success</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"infoCode"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//2代表數據庫連接失敗</span>
        <span class="token variable">$success</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"infocode"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// if (mysqli_num_rows($result) &gt; 0) {</span>
  <span class="token comment">//     $info = [];</span>
  <span class="token comment">//     for ($i = 0; $row = mysqli_fetch_assoc($result); $i++) {</span>
  <span class="token comment">//         $info[$i] = $row;</span>
  <span class="token comment">//     }</span>
  <span class="token comment">//     $flag = 0;</span>
  <span class="token comment">//     for ($j = 0; $j &lt; count($info); $j++) {</span>
  <span class="token comment">//         if ($info[$j]['m_username'] == $username) {</span>
  <span class="token comment">//             if ($info[$j]['m_passwd'] == userpass) {</span>
  <span class="token comment">//                 $success[infoCode] = 0;</span>
  <span class="token comment">//                 $flag = 1;</span>
  <span class="token comment">//                 break;</span>
  <span class="token comment">//             }</span>
  <span class="token comment">//         }</span>
  <span class="token comment">//     }</span>
  <span class="token comment">//     if ($flag == 0) {</span>
  <span class="token comment">//         $success['infocode'] = 1;</span>
  <span class="token comment">//     } else {</span>
  <span class="token comment">//         $success['infocode'] = 0;</span>
  <span class="token comment">//     }</span>
  <span class="token comment">// }</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$success</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>對照表</p>
<table>
<thead>
<tr>
<th align="left">程序導向介面的函式</th>
<th align="left">物件導向介面的方法或成員</th>
</tr>
</thead>
<tbody><tr>
<td align="left">mysqli_connect</td>
<td align="left">new mysqli::__construct() 建構方法</td>
</tr>
<tr>
<td align="left">mysqli_connect_errno</td>
<td align="left">mysqli::connect_errno 成員</td>
</tr>
<tr>
<td align="left">mysqli_set_charset()</td>
<td align="left">mysqli::set_charset()</td>
</tr>
<tr>
<td align="left">mysqli_query</td>
<td align="left">mysqli::query()</td>
</tr>
<tr>
<td align="left">mysqli_fetch_array</td>
<td align="left">mysqli_result::fetch_array()</td>
</tr>
<tr>
<td align="left">mysqli_num_rows</td>
<td align="left">mysqli_result::$num_rows  成員</td>
</tr>
</tbody></table>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>php&amp;mysql</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 基礎篇</title>
    <url>/php/20210408-php-basic/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="PHP-基礎"><a href="#PHP-基礎" class="headerlink" title="PHP 基礎"></a>PHP 基礎</h2><h3 id="1-php-簡介"><a href="#1-php-簡介" class="headerlink" title="1. php 簡介"></a>1. php 簡介</h3><p>  PHP，即 <code>PHP: Hypertext Preprocessor</code>，是一種被廣泛應用的開源通用指令碼語言，尤其適用於 <code>Web</code> 開發並可嵌入 <code>HTML</code> 中。<br>  它的語法利用了 <code>C</code>、<code>Java</code> 和 <code>Perl</code>，易於學習。<br>  該語言的主要目標是允許 web 開發人員快速編寫動態生成的 web 頁面，但 <code>PHP</code> 的用途遠不只於此。</p>
<h3 id="2-php-概述與名詞解釋"><a href="#2-php-概述與名詞解釋" class="headerlink" title="2. php 概述與名詞解釋"></a>2. php 概述與名詞解釋</h3><h4 id="2-1-基本語法與名詞解釋"><a href="#2-1-基本語法與名詞解釋" class="headerlink" title="2.1 基本語法與名詞解釋"></a>2.1 基本語法與名詞解釋</h4><p><strong>php標記</strong>：當 php 開始解析一個檔時，會尋找起始和結束標記，也就是 <font color="red">&lt;?php</font>&nbsp;和&nbsp;<font color="red">?&gt;</font>。<br>    &nbsp;這告訴 <code>php</code> 開始和停止解析二者之間的代碼。<br>    &nbsp;此種解析方式使得 <code>php</code> 可以被嵌入到各種不同的文檔中，而任何起始和結束標記之外的部分都會被 <code>php</code> 解析器忽略。</p>
<p><strong>分隔符號</strong>: <code>php</code> 需要在每個語句後用分號；結束指令，需要注意的是必須採用英文輸出。<br><strong>注釋方法</strong>: <code>php</code> 的注釋雖然支持 <code>c</code>、<code>c++</code>、<code>unix shell</code> 風格等的注釋方法，但我們仍然保持在 <code>js</code> 中的注釋風格即可，其餘注釋方法暫且不提。<br><strong>輸出方法</strong>: <font color="red">echo </font>命令表示輸出，而寫在 <code>echo</code> 後面的代碼能夠直接被顯示出來。</p>
<h4 id="2-2-變數"><a href="#2-2-變數" class="headerlink" title="2.2 變數"></a>2.2 變數</h4><ul>
<li><p><strong>描述</strong>：變數是其所表示的值可以發生改變的量，<br>   在 php 中的變數用一個<font color="red">美元符號</font>後面跟<font color="red">變數</font>名來表示。</p>
</li>
<li><p><strong>語法</strong>：<font color="red">$變數名稱</font></p>
</li>
<li><p><strong>規則</strong>：變數名稱與 php 中其它的標籤一樣遵循相同的規則。<br>   一個有效的變數名由字母或底線開頭，後面跟上任意數量的字母，數位，或底線。</p>
</li>
<li><p><strong>注意</strong>：<br> (1) <code>php</code> 中變數名稱是<font color="red">大小寫敏感</font>的<br> (2) <code>php</code> 中變數可以直接在寫出變數名稱後直接使用，而不需要 js 中的 “聲明賦值”過程。<br> (3) <code>php</code> 中變數之間的賦值總是【賦值傳遞】，如果必須【地址傳遞】則需要使用 <code>&amp;</code> 符號<br> (4) <code>php</code> 中變數的作用域採用函數級作用域(暫時)。</p>
</li>
<li><p><strong>例子</strong>:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$var</span><span class="token operator">=</span><span class="token single-quoted-string string">'allen'</span><span class="token punctuation">;</span>
<span class="token variable">$Var</span><span class="token operator">=</span><span class="token single-quoted-string string">' welcome!'</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$var</span></span>,<span class="token interpolation"><span class="token variable">$Var</span></span>"</span><span class="token punctuation">;</span>  <span class="token comment">// 輸出 "allen welcome!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="2-3-常數"><a href="#2-3-常數" class="headerlink" title="2.3 常數"></a>2.3 常數</h4><ul>
<li><p><strong>描述</strong>：常數指在腳本執行期間該值不能改變的識別字。<br>   常數預設為大小寫敏感，傳統上常數識別字總是大寫的。</p>
</li>
<li><p><strong>語法</strong>：<font color="red">define(‘常數名稱’, ‘簡單值’);</font></p>
</li>
<li><p><strong>規則</strong>：常數名稱和其它任何 PHP 標籤遵循同樣的命名規則。<br>   合法的常數名稱以字母或底線開始，後面跟著任何字母，數位或底線。</p>
</li>
<li><p><strong>注意</strong>：<br> (1) 常數實際上可以認為是【巨集定義】在php中的一個體現<br> (2) 為了區分變數和常數，我們約定常數在定義時均使用大寫<br> (3) php 中實際上並不是所有的常數的值都不能改變，MC(魔術常數)就能夠發生改變。</p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">define</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'FRANK'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'沃德田·辣麼帥'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token constant">FRANK</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>魔術常數: 這些常數的值會隨著它們在代碼中的位置改變而改變，這些魔術常數不區分大小寫，如下:</p>
</blockquote>
<table>
<thead>
<tr>
<th>魔術常數</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>LINE</strong></td>
<td align="left">取得運行程式的行號。</td>
</tr>
<tr>
<td><strong>FILE</strong></td>
<td align="left">取得文件在本機的路徑與檔名。</td>
</tr>
<tr>
<td><strong>DIR</strong></td>
<td align="left">取得文件在本機的路徑。除非是根目錄，否則目錄路徑名稱不包括最後的「/」符號。(PHP 5.3新功能)</td>
</tr>
<tr>
<td><strong>FUNCTION</strong></td>
<td align="left">取得函數的名稱(PHP 4.3.0 新增)。自PHP 5 起返回的函數名稱即是原定義名稱，英文字母區分大小寫。</td>
</tr>
<tr>
<td><strong>CLASS</strong></td>
<td align="left">取得類別名稱(PHP 4.3.0 新增)。自PHP 5 起返回的類別名稱即是原定義名稱，英文字母區分大小寫。</td>
</tr>
<tr>
<td><strong>METHOD</strong></td>
<td align="left">取得類別的方法名稱(PHP 5.0.0 新增)。返回的方法名稱即是原定義名稱，英文字母區分大小寫。</td>
</tr>
<tr>
<td><strong>NAMESPACE</strong></td>
<td align="left">取得區分大小寫的命名空間名稱(PHP 5.3.0 新增)。</td>
</tr>
</tbody></table>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">MyProject</span><span class="token punctuation">;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> __line__<span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> __file__<span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> __dir__<span class="token punctuation">;</span>
<span class="token variable">$f</span> <span class="token operator">=</span> <span class="token constant">__CLASS__</span><span class="token punctuation">;</span>
<span class="token variable">$h</span> <span class="token operator">=</span> __namespace__<span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token double-quoted-string string">"取得運行程式的行號 <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$a</span><span class="token punctuation">}</span></span> &lt;br&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"取得文件在本機的路徑與檔名 <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$b</span><span class="token punctuation">}</span></span> &lt;br&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"取得文件在本機的路徑 <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$c</span><span class="token punctuation">}</span></span> &lt;br&gt;"</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">test</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token variable">$d</span> <span class="token operator">=</span> __function__<span class="token punctuation">;</span>
      <span class="token keyword">echo</span> <span class="token double-quoted-string string">"取得函數的名稱 <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$d</span><span class="token punctuation">}</span></span> &lt;br&gt;"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">meth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token variable">$e</span> <span class="token operator">=</span> __class__<span class="token punctuation">;</span>
      <span class="token variable">$f</span> <span class="token operator">=</span> __method__<span class="token punctuation">;</span>

      <span class="token keyword">echo</span> <span class="token double-quoted-string string">"取得類別的名稱 <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$e</span><span class="token punctuation">}</span></span> &lt;br&gt;"</span><span class="token punctuation">;</span>
      <span class="token keyword">echo</span> <span class="token double-quoted-string string">"取得類別的方法名稱 <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$f</span><span class="token punctuation">}</span></span> &lt;br&gt;"</span><span class="token punctuation">;</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">meth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token double-quoted-string string">"取得區分大小寫的命名空間名稱 <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$h</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="2-4-運算式"><a href="#2-4-運算式" class="headerlink" title="2.4 運算式"></a>2.4 運算式</h4><ul>
<li><p><strong>描述</strong>：運算式是 php 中的基石，可以說在 php 中縮寫的任何內容都是運算式。<br>   官方給出的概念是【任何有值的東西均可以稱為是運算式】</p>
</li>
<li><p><strong>語法</strong>：在 php 中運算式無法精確的被給出一個語法來設定，但可以簡單設立一個通俗的標準。<br>   <font color="red">那就是語句如果不加分號的部分，就是運算式。</font></p>
</li>
<li><p><strong>注意</strong>：<br>   上面的說法並不完全準確，畢竟有一些語句是不使用分號結尾的。<br>   例如流程控制中的 if 等結構，還有函數等結構。<br>   因此上面的說法只是 “簡單” 設立的一個標準。</p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//函數運算式</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token operator">++</span><span class="token punctuation">;</span>                 <span class="token comment">//賦值運算式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-php-常見資料類型"><a href="#3-php-常見資料類型" class="headerlink" title="3. php 常見資料類型"></a>3. php 常見資料類型</h3><p>  php 中的資料類型相較於 js 多了很多種，但其中相當一部分對於我們來說鮮少用到。因此我們只在這為大家介紹常見的幾種資料類型。<br>介紹資料類型之前，為大家提供兩個方法來判別變數的資料類型：<br>  <font color="red">var_dump(變數|運算式)</font>：函數用來查看運算式的值和歸屬類型。<br>  <font color="red">gettype(變數|運算式)</font>：函數用來查看變數或運算式的類型。</p>
<h4 id="3-1-布林類型：Boolean"><a href="#3-1-布林類型：Boolean" class="headerlink" title="3.1 布林類型：Boolean"></a>3.1 布林類型：Boolean</h4><ul>
<li><p><strong>描述</strong>： boolean 是最簡單數值型別，用來表示運算式的真值。</p>
</li>
<li><p><strong>語法</strong>：<font color="red"> 一般使用<code>TRUE</code>或<code>FALSE</code>常數來指定布林值，兩者均不區分大小寫</font></p>
</li>
<li><p><strong>注意</strong>：<br>a. 可以使用<font color="red"> (bool) </font>或<font color="red"> (boolean) </font>強制轉換修飾符，來對非布林數值型別的變數或運算式進行強制類型轉換。<br>b. 當轉換為布林數值型別時，以下值被認為是 FALSE</p>
<ul>
<li>布林值&nbsp;FALSE&nbsp;本身</li>
<li>整型值 0（零）</li>
<li>浮點型值 0.0（零）</li>
<li>空字串，以及字串&nbsp;“0”</li>
<li>不包括任何元素的陣列</li>
<li>特殊類型&nbsp;NULL（包括尚未賦值的變數）</li>
</ul>
<p>c. 所有其它值都被認為是&nbsp;TRUE（包括任何資源&nbsp;和&nbsp;NAN）</p>
</li>
<li><p><strong>強調</strong>：<br>  -1&nbsp;和其它非零值（不論正負）一樣，被認為是&nbsp;TRUE</p>
</li>
</ul>
<h4 id="3-2-整數類型：Integer"><a href="#3-2-整數類型：Integer" class="headerlink" title="3.2 整數類型：Integer"></a>3.2 整數類型：Integer</h4><ul>
<li><strong>描述</strong>：整數指的是集合 ℤ = {…, -2, -1, 0, 1, 2, …} 中的某個數</li>
<li><strong>語法</strong>：<br> a. 整數值可以使用十進位，十六進位，八進制或二進位表示，<br>  前面可以加上可選的符號（- 或者 +）。<br> b. 二進位表達的&nbsp;integer&nbsp;自 <code>PHP 5.4.0</code> 起可用。<br> c. 要使用八進制表達，數位前必須加上&nbsp;<code>0</code>（零）。<br>  要使用十六進位表達，數位前必須加上 <code>0x</code>。<br>  要使用二進位表達，數位前必須加上&nbsp;<code>0b</code>。</li>
<li><strong>注意</strong>：<br> a. PHP7 以前的版本,如果向八進位數傳遞了一個非法數字（即 8 或 9），<br>  則後面其餘數字會被忽略。PHP7 以後,會產生 <code>Parse Error</code> 錯誤<br> b. PHP 中沒有整除的運算子。 1/2&nbsp;產生出&nbsp;float&nbsp;0.5。<br> c. 使用<font color="red">(int)</font>或<font color="red">(integer)</font>方法對非整數變數或運算式進行強制類型轉換</li>
<li><strong>強調</strong>：<br>  絕不要將未知的分數強制轉換為&nbsp;integer，這樣有時會導致不可預料的結果。</li>
</ul>
<h4 id="3-3-浮點類型：Float"><a href="#3-3-浮點類型：Float" class="headerlink" title="3.3 浮點類型：Float"></a>3.3 浮點類型：Float</h4><ul>
<li><strong>描述</strong>：浮點類型，又被稱為浮點數 Float或者雙精度數 double 或者實數 real。</li>
<li><strong>語法</strong>：可以通過一下任何一種類型來定義<br>  <font color="red">$a&nbsp;=&nbsp;1.234;<br>  $b&nbsp;=&nbsp;1.2e3;<br>  $c&nbsp;=&nbsp;7E-10;</font></li>
<li><strong>注意</strong>：<br>  a. 永遠不要直接比較兩個浮點數的大小，因為這樣沒有任何意義<br>  b. 如果必須比較浮點數大小，則可以採用【epsilon】機器極小值方式進行比較。<br>  c. NAN表示數學上無法用浮點數具體描述出的數字，<br>   和true之外的任何值進行鬆散或嚴格比較的結果都會是false。</li>
<li><strong>強調</strong>：<br>  由於&nbsp;NAN&nbsp;代表著任何不同值，不應拿&nbsp;NAN&nbsp;去和其它值進行比較，包括其自身 。</li>
</ul>
<h4 id="3-4-字元類型：String"><a href="#3-4-字元類型：String" class="headerlink" title="3.4 字元類型：String"></a>3.4 字元類型：String</h4><ul>
<li><p><strong>描述</strong>：字元類型也叫字串類型，是由一系列字元構成。<br>   其中每一個字元等同於一個位元組，因此 php 中只能支援 256 字元集，<br>   也正因為這樣其不支持 <code>Unicode</code>。</p>
</li>
<li><p><strong>語法</strong>：php 中字串有兩種定義語法，<code>單引號</code>和<code>雙引號</code>定義。</p>
</li>
<li><p><strong>注意</strong>：<br>  a. php 字串中使用轉義字元\來描述容易引起歧義的內容<br>  b. php 對雙引號定義的字串中的變數可以進行內容解析，而單引號則不行。<br>  c. php 字串允許多行定義，但會忽略多餘的空格和換行。<br>  d. <font color="red">php中字串拼接採用 <code>.</code> 點運算子實現！ 不是 <code>+</code> 加號</font></p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$frank</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'張先森'</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token single-quoted-string string">'my name is $frank'</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"my name is <span class="token interpolation"><span class="token variable">$frank</span></span>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>echo</code> 與 <code>print</code> 的差異</p>
<ol>
<li><p>比較print 和echo 函式的執行速度差異。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$e</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"Use 'echo': "</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$e</span> <span class="token operator">-</span> <span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span>
 
<span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">print</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$e</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"Use 'print': "</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$e</span> <span class="token operator">-</span> <span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果:</p>
<pre><code>Use 'echo': 0.065550088882446
Use 'print': 0.080870151519775</code></pre>
</li>
<li><p>print 和echo 兩個函數的用法差異。</p>
<ul>
<li><code>PHP</code> 中 <code>echo</code> 和 <code>print</code>的功能基本相同（輸出），但是兩者之間還是有細微差別的。<br><code>echo</code> 輸出後沒有返回值，但 <code>print</code> 有返回值，當其執行失敗時返回 <code>flase</code>。 因此可以作為一個普通函數來使用。<br>這意味著 <code>print</code> 可用在一些複雜的運算式中，而 <code>echo</code> 則不行。但是，因為 <code>echo</code> 語句不要求返回任何數值，所以在代碼中 <code>echo</code> 語句的運行效率要略微快於 <code>print</code> 語句。</li>
<li><code>echo</code> 可以輸出多個字串，像下面這樣：<br><code>echo 'a','b','c';</code> 或 <code>echo ('a'),('b'),('c');</code>  但不可為 <code>echo ('a','b','c');</code></li>
<li><code>print</code> 只能輸出一個字串，它可以表現得像一個函式，比如你可以如下使用：<br><code>$r = print "Hello World";</code>  得到返回值 $r = 1</li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span><span class="token operator">=</span><span class="token single-quoted-string string">'hello '</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token single-quoted-string string">'php world!'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br /&gt;'</span><span class="token punctuation">;</span><span class="token comment">//echo 可以用逗號分隔字串變數來顯示</span>
  <span class="token keyword">print</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br /&gt;'</span><span class="token punctuation">;</span><span class="token comment">//而print不能使用逗號，只能用點號分隔，</span>
  <span class="token comment">//print $a,$b.'&lt;br /&gt;';//這裡使用逗號時報錯。</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
</li>
</ul>
<h5 id="heredoc"><a href="#heredoc" class="headerlink" title="heredoc"></a>heredoc</h5><p>一般 PHP 會將要輸出的 HTML 用單引號或雙引號包起來，單引號和雙引號的差異是在雙引號內可以使用 PHP 變數，單引號則不行。</p>
<p>但是如果很長的一段 HTML，會顯得程式碼不易維護，此時可以使用 <code>heredoc</code> 語法，</p>
<ul>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token heredoc-string string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>EndOfDoc</span>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;TITLE&lt;/title&gt;&lt;/head&gt;
&lt;/html&gt;
<span class="token delimiter symbol">EndOfDoc<span class="token punctuation">;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<blockquote>
<p>使用 &lt;&lt;&lt; 語法要特別注意的是：</p>
</blockquote>
<ul>
<li><p>EndOfDoc 是標籤名稱可自定，但上下要一樣</p>
</li>
<li><p>開始標籤名稱可加單引號或雙引號，加單引號後其內容不支援 PHP 變數，加雙引號與不加雙引號是相同的功能。</p>
</li>
<li><p>開始的標籤名稱後面不可有任何字元，包括空白。</p>
</li>
<li><p>結束的標籤名稱要使用分號結尾，前後都不得有空白。</p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$myLanguage</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"PHP"</span><span class="token punctuation">;</span>

  <span class="token variable">$ShowStr</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span>Msg
             我最喜歡的網頁程式語言是<span class="token punctuation">:</span> <span class="token variable">$myLanguage</span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>
             許多學生都說<span class="token punctuation">:</span> <span class="token double-quoted-string string">"It's easy, It's good."</span>
  Msg<span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$ShowStr</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h5 id="nowdoc"><a href="#nowdoc" class="headerlink" title="nowdoc"></a>nowdoc</h5><p>若要在頁面上顯示程式的原始碼，就須改用 <code>nowdoc</code> 語法(PHP 5.3 新增)，表示方法的結構<br>與 <code>heredoc</code> 相同，不同的是 <code>nowdoc</code> 對於內容中變數及跳脫字元不會進行編譯，而是直接顯示字串內容。</p>
<ul>
<li><p><strong>格式</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">$變數名稱 <span class="token operator">=</span> <span class="token nowdoc-string string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;'</span>自訂名稱<span class="token punctuation">'</span></span>
           字串內容...........
           ...............
自訂名稱;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<blockquote>
<p>注意<br> nowdoc 語法結構表示法定義字串時，起始的自訂名稱前後要加上單引號 <code>'</code>, 結尾的自訂名稱就不用。</p>
</blockquote>
<ul>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
 <span class="token variable">$myLanguage</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"PHP"</span><span class="token punctuation">;</span>

 <span class="token variable">$ShowStr</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token single-quoted-string string">'Msg'</span>
            我最喜歡的網頁程式語言是<span class="token punctuation">:</span> <span class="token variable">$myLanguage</span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>
            許多學生都說<span class="token punctuation">:</span> <span class="token double-quoted-string string">"It's easy, It's good."</span>
 Msg<span class="token punctuation">;</span>
 <span class="token keyword">echo</span> <span class="token variable">$ShowStr</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="3-5-陣列類型：Array"><a href="#3-5-陣列類型：Array" class="headerlink" title="3.5 陣列類型：Array"></a>3.5 陣列類型：Array</h4><ul>
<li><p><strong>描述</strong>：php 中的陣列實際上一個有序映射，映射就是把 keys 關聯到 values上的類型。</p>
</li>
<li><p><strong>語法</strong>：<br>  <font color="red">array( key =&gt; value , … )</font><br>  // 鍵（key）可是是一個整數 <code>integer</code> 或字串 <code>string</code><br>  // 值（value）可以是任意類型的值 。<br>  <font color="red">自 <code>php 5.4</code> 起，可以直接通過短陣列定義方式[]來替代array()。</font></p>
</li>
<li><p><strong>注意</strong>：<br>  a. php 中 echo僅用來輸出簡單值，而複雜資料類型則需要通過print_r()函數來輸出<br>  b. php 中的陣列實際上更相似與 js中的物件結構。<br>  c. php 中陣列的讀取和賦值可以通過<font color="red">陣列名稱[鍵名]</font>方式來讀寫。<br>  d. php 中陣列的長度讀取通過<font color="red"> count() </font>函數實現<br>  e. php 中陣列內部添加原本並不存在的 key 值，不會補齊之間的差值，<br>   而是僅添加當前新輸入的 key 值。例：$arr[100] = 100.並不會為陣列添加 100 個元素</p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$frank</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token single-quoted-string string">'11'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'22'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'33'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$frank</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$frank</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">960</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$frank</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$frank</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="3-6-對象類型：Object"><a href="#3-6-對象類型：Object" class="headerlink" title="3.6 對象類型：Object"></a>3.6 對象類型：Object</h4><ul>
<li><p><strong>描述</strong>： php 中想要創建一個物件，則必須通過 new 語句產生實體一個類別得到。</p>
</li>
<li><p><strong>語法</strong>：<font color="red">$obj = new Func;</font></p>
</li>
<li><p><strong>注意</strong>：<br>  a. php 中類別由 <code>class</code> 關鍵字聲明，類別名稱後沒有小括弧。<br>  b. php 中類別內部的方法由 <code>-&gt;</code> 箭頭來調用，而不是 <code>.</code> 點運算子。</p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Peo</span><span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'我會吃飯'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token variable">$frank</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$frank</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>補充</strong>：對於類別和物件的使用方法遠不止如此，而在資料類型當中我們只需要知道物件類型是如何創建的即可，剩餘部分會在類別和物件中詳細說明。</p>
</li>
</ul>
<h4 id="3-7-空數值型別：NULL"><a href="#3-7-空數值型別：NULL" class="headerlink" title="3.7 空數值型別：NULL"></a>3.7 空數值型別：NULL</h4><ul>
<li><p><strong>描述</strong>： NULL 表示變數未被賦值的狀態，NULL 類型唯一可能的值就是 NULL。</p>
</li>
<li><p><strong>注意</strong>： NULL 值不區分大小寫，NULL 或 null 都可以</p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>  <span class="token comment">//Undefined variable</span>
<span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// NULL</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;script&gt;
  var a;
  console.log(a);
&lt;/script&gt;"</span><span class="token punctuation">;</span>

<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$frank</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="3-8-資源型別"><a href="#3-8-資源型別" class="headerlink" title="3.8 資源型別"></a>3.8 資源型別</h4><p>資源通常是利用特殊的函數所傳回代表資源的值。因為資源型別的變數，其值建構的方法包含了如檔案處理、資料庫處理或繪圖處理等動作的內容，所以是無法由其他的資料型別轉換而來的。</p>
<ul>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"localhost:3306"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="4-php運算子"><a href="#4-php運算子" class="headerlink" title="4. php運算子"></a>4. php運算子</h3><p>  php 中運算子和 js 中的運算子大同小異，因此整體上來講可以直接按照經驗進行使用。但畢竟存在差別，因此列出兩個明顯的運算規則區別：</p>
<h4 id="4-1-字串的拼接符號不再是-加號運算子，而是-點運算子"><a href="#4-1-字串的拼接符號不再是-加號運算子，而是-點運算子" class="headerlink" title="4.1 字串的拼接符號不再是 + 加號運算子，而是 . 點運算子"></a>4.1 字串的拼接符號不再是 <code>+</code> 加號運算子，而是 <code>.</code> 點運算子</h4><h4 id="4-2-字串內的-運算子號也不再表示拼接，而是使用-來進行拼接"><a href="#4-2-字串內的-運算子號也不再表示拼接，而是使用-來進行拼接" class="headerlink" title="4.2 字串內的 += 運算子號也不再表示拼接，而是使用 .= 來進行拼接"></a>4.2 字串內的 <code>+=</code> 運算子號也不再表示拼接，而是使用 <code>.=</code> 來進行拼接</h4><p>  原本的 <code>+=</code> 僅用來單純的數學運算累加。</p>
<ul>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$str1</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'123'</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$str1</span><span class="token operator">+</span><span class="token operator">=</span> <span class="token single-quoted-string string">'456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int(579)</span>
<span class="token variable">$str1</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'123'</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$str1</span><span class="token punctuation">.</span><span class="token operator">=</span> <span class="token single-quoted-string string">'456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string(6) "123456"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="5-php流程控制語句"><a href="#5-php流程控制語句" class="headerlink" title="5. php流程控制語句"></a>5. php流程控制語句</h3><p>  php 中流程控制語句與 js 中的流程控制語句語法基本一樣，可以直接使用。<br>  php 中不但包括了 js 中原有的語句，還新添加了一些流程控制：</p>
<h4 id="5-1-快速遍歷不再是for-in結構，而是提供了一個foreach語句"><a href="#5-1-快速遍歷不再是for-in結構，而是提供了一個foreach語句" class="headerlink" title="5.1 快速遍歷不再是for-in結構，而是提供了一個foreach語句"></a>5.1 快速遍歷不再是for-in結構，而是提供了一個foreach語句</h4><ul>
<li><p><strong>描述</strong>：<code>foreach</code>&nbsp;語法結構提供了遍歷陣列的簡單方式，<code>foreach</code>&nbsp;僅能夠應用於陣列和物件。<br>   如果嘗試應用於其他資料類型的變數，或者未初始化的變數將發出錯誤資訊。</p>
</li>
<li><p><strong>語法</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">foreach</span> <span class="token punctuation">(</span>array_expression <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    statement  <span class="token punctuation">}</span>
或者
<span class="token keyword">foreach</span> <span class="token punctuation">(</span>array_expression <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   statement  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>注意</strong>：<br>  a. 第一種格式遍歷給定的&nbsp;<code>array_expression</code>&nbsp;陣列。每次迴圈中，當前單元的值被賦給&nbsp;<code>$value</code>&nbsp;並且陣列內部的指標向前移一步<br>  &nbsp;（因此下一次迴圈中將會得到下一個單元）。<br>  b. 第二種格式做同樣的事，只除了當前單元的鍵名也會在每次迴圈中被賦給變數 <code>$key</code>。</p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token variable">$index</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$arr['</span> <span class="token punctuation">.</span> <span class="token variable">$index</span><span class="token punctuation">.</span> <span class="token single-quoted-string string">']:'</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="5-2-文件引入語句-include-和-require"><a href="#5-2-文件引入語句-include-和-require" class="headerlink" title="5.2 文件引入語句 include 和 require"></a>5.2 文件引入語句 include 和 require</h4><p>  文件的單次引入語句 <code>include_once</code> 和 <code>require_once</code></p>
<ul>
<li><p><strong>描述</strong>： <code>include</code> 和 <code>require</code>&nbsp;語句都表示包含並運行指定檔。<br>   但未找到文件 <code>include</code> 會發出一條警告，後者會發出一個致命錯誤</p>
</li>
<li><p><strong>語法</strong>：<br>   <font color="red">include&nbsp;‘檔案名稱|檔案路徑;’</font></p>
</li>
<li><p><strong>注意</strong>：<br>   a. 當一個檔案被包含時，其中所包含的代碼繼承了 <code>include</code> 所在行的變數範圍。<br>    從該處開始，調用檔在該行處可用的任何變數在被調用的檔中也都可用。<br>    b. 不過所有在包含檔中定義的函數和類別都具有全域作用域。</p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">vars.php
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
 <span class="token variable">$color</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'green'</span><span class="token punctuation">;</span>
 <span class="token variable">$fruit</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'apple'</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-php" data-language="php"><code class="language-php">test.php
<span class="token php language-php"><span class="token delimiter important">&lt;?</span>php<span class="token operator">&gt;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"A <span class="token interpolation"><span class="token variable">$color</span></span> <span class="token interpolation"><span class="token variable">$fruit</span></span>"</span><span class="token punctuation">;</span> <span class="token comment">//A</span>
  <span class="token keyword">include</span> <span class="token double-quoted-string string">"var.php"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"A <span class="token interpolation"><span class="token variable">$color</span></span> <span class="token interpolation"><span class="token variable">$fruit</span></span>"</span><span class="token punctuation">;</span> <span class="token comment">//A green apple</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="6-php-函數"><a href="#6-php-函數" class="headerlink" title="6. php 函數"></a>6. php 函數</h3><p>php中的函數結構和js中的函數結構基本持有相同的語法結構和特徵。</p>
<p><strong>例如</strong>：<br>函數的聲明語法由 <code>function</code> 命令聲明，<br>函數參數寫在小括弧內部，<br>函數返回值在函數內部採用 <code>return</code> 關鍵字聲明，<br>函數可以先使用後聲明<br>函數內部返回的函數(閉包)<br>php中的作用域也採用函數級別，因此函數內部的變數無法在函數外部直接訪問。<br>…</p>
<p>但 php 中函數的作用域部分與 js 中的函數還是存在一些區別的。</p>
<ul>
<li><p><strong>例如</strong>：<br>在函數外部定義的全域變數並不能在函數內部直接使用，<br>而是需要通過關鍵字 <code>global</code> 在函數內部再次聲明才可以。</p>
</li>
<li><p><strong>例如</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$num</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>       <span class="token comment">//設置全域變數 $num</span>
<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">global</span> <span class="token variable">$num</span><span class="token punctuation">;</span>    <span class="token comment">//在函數內部聲明$num為全域變數，否則調用出錯</span>
  <span class="token keyword">echo</span> <span class="token variable">$num</span><span class="token punctuation">;</span>      <span class="token comment">//輸出結果為100，證明訪問成功</span>
  <span class="token variable">$num</span><span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token comment">//對全域變數做出修改</span>
<span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$num</span><span class="token punctuation">;</span>        <span class="token comment">//在函數外部再次輸出$num，得出結果101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<blockquote>
<p>通過上面的例子得出：<br>   在 php 的函數中如果想要使用哪怕是全域變數，也必須採用關鍵字 global聲明一次。<br>   否則無法生效。</p>
</blockquote>
<h4 id="使用者自訂函式"><a href="#使用者自訂函式" class="headerlink" title="使用者自訂函式"></a>使用者自訂函式</h4><ul>
<li><p><code>自訂函數</code>具有提升性。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> 名稱<span class="token punctuation">(</span>參數<span class="token number">1</span><span class="token punctuation">,</span>參數<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token punctuation">:</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>php_function.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token double-quoted-string string">"ABC"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Hello world"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="帶函式的參數"><a href="#帶函式的參數" class="headerlink" title="帶函式的參數"></a>帶函式的參數</h4><ul>
<li><p><code>php_function_2.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>                       <span class="token operator">&lt;</span><span class="token operator">?</span>php
   <span class="token keyword">function</span> <span class="token function">dinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">function</span> <span class="token function">dinner</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"牛排"</span><span class="token punctuation">;</span>                 <span class="token keyword">echo</span> <span class="token variable">$item</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>                           <span class="token punctuation">}</span>
                      <span class="token operator">==</span><span class="token operator">&gt;</span>
   <span class="token function">diner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">diner</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"牛排"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>                      
?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>多個參數的函數</strong></p>
</li>
<li><p><code>php_function_3.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token double-quoted-string string">"今天"</span> <span class="token punctuation">.</span> <span class="token variable">$a</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"吃"</span> <span class="token punctuation">.</span> <span class="token variable">$b</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span> <span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"早餐"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"漢堡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"中餐"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"牛肉麵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>PHP3</code> 函式定義一定要放在函式呼叫的前面。<br><code>PHP4</code> 以後就無此限制。</p>
<p>但是有兩種函式例外:</p>
<ol>
<li><p>條件式函式: 函式定義在條件式中，所以須在該條件成立後，才能呼叫該函式。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$status</span> <span class="token operator">=</span> <span class="token boolean constant">TRUE</span><span class="token punctuation">;</span>
  <span class="token comment">//這裡還不能呼叫函式 Greeting()</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Welcome! "</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//此處之後才可以呼叫函式 Greeting()</span>
  <span class="token function">Greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>函式中的函式: 函式定義在其他函式中，那麼須在呼叫其他函數後，才能呼叫該函式。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Welcome!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//此處尚不能呼叫函式 Greeting();</span>
  <span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//此處之後才能呼叫函式 Greeting();</span>
  <span class="token function">Greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
</li>
</ul>
<h4 id="函式的參數傳遞"><a href="#函式的參數傳遞" class="headerlink" title="函式的參數傳遞"></a>函式的參數傳遞</h4><ol>
<li><p>傳值呼叫(call by value): 預設<br>呼叫端與被呼叫端的參數都有一獨立的記憶體，不論名字相同與否。</p>
<p><code>php_call_by_value.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
 <span class="token variable">$num1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token comment">//$n1 的值為 100  </span>
 <span class="token variable">$num2</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>               <span class="token comment">//$n2 的值為 1</span>
 <span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">,</span> <span class="token variable">$n2</span><span class="token punctuation">)</span>    <span class="token comment">//$num1 的值為1</span>
 <span class="token punctuation">{</span>                          <span class="token comment">//$num2 的值為100</span>
   <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$n1</span><span class="token punctuation">;</span>
   <span class="token variable">$n1</span> <span class="token operator">=</span> <span class="token variable">$n2</span><span class="token punctuation">;</span>
   <span class="token variable">$n2</span> <span class="token operator">=</span> <span class="token variable">$temp</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$n1的值為'</span><span class="token punctuation">.</span><span class="token variable">$n1</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$n2的值為'</span><span class="token punctuation">.</span><span class="token variable">$n2</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token function">swap</span><span class="token punctuation">(</span><span class="token variable">$num1</span><span class="token punctuation">,</span> <span class="token variable">$num2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$num1的值為'</span><span class="token punctuation">.</span><span class="token variable">$num1</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
 <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$num2的值為'</span><span class="token punctuation">.</span><span class="token variable">$num2</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$n1</span>       <span class="token number">1</span>   -<span class="token operator">&gt;</span>  <span class="token number">100</span>
--------------
<span class="token variable">$n2</span>     <span class="token number">100</span>   -<span class="token operator">&gt;</span>  <span class="token number">1</span>
--------------
<span class="token variable">$num1</span>     <span class="token number">1</span>
--------------
<span class="token variable">$num2</span>   <span class="token number">100</span>  
--------------
<span class="token variable">$temp</span>     <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>傳址呼叫<br><code>php_call_by_reference.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>                                 結果<span class="token punctuation">:</span>
  <span class="token variable">$num1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                          <span class="token variable">$n1</span> 的值為 <span class="token number">100</span>
  <span class="token variable">$num2</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                        <span class="token variable">$n2</span> 的值為 <span class="token number">1</span>
  <span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$n1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$n2</span><span class="token punctuation">)</span>           <span class="token variable">$num1</span> 的值為 <span class="token number">100</span>
  <span class="token punctuation">{</span>                                   <span class="token variable">$num2</span> 的值為 <span class="token number">1</span>
   <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$n1</span><span class="token punctuation">;</span>
   <span class="token variable">$n1</span> <span class="token operator">=</span> <span class="token variable">$n2</span><span class="token punctuation">;</span>
   <span class="token variable">$n2</span> <span class="token operator">=</span> <span class="token variable">$temp</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$n1的值為'</span><span class="token punctuation">.</span><span class="token variable">$n1</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$n2的值為'</span><span class="token punctuation">.</span><span class="token variable">$n2</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">swap</span><span class="token punctuation">(</span><span class="token variable">$num1</span><span class="token punctuation">,</span> <span class="token variable">$num2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$num1的值為'</span><span class="token punctuation">.</span><span class="token variable">$num1</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$num2的值為'</span><span class="token punctuation">.</span><span class="token variable">$num2</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h4 id="設定參數預設值"><a href="#設定參數預設值" class="headerlink" title="設定參數預設值"></a>設定參數預設值</h4><ul>
<li><p><code>php_set_function_defaultParaValue.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function">drink</span><span class="token punctuation">(</span><span class="token variable">$kind</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'茶'</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'請給我一杯'</span><span class="token punctuation">.</span><span class="token variable">$kind</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    <span class="token function">drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">drink</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'咖啡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="變動長度參數串列"><a href="#變動長度參數串列" class="headerlink" title="變動長度參數串列"></a>變動長度參數串列</h4><p>即函示的參數無一定個數，為了處理它，必須借助下列函式。</p>
<ul>
<li><p>func_num_args(): 傳回函式的參數個數</p>
</li>
<li><p>func_get_arg(n): 傳回函式的第 n+1 個參數</p>
</li>
<li><p>func_get_args(): 傳回一個陣列，裡面包含所有的參數，起始鍵為 0。</p>
</li>
<li><p><code>php_variable_length_argument_list.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function">tour</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">func_num_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
     <span class="token keyword">echo</span> <span class="token single-quoted-string string">'沒有指定地點！'</span><span class="token punctuation">;</span>
   <span class="token keyword">else</span>
     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">func_num_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">echo</span> <span class="token function">func_get_arg</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">tour</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'台北'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'台中'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'高雄'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果:<br>  台北<br>  台中<br>  高雄</p>
</li>
</ul>
<h4 id="函式傳回值"><a href="#函式傳回值" class="headerlink" title="函式傳回值"></a>函式傳回值</h4><p>使用關鍵字 <code>Return</code> 參數的函數。</p>
<ul>
<li><p><code>php_function_return_one.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
 <span class="token keyword">function</span> <span class="token function">Convert2F</span><span class="token punctuation">(</span><span class="token variable">$DegreeC</span><span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token variable">$DegreeC</span> <span class="token operator">*</span> <span class="token number">1.8</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">echo</span> <span class="token single-quoted-string string">'攝氏30度可以轉換為華氏'</span><span class="token punctuation">.</span><span class="token function">Convert2F</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'度'</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因為函式只能傳回一個值，若要傳回多個值用陣列。</p>
</li>
<li><p><code>php_function_return_multi.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function">ExpValue</span><span class="token punctuation">(</span><span class="token variable">$X</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token variable">$Result</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$X</span><span class="token punctuation">;</span>
    <span class="token variable">$Result</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$X</span> <span class="token operator">*</span> <span class="token variable">$X</span><span class="token punctuation">;</span>
    <span class="token variable">$Result</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$X</span> <span class="token operator">*</span> <span class="token variable">$X</span> <span class="token operator">*</span> <span class="token variable">$X</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$Result</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token variable">$ReturnArray</span> <span class="token operator">=</span> <span class="token function">ExpValue</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$ReturnArray</span> <span class="token keyword">as</span> <span class="token variable">$Value</span><span class="token punctuation">)</span>
    <span class="token keyword">echo</span> <span class="token variable">$Value</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
  <span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>    結果:<br>    10<br>    100<br>    1000</p>
<blockquote>
<p>PS: 省略 return 會回傳一個 null</p>
</blockquote>
<h4 id="全域變數-v-s-區域變數"><a href="#全域變數-v-s-區域變數" class="headerlink" title="全域變數 v.s. 區域變數"></a>全域變數 v.s. 區域變數</h4><p>全域變數:定義在區塊內的都是。<br>區域變數:定義在方法內的。</p>
<ul>
<li><p><code>php_global_vs_local.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$Msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Hello, This is outside of Func1()."</span><span class="token punctuation">;</span>  <span class="token comment">//設定全域變數Msg的值</span>
  <span class="token keyword">echo</span> <span class="token variable">$Msg</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>            <span class="token comment">//顯示全域變數Msg的值</span>
  <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//呼叫Func1() 函式</span>
  <span class="token keyword">echo</span> <span class="token variable">$Msg</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>            <span class="token comment">//顯示全域變數Msg的值</span>

  <span class="token keyword">function</span> <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
   <span class="token variable">$Msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Hello, This is inside of Func1()."</span><span class="token punctuation">;</span> <span class="token comment">//設定另一個同名區域變數Msg的值</span>
   <span class="token keyword">echo</span> <span class="token variable">$Msg</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>                           <span class="token comment">//顯示區域變數Msg的值</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>   結果:<br>   Hello, This is outside of Func1().<br>   Hello, This is inside of Func1().<br>   Hello, This is outside of Func1().</p>
<ul>
<li><p><code>php_global_variable.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$Msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Hello, This is outside of Func1()."</span><span class="token punctuation">;</span>    <span class="token comment">//設定全域變數Msg的值</span>
  <span class="token keyword">echo</span> <span class="token variable">$Msg</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>         <span class="token comment">//顯示全域變數Msg的值</span>
  <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//呼叫Func1() 函式</span>
  <span class="token keyword">echo</span> <span class="token variable">$Msg</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>         <span class="token comment">//顯示全域變數Msg的值</span>

  <span class="token keyword">function</span> <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">global</span> <span class="token variable">$Msg</span><span class="token punctuation">;</span>           <span class="token comment">//使用global將Msg定義為全域變數</span>
    <span class="token variable">$Msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Hello, This is inside of Func1()."</span><span class="token punctuation">;</span>  <span class="token comment">//設定全域變數Msg的值</span>
    <span class="token keyword">echo</span> <span class="token variable">$Msg</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>                            <span class="token comment">//顯示全域變數Msg的值</span>
  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>   結果:<br>   Hello, This is outside of Func1().<br>   Hello, This is inside of Func1().<br>   Hello, This is inside of Func1().</p>
<h4 id="靜態變數"><a href="#靜態變數" class="headerlink" title="靜態變數"></a>靜態變數</h4><p>對區域函數來說，當呼叫函式時，區域變數會被建立，而在函式執行完畢後，區域變數會被釋放。</p>
<ul>
<li><p><code>php_local_variable_scope.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token variable">$Result</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
   <span class="token comment">//$Result 預設的值是 0</span>
   <span class="token variable">$Result</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//將區域變數Result的值加1</span>
   <span class="token keyword">echo</span> <span class="token variable">$Result</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>     <span class="token comment">//在網頁上顯示區域變數Result的值</span>
  <span class="token punctuation">}</span>
  <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//呼叫函式</span>
  <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//呼叫函式</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>   結果:<br>   1<br>   1</p>
<blockquote>
<p>若要保留函式內的區域變數的值，須使用 <code>static</code> 關鍵字。</p>
</blockquote>
<ul>
<li><p><code>php_static_variable_scope.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token variable">$Result</span><span class="token punctuation">;</span>       <span class="token comment">//使用static將Result定義為靜態變數</span>
    <span class="token variable">$Result</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment">//將靜態變數Result的值加1</span>
    <span class="token keyword">echo</span> <span class="token variable">$Result</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>  <span class="token comment">//在網頁上顯示靜態變數Result的值</span>
  <span class="token punctuation">}</span>
  <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//呼叫函式</span>
  <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//呼叫函式</span>
 <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="匿名函式-anonymous"><a href="#匿名函式-anonymous" class="headerlink" title="匿名函式(anonymous)"></a>匿名函式(anonymous)</h4><ul>
<li><blockquote>
<p>5.30 支援，允許程式設計師建立函數可不使用名稱。</p>
</blockquote>
<p><code>php_anonymous_function.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
 <span class="token variable">$greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Hello %s\r\n"</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>

 <span class="token variable">$greet</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token variable">$greet</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"PHP!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="可變動函式-variable-function"><a href="#可變動函式-variable-function" class="headerlink" title="可變動函式(variable function)"></a>可變動函式(variable function)</h4><p>指可以動態設定函式的名稱。</p>
<ul>
<li><p>一般函數表示為  funcName (){}</p>
</li>
<li><p>可變動函式指函數名稱用一變數來代替 $funcName(), 這個名稱可以設定不同的值，即可以使用不同的名稱.</p>
</li>
<li><p><code>php_variable_function.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">function</span> <span class="token function">CircleArea</span><span class="token punctuation">(</span><span class="token variable">$R</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token double-quoted-string string">"半徑為 <span class="token interpolation"><span class="token variable">$R</span></span> 的圓面積為"</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$R</span> <span class="token operator">*</span> <span class="token variable">$R</span> <span class="token operator">*</span> <span class="token number">3.1416</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">SquareArea</span><span class="token punctuation">(</span><span class="token variable">$L</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token double-quoted-string string">"長度為 <span class="token interpolation"><span class="token variable">$L</span></span> 的正方形面積為"</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$L</span> <span class="token operator">*</span> <span class="token variable">$L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'CircleArea'</span><span class="token punctuation">;</span>
  <span class="token comment">//可變動函式 $func()</span>
  <span class="token variable">$func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//會執行函式呼叫CircleArea(10);</span>
  <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'SquareArea'</span><span class="token punctuation">;</span>
  <span class="token variable">$func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//會執行函式呼叫SquareArea(10);</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="PHP-內建函式"><a href="#PHP-內建函式" class="headerlink" title="PHP 內建函式"></a>PHP 內建函式</h4><p><code>php_practice.php</code></p>
<p>下面的 $a 與 $b 的值由表單作輸入。</p>
<ul>
<li><p><code>function.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$a</span><span class="token operator">=</span> <span class="token double-quoted-string string">"早餐"</span><span class="token punctuation">;</span>
  <span class="token variable">$b</span><span class="token operator">=</span> <span class="token double-quoted-string string">"漢堡"</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>
   <span class="token keyword">echo</span> <span class="token double-quoted-string string">"今天"</span> <span class="token punctuation">.</span> <span class="token variable">$a</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"吃"</span> <span class="token punctuation">.</span> <span class="token variable">$b</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span> <span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>  解答:</p>
<ul>
<li><p><code>php_practice.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token double-quoted-string string">"function.php"</span>　method<span class="token operator">=</span><span class="token double-quoted-string string">"post"</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>select name<span class="token operator">=</span><span class="token double-quoted-string string">"a"</span><span class="token operator">&gt;</span>
     <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token double-quoted-string string">"早餐"</span><span class="token operator">&gt;</span>早餐<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
     <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token double-quoted-string string">"中餐"</span><span class="token operator">&gt;</span>中餐<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
     <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token double-quoted-string string">"晚餐"</span><span class="token operator">&gt;</span>晚餐<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
     <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token double-quoted-string string">"宵夜"</span><span class="token operator">&gt;</span>宵夜<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token double-quoted-string string">"text"</span> name<span class="token operator">=</span><span class="token double-quoted-string string">"b"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token double-quoted-string string">"submit"</span> value<span class="token operator">=</span><span class="token double-quoted-string string">"送出"</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p><code>php</code> 中和 <code>javascript</code> 不同，`php 內對於類別和物件是有準確的定義和關鍵字聲明的。</p>
<p>因此暫時撇開目前對類別和物件所保留的認知，讓我們一起來看看在 php 中類別和對象是如何規定的。</p>
<p>我們從下面幾個角度來討論一下 php 中的類別和物件：</p>
<h3 id="7-php-類別與對象"><a href="#7-php-類別與對象" class="headerlink" title="7. php 類別與對象"></a>7. php 類別與對象</h3><p><code>php</code> 中和 <code>javascript</code> 不同，<code>php</code> 內對於類別和物件是有準確的定義和關鍵字聲明的。<br>因此暫時撇開目前對類別和物件所保留的認知，讓我們一起來看看在 <code>php</code> 中類別和對象是如何規定的。<br>我們從下面幾個角度來討論一下<code>php</code>中的類別和物件：</p>
<h4 id="7-1-php-中的類別"><a href="#7-1-php-中的類別" class="headerlink" title="7.1 php 中的類別"></a>7.1 php 中的類別</h4><ul>
<li><p><strong>描述</strong>：php中類別的定義都以關鍵字&nbsp;<code>class</code>&nbsp;開頭，後跟類別名稱，再後面跟著一對花括弧。<br>   括弧內包含有類別的<strong>屬性</strong>、<strong>方法</strong>、<strong>常數</strong>、<strong>建構函式</strong>、<strong>解構函式</strong>。</p>
</li>
<li><p><strong>語法</strong>：<font color="red"> class 類別名稱 {  類別內部的結構  }</font></p>
</li>
<li><p><strong>說明</strong>：<br>  a. 類別名稱可以是任何非 <code>PHP</code>&nbsp;保留字的合法標籤。<br>   一個合法類別名稱以字母或底線開頭，後面跟著若干字母，數字或底線。<br>  b. 一個類別可以包含有屬於自己的常數，變數【屬性】以及函數【即方法】。</p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Peo</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$peoName</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'allen'</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">showSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'hello world!'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用物件的方式來操作 HTML 網頁</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//先定義一個可代表網頁的類別</span>
<span class="token keyword">class</span> <span class="token class-name">WebPage</span><span class="token punctuation">{</span>
  <span class="token comment">//儲存網頁標題的成員</span>
  <span class="token keyword">var</span> <span class="token variable">$title</span><span class="token punctuation">;</span>
  <span class="token comment">//顯示網頁的方法</span>
  <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">HTML_TEXT</span>    <span class="token comment">// 用 heredoc 語法定義的網頁內容</span>
         <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>
         <span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
         <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">title</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
         <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>WebPage 類別 <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token constant">HTML_TEXT</span><span class="token punctuation">;</span>         
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  <span class="token comment">//整個類別定義都放在一對大括號中</span>
<span class="token variable">$obj1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$obj2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$obj1</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">title</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"新標題"</span><span class="token punctuation">;</span>
<span class="token variable">$obj1</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="7-2-php-中的物件"><a href="#7-2-php-中的物件" class="headerlink" title="7.2 php 中的物件"></a>7.2 php 中的物件</h4><ul>
<li><p><strong>描述</strong>：要創建一個類別的實例，必須使用&nbsp;<code>new</code>&nbsp;關鍵字。類別應在被產生實例化之前定義。</p>
</li>
<li><p><strong>語法</strong>：<font color="red">$對象名稱 = new 類別名稱();</font></p>
</li>
<li><p><strong>說明</strong>：<br>  a. 對於創建物件的語句中，<code>new</code> 後面的類別名稱後有沒有小括弧都可以。<br>  b. 物件與物件之間的傳值仍然是賦值傳遞，只不過傳遞的內容是一個記憶體位址。</p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
 <span class="token keyword">class</span> <span class="token class-name">Peo</span>
 <span class="token punctuation">{</span>
  <span class="token comment">//宣告成員</span>
  <span class="token keyword">public</span> <span class="token variable">$peoName</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'allen'</span><span class="token punctuation">;</span>
  <span class="token comment">//定義方法</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">showSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hello world! &lt;br&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">peoName</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 <span class="token variable">$peo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">;</span>
 <span class="token variable">$peo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">peoName</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"aby"</span><span class="token punctuation">;</span>
 <span class="token variable">$peo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">showSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$peo</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>輸出</strong>：<br>hello world!<br>allen<br>Peo Object ( [peoName] =&gt; allen )</p>
</li>
</ul>
<h4 id="7-3-php-中類別的屬性與屬性類型關鍵字"><a href="#7-3-php-中類別的屬性與屬性類型關鍵字" class="headerlink" title="7.3 php 中類別的屬性與屬性類型關鍵字"></a>7.3 php 中類別的屬性與屬性類型關鍵字</h4><ul>
<li><p><strong>描述</strong>: 類別內部的變數成員稱為屬性，或欄位、特徵。</p>
</li>
<li><p><strong>語法</strong>: <font color="red">由關鍵字<code>public</code>，<code>protected</code>，<code>private</code>，或者<code>var</code><br>開頭，然後跟一個普通的變數聲明來組成。<br>  &nbsp;class 類別名稱{<br>   [public|private|protected] $變數名稱(屬性名稱) = 屬性值;<br>   [public|private|protected] function 方法名稱(參數1,參數2,…){  方法內容代碼;  }<br>  &nbsp;}</font></p><font color="red">
</font></li>
<li><p><strong>說明</strong>：<br>  a. 屬性中的變數可以初始化，但初始化的值必須是常數。<br>  b. 類別的屬性和方法如果沒有寫明類型關鍵字，則都預設是公有</p>
<font color="orange">
   public: 被定義為公有的類別成員可以在任何地方被訪問。
   protect：被定義為受保護的類別成員則可以被其自身以及其子類別和父類別訪問。
   private：被定義為私有的類別成員則只能被其定義所在的類別訪問。
   var: 以該關鍵字定義的成員能夠被任何程式碼存取(public 的別名)
</font>
  c. 在類別的成員方法中，可以用 `-&gt;` 來訪問非靜態屬性，其中 `-&gt;` 稱為物件運算子。<br>
  d. 若 public、private、protected 省略不寫，表示為 public。<br>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Peo</span><span class="token punctuation">{</span>
  <span class="token comment">//聲明公有屬性</span>
  <span class="token keyword">public</span> <span class="token variable">$peoName</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'allen'</span><span class="token punctuation">;</span>  
  <span class="token comment">//聲明私有方法</span>
  <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">showSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'hello world!'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//聲明公有方法</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">canUsedFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//$this是一個虛擬變數(物件)，表示當前正在調用這個方法的物件，注意 peoName 前面沒有 '$' 符號。</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">peoName</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">showSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//產生實體一個 Peo類別的物件</span>
<span class="token variable">$peo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//通過-&gt;訪問物件的公有屬性</span>
<span class="token keyword">echo</span> <span class="token variable">$peo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">peoName</span><span class="token punctuation">;</span>
<span class="token comment">//修改物件的公有屬性</span>
<span class="token variable">$peo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">peoName</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'allen'</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$peo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">peoName</span><span class="token punctuation">;</span>
<span class="token comment">//調用物件的公有方法，間接執行私有方法</span>
<span class="token variable">$peo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">canUsedFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><font color="red"> $this 虛擬變數</font><br> 在程式中直接使用 <code>-&gt;</code> 修改物件的成員值，這在物件導向程式設計中是不建議的作法，因為通常類別會將成員『封裝』起來，亦即讓物件以外的程式，無法存取成員。這時候就會使用 <code>$this</code> 來存取物件的成員。<code>$this</code> 是個特殊的<strong>參照變數</strong>，在方法之中它代表的是『物件本身』。<br> <code>$this</code> 配合 <code>-&gt;</code> 運算子即可以用來存取物件成員。</p>
</blockquote>
<blockquote>
<p>方法的定義原則和一般函式相同，但PHP保留以『兩個』底線字元(__) 為開頭的方法名稱(名稱以兩個底線字元開頭的方法稱為 Magic Method)，所以不要用以兩個底線字元當成方法名稱的開頭。</p>
</blockquote>
</li>
</ul>
<h4 id="7-4-php-中的類別常數與靜態變數"><a href="#7-4-php-中的類別常數與靜態變數" class="headerlink" title="7.4 php 中的類別常數與靜態變數"></a>7.4 php 中的類別常數與靜態變數</h4><ul>
<li><p><strong>描述</strong>：php中的<strong>類別常數</strong>和<strong>靜態變數</strong>是存在與類別結構中的兩個不同與常見屬性的兩種結構。</p>
</li>
<li><p><strong>語法</strong>：類別常數由關鍵字 <code>const</code> 聲明，而靜態變數則使用關鍵字 <code>static</code> 聲明</p>
<font color="red">
    class 類別名稱{<br>
      const 類別常數(沒有$開頭) = 簡單值;<br>
      static 靜態變數(有$開頭) = 簡單值;<br>
    }
</font>
</li>
<li><p><strong>說明</strong>：<br>   a. 由 <code>const</code>聲明的類別常數不允許發生任何改變，一經聲明值即固定，一律為 <code>public</code>。<br>   b. 由 <code>static</code>聲明的靜態變數的語句，則僅在類別被聲明的時候執行一次，但可以修改。<br>   c. 無論是 <code>const</code> 聲明的類別常數還是<code>static</code> 聲明的靜態變數，兩者的調用方式均為 <code>::</code> 調用<br>   d. 兩者在調用的時候均可以不產生實體物件直接通過<strong>類別名稱</strong>調用。</p>
</li>
<li><p><strong>例子1:</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Peo</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> peoName <span class="token operator">=</span> <span class="token single-quoted-string string">'allen'</span><span class="token punctuation">;</span> <span class="token comment">//聲明類別常數</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> Peo<span class="token punctuation">:</span><span class="token punctuation">:</span>peoName<span class="token punctuation">;</span>         <span class="token comment">//不產生實體也能直接通過類別名稱訪問</span>
<span class="token variable">$peo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$peo</span><span class="token punctuation">:</span><span class="token punctuation">:</span>peoName<span class="token punctuation">;</span>        <span class="token comment">//產生實體後可以通過物件訪問</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>例子2:</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Peo</span><span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token variable">$peoAge</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>         <span class="token comment">//聲明靜態變數</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> Peo<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$peoAge</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>   <span class="token comment">//直接通過類別名稱訪問</span>
Peo<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$peoAge</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">//修改靜態變數的值</span>
<span class="token keyword">echo</span> Peo<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$peoAge</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>   <span class="token comment">//確認修改</span>

<span class="token variable">$peo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//產生實體物件，但靜態變數聲明語句不執行</span>
<span class="token keyword">echo</span> <span class="token variable">$peo</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$peoAge</span><span class="token punctuation">;</span>            <span class="token comment">//輸出靜態變數是剛才修改的值。</span>

<span class="token operator">*</span><span class="token operator">*</span>輸出<span class="token operator">*</span><span class="token operator">*</span>
<span class="token number">18</span>
<span class="token number">19</span>
<span class="token number">19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>例子3:</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">MyMath</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">Cubic</span><span class="token punctuation">(</span><span class="token variable">$X</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$X</span> <span class="token operator">*</span> <span class="token variable">$X</span> <span class="token operator">*</span> <span class="token variable">$X</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token single-quoted-string string">'5的三次方為'</span><span class="token punctuation">.</span>MyMath<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Cubic</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>由於沒有建立物件，故不能使用 <code>-&gt;</code> 運算子，而是改用 <code>::</code> 運算子。</p>
</blockquote>
</li>
<li><p><strong>例子4:</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Circle</span>
<span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token variable">$Radius</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">ShowArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
  <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'圓面積為'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Radius</span> <span class="token operator">*</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Radius</span> <span class="token operator">*</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token single-quoted-string string">'圓周率為'</span><span class="token punctuation">.</span>Circle<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PI</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
<span class="token variable">$Obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$Obj</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Radius</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token variable">$Obj</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">ShowArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>self 關鍵字代表目前類別</p>
</blockquote>
</li>
</ul>
<h4 id="7-5-php-中類別的建構與解構函數"><a href="#7-5-php-中類別的建構與解構函數" class="headerlink" title="7.5 php 中類別的建構與解構函數"></a>7.5 php 中類別的建構與解構函數</h4><h5 id="7-5-1-php-中類別的建構函數"><a href="#7-5-1-php-中類別的建構函數" class="headerlink" title="7.5.1 php 中類別的建構函數"></a>7.5.1 php 中類別的建構函數</h5><ul>
<li><p><strong>描述</strong>：建構函數是類別在產生實體物件的時候自動執行，用來説明類別去建構物件的函數。<br>   <code>php</code> 為所有的類別都提供了一個和類別名稱相同的隱藏建構函數。<br>   可以通過顯示編寫或通過 <code>__construct</code> 函數來主動進行編輯。</p>
</li>
<li><p><strong>語法</strong>：</p>
<font color="red">
class 類別名稱{
   //function __construct(){  主動修改的代碼  }
   function 類別名稱(){  主動修改的代碼  }
}</font>
</li>
<li><p><strong>說明</strong>：兩種寫法都能夠實現建構函數的主動編輯，但是需要知道系統自動提供的是第二種結構</p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Peo</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$peoName</span><span class="token punctuation">;</span>
   <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">peoName</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'預設值'</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token variable">$peo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$peo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">peoName</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>輸出</strong><br>預設值</p>
</li>
</ul>
<h5 id="7-5-2-php-中類別的解構函數"><a href="#7-5-2-php-中類別的解構函數" class="headerlink" title="7.5.2 php 中類別的解構函數"></a>7.5.2 php 中類別的解構函數</h5><p><strong>解構函式(destructor)</strong><br>是用來釋放物件所佔用之系統資源的函式，在釋放物件時會自動執行，無須在程式碼內加以呼叫，常見的是釋放動作有清除設定值、關閉檔案、結束資料庫連接、中斷網路連線等。<br><code>PHP</code> 支援的解構函式名稱為 <font color="red">__destruct</font>，沒有參數、也沒有回傳值。</p>
<ul>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Peo</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$peoName</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$Str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">peoName</span> <span class="token operator">=</span> <span class="token variable">$Str</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"已經建立名字為"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">peoName</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"的物件! &lt;br/&gt;"</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">peoName</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span> <span class="token comment">//清除員工的名字</span>
   <span class="token keyword">echo</span> <span class="token double-quoted-string string">"這個物件已經被釋放"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$peo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'allen'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立物件(會自動執行建構函式)</span>
<span class="token variable">$peo</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>            <span class="token comment">//釋放物件(會自動執行解構函式)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>輸出</strong><br>已經建立名字為allen的物件!<br>這個物件已經被釋放</p>
</li>
</ul>
<h5 id="7-5-3-self-和-this-的差異"><a href="#7-5-3-self-和-this-的差異" class="headerlink" title="7.5.3 self 和 $this 的差異"></a>7.5.3 <code>self</code> 和 <code>$this</code> 的差異</h5><ol>
<li><p><code>self</code> 是參照到目前的 <code>class</code>， <code>$this</code>是參照到目前的 <code>object</code>(已經被宣告的實體上)</p>
</li>
<li><p><code>self</code> 可使用在 <code>static</code> 上，<code>$this</code> 不行。<br><code>static method</code> 因為沒有物件的實體，所以需要注意不可以使用 <code>$this</code> ，要用 <code>self::</code><br>可以直接存取 <code>static method</code> (如 <code>self::method()</code>)，但是無法直接存取 <code>static property</code> 中的預先宣告的值</p>
</li>
<li><p>可用 <code>new self()</code> 呼叫自己。</p>
</li>
<li><p>範例</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span>
<span class="token keyword">class</span> <span class="token class-name">name</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"mick"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getnamebythis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getnamebyself</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">name2</span> <span class="token keyword">extends</span> <span class="token class-name">name</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"jeff"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$newname</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">name2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$newname</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getnamebythis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span> <span class="token comment">// 出現的是mick</span>
<span class="token keyword">echo</span> <span class="token variable">$newname</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getnamebyself</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span> <span class="token comment">// 出現的是jeff</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h4 id="7-6-比較物件"><a href="#7-6-比較物件" class="headerlink" title="7.6 比較物件"></a>7.6 比較物件</h4><p>可以使用下列兩個運算子比較物件:</p>
<ul>
<li><p><code>==</code>: 當兩個物件隸屬於相同類別且具有相同屬性與值時，回傳回 <code>true</code>。</p>
</li>
<li><p><code>===</code>: 兩個物件指向相同類別的相同案例時，回傳回 <code>true</code>。</p>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Peo</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$peoName</span><span class="token punctuation">;</span>
  <span class="token comment">//定義名稱為 peoName 的屬性以存取名字</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$Str</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token comment">//透過建構函式指派名字</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">peoName</span> <span class="token operator">=</span> <span class="token variable">$Str</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//令 $Obj1 指向 peoName 屬性為 'allen' 的案例</span>
<span class="token variable">$Obj1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"allen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//令 $Obj2 指向 peoName 屬性為 'allen' 的另一案例(跟 $Obj1 不同)</span>
<span class="token variable">$Obj2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"allen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//令 $Obj3 指向 $Obj1 所指向的案例</span>
<span class="token variable">$Obj3</span> <span class="token operator">=</span> <span class="token variable">$Obj1</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Obj2</span> <span class="token operator">==</span> <span class="token variable">$Obj1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$Obj2 的成員與值均和 $Obj1 相同 '</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$Obj2 的成員與值均和 $Obj1 不同 '</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Obj2</span> <span class="token operator">===</span> <span class="token variable">$Obj1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'$Obj2 和 $Obj1 指向相同案例'</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$Obj2 和 $Obj1 指向不同案例'</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Obj3</span> <span class="token operator">===</span> <span class="token variable">$Obj1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'$Obj3 和 $Obj1 指向相同案例'</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'$Obj3 和 $Obj1 指向不同案例'</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>輸出</strong><br><code>$Obj2</code> 的成員與值均和 <code>$Obj1</code> 相同<br><code>$Obj2</code> 和 <code>$Obj1</code> 指向不同案例<br><code>$Obj3</code> 和 <code>$Obj1</code> 指向相同案例</p>
</li>
</ul>
<h4 id="7-7-php-中的繼承"><a href="#7-7-php-中的繼承" class="headerlink" title="7.7 php 中的繼承"></a>7.7 php 中的繼承</h4><ul>
<li><p><strong>描述</strong>：繼承有時也被稱為類別擴展。是指子類別會繼承父類別所有公有的和受保護的屬性方法。<br>   在php中使用 <code>extends</code> 關鍵字來實現繼承。</p>
</li>
<li><p><strong>語法</strong>：<font color="red"><br>  class SonClassName extends FatherClassName{<br>   子類別結構<br>  } </font></p>
</li>
<li><p><strong>說明一</strong>：<br>   a. 除非子類別覆蓋了父類別的方法，否則被繼承的方法都會保留其原有功能。<br>   b. 繼承對於功能的設計和抽象是非常有用，避免了重複編寫大量相同的公有結構。<br>   c. 對於公有屬性和方法的繼承，子類別可以直接隨意使用。<br>   d. 對於受保護的屬性和方法的繼承，可以在【父類別或子類別內部】使用。<br>   e. 對於私有的屬性和方法，子類別不能夠繼承。</p>
<br>
</li>
<li><p><strong>說明二</strong>：  無多重繼承功能(一個子類別有多個父類別)，但有:</p>
<ol>
<li><p>鏈狀繼承(chained inheritance)。<br>例如: 類別 B 繼承 類別  A, 而類別  C 又繼承類別 B</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
 <span class="token punctuation">:</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
 <span class="token punctuation">:</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">{</span>
 <span class="token punctuation">:</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>一個父類別有多個子類別</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">W</span><span class="token punctuation">{</span>
 <span class="token punctuation">:</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token keyword">extends</span> <span class="token class-name">W</span><span class="token punctuation">{</span>
 <span class="token punctuation">:</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Y</span> <span class="token keyword">extends</span> <span class="token class-name">W</span><span class="token punctuation">{</span>
 <span class="token punctuation">:</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Z</span> <span class="token keyword">extends</span> <span class="token class-name">W</span><span class="token punctuation">{</span>
 <span class="token punctuation">:</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token variable">$pubPro</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'父類別公開的屬性'</span><span class="token punctuation">;</span>
 <span class="token keyword">protected</span> <span class="token variable">$protecPro</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'父類別受保護的屬性'</span><span class="token punctuation">;</span>
 <span class="token keyword">private</span> <span class="token variable">$priPro</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'父類別私有的屬性'</span><span class="token punctuation">;</span>

 <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">fatherPublicPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">pubPro</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">protecPro</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">priPro</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
 <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">fatherProtectPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">pubPro</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">protecPro</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">priPro</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
 <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">fatherPrivatePut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">pubPro</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">protecPro</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">priPro</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">SonSelfPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">pubPro</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">protecPro</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">priPro</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$father</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$father</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">pubPro</span><span class="token punctuation">;</span>        <span class="token comment">//父類公開的屬性</span>
<span class="token keyword">echo</span> <span class="token variable">$father</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">protecPro</span><span class="token punctuation">;</span>     <span class="token comment">///報錯，受保護屬性外部無法直接訪問</span>
<span class="token keyword">echo</span> <span class="token variable">$father</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">priPro</span><span class="token punctuation">;</span>        <span class="token comment">//報錯，私有屬性外部無法訪問  </span>

<span class="token variable">$father</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fatherPublicPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//父類公開的屬性、父類受保護屬性、父類私有屬性</span>
<span class="token variable">$father</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fatherProtectPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$father</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fatherPrivatePut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//報錯，受保護方法外部無法直接訪問</span>
                             <span class="token comment">//報錯，私有方法外部無法直接訪問</span>

<span class="token variable">$son</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$son</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">pubPro</span><span class="token punctuation">;</span>           <span class="token comment">//父類公開的屬性(繼承來的)</span>
<span class="token keyword">echo</span> <span class="token variable">$son</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">protecPro</span><span class="token punctuation">;</span>        <span class="token comment">//報錯，受保護屬性外部無法直接訪問</span>
<span class="token keyword">echo</span> <span class="token variable">$son</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">priPro</span><span class="token punctuation">;</span>           <span class="token comment">//報錯，私有屬性外部無法訪問</span>
<span class="token variable">$son</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fatherPublicPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//父類公開的屬性、父類受保護屬性、父類私有屬性(繼承來的)</span>
<span class="token variable">$son</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fatherProtectPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//報錯，受保護方法外部無法直接訪問</span>
<span class="token variable">$son</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fatherPrivatePut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//報錯，私有方法外部無法直接訪問</span>

<span class="token variable">$son</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">SonSelfPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//父類公開的屬性、父類受保護的屬性、報錯(證明繼承的屬性只有public和protected的屬性)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="7-8-php-中覆蓋繼承自父類別的方法"><a href="#7-8-php-中覆蓋繼承自父類別的方法" class="headerlink" title="7.8 php 中覆蓋繼承自父類別的方法"></a>7.8 php 中覆蓋繼承自父類別的方法</h4><p>   「覆蓋」(override)指的是子類別將繼承父類別的方法重新定義，而且在這過程中父類別的方法並不會受到影響。通常透過覆蓋的方法技巧來實作物件導向設計的「多型」(polymorphism)。</p>
<ul>
<li><p><strong>例子</strong>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Payroll</span>                               <span class="token comment">//定義父類別</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$Name</span><span class="token punctuation">;</span>                             <span class="token comment">//定義屬性(能夠被繼承)</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Payment</span><span class="token punctuation">(</span><span class="token variable">$Hours</span><span class="token punctuation">,</span> <span class="token variable">$PayRate</span><span class="token punctuation">)</span> <span class="token comment">//定義方法(能夠被繼承)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$Hours</span> <span class="token operator">*</span> <span class="token variable">$PayRate</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">BonusPayroll</span> <span class="token keyword">extends</span> <span class="token class-name">Payroll</span>          <span class="token comment">//定義子類別</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Payment</span><span class="token punctuation">(</span><span class="token variable">$Hours</span><span class="token punctuation">,</span> <span class="token variable">$PayRate</span><span class="token punctuation">)</span> <span class="token comment">//覆蓋父類別的方法</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$Hours</span> <span class="token operator">*</span> <span class="token variable">$PayRate</span> <span class="token operator">+</span> <span class="token number">5000</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token single-quoted-string string">'尚未加上獎金的薪資為'</span><span class="token punctuation">.</span>Payroll<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Payment</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token single-quoted-string string">'加上獎金之後的薪資為'</span><span class="token punctuation">.</span>BonusPayroll<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Payment</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="7-9-php-中呼叫父類別內被覆蓋的方法"><a href="#7-9-php-中呼叫父類別內被覆蓋的方法" class="headerlink" title="7.9 php 中呼叫父類別內被覆蓋的方法"></a>7.9 php 中呼叫父類別內被覆蓋的方法</h4><p>  <strong>子類別如何呼叫父類別內被覆蓋的方法呢 ?</strong></p>
<p>以 7.8 中的例子來說明，由於子類別再重新定義 <code>Payment()</code> 方法中有部分敘述和父類別的 <code>Payment()</code> 方法相同，所以可以用呼叫父類別的 <code>Payment()</code> 方法來取代，如下:</p>
<ul>
<li><p><strong>改法一</strong>： 用 <code>parent</code>關鍵字。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//覆蓋類別的方法</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">fatherPublicPut</span><span class="token punctuation">(</span><span class="token variable">$Hours</span><span class="token punctuation">,</span> <span class="token variable">$PayRate</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">//return $Hours * $PayRate + 5000;</span>
  <span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Payment</span><span class="token punctuation">(</span><span class="token variable">$Hours</span><span class="token punctuation">,</span> <span class="token variable">$PayRate</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5000</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>改法二</strong>： 用 <code>父類別名稱</code>。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//覆蓋類別的方法</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">fatherPublicPut</span><span class="token punctuation">(</span><span class="token variable">$Hours</span><span class="token punctuation">,</span> <span class="token variable">$PayRate</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">//return $Hours * $PayRate + 5000;</span>
  <span class="token keyword">return</span> Payroll<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Payment</span><span class="token punctuation">(</span><span class="token variable">$Hours</span><span class="token punctuation">,</span> <span class="token variable">$PayRate</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5000</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
```  

<span class="token operator">&gt;</span>原則上，子類別可以覆蓋繼承自父類別的任何方法，但有時可能不希望父類別的某個方法不要被子類別所覆蓋，此時可以在父類別定義該方法時加上 `<span class="token keyword">final</span>` 關鍵字，例如下面敘述將禁止子類別覆蓋父類別的 `<span class="token function">Payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>` 方法。

```php
<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Payment</span><span class="token punctuation">(</span><span class="token variable">$Hours</span><span class="token punctuation">,</span> <span class="token variable">$PayRate</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="7-10-php-子類別的建構與解構函式"><a href="#7-10-php-子類別的建構與解構函式" class="headerlink" title="7.10 php 子類別的建構與解構函式"></a>7.10 php 子類別的建構與解構函式</h4><p>   原則上，子類別會繼承父類別的建構函式與解構函式，若子類別沒有定義自己的建構函式與解構函式，一旦建立隸屬於子類別的物件或釋放隸屬於子類別的物件，就會分別自動執行父類別的建構函式與解構函式(例子1)，但如果子類別自己有定義建構式與解構式，則會自動執行子類別自己的建構函式與解構函式(例子2)。</p>
<ul>
<li><p><strong>例子1:</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">ParentClass</span>
<span class="token punctuation">{</span>
  <span class="token keyword">protected</span> <span class="token variable">$Field1</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$Value</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Field1</span> <span class="token operator">=</span> <span class="token variable">$Value</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'建立物件時成功將Field1的值設定為'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Field1</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
  <span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Field1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'釋放物件時成功將Field1的值設定為'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Field1</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">ChildClass</span> <span class="token keyword">extends</span> <span class="token class-name">ParentClass</span> 
<span class="token punctuation">{</span>
  <span class="token keyword">protected</span> <span class="token variable">$Field2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$MyObject</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildClass</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$MyObject</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>輸出</strong><br>  建立物件時成功將 Field1 的值設定為 100<br>  釋放物件時成功將 Field1 的值設定為 0</p>
</li>
<li><p><strong>例子2:</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">ParentClass</span>
<span class="token punctuation">{</span>
  <span class="token keyword">protected</span> <span class="token variable">$Field1</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$Value</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Field1</span> <span class="token operator">=</span> <span class="token variable">$Value</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'建立物件時成功將Field1的值設定為'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Field1</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Field1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'釋放物件時成功將Field1的值設定為'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Field1</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ChildClass</span> <span class="token keyword">extends</span> <span class="token class-name">ParentClass</span>
<span class="token punctuation">{</span>
  <span class="token keyword">protected</span> <span class="token variable">$Field2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$Value</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Field2</span> <span class="token operator">=</span> <span class="token variable">$Value</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'建立物件時成功將Field2的值設定為'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Field2</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Field2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'釋放物件時成功將Field2的值設定為'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">Field2</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token variable">$MyObject</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildClass</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$MyObject</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>輸出</strong><br>  建立物件時成功將 Field2 的值設定為 100<br>  釋放物件時成功將 Field2 的值設定為 0</p>
<br>

<blockquote>
<p>在子類別呼叫父類別的建構函式或解構函式，可以使用下列敘述，其中建構函式的參數取決於實際狀況，而解構函式則沒有參數:</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">_construce</span><span class="token punctuation">(</span>參數<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="7-11-php-中抽象方法"><a href="#7-11-php-中抽象方法" class="headerlink" title="7.11 php 中抽象方法"></a>7.11 php 中抽象方法</h4><p>   「抽象方法」(abstract method)是一種特殊方法，它必須放在「抽象類別」(abstract class)內，抽象類別只有定義方法，沒有實作的部分，而且實作的部分必須藉由子類別來提供實作或擴充其功能，同時不可將其建立成其他物件，換句話說，抽象類別只能被繼承，不能被案例化(實體化)。</p>
<ul>
<li><p><strong>例子</strong>：<br>抽象方法必須放在抽象類別當中，且需為公開方法</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//此敘述的開頭要有 abstract, 因為抽象方法必須放在抽象類別中。</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Payroll</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token variable">$EmpName</span><span class="token punctuation">;</span>
  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Payment</span><span class="token punctuation">(</span><span class="token variable">$Hours</span><span class="token punctuation">,</span> <span class="token variable">$PayRate</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//定義抽象方法</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">BonusPayroll</span> <span class="token keyword">extends</span> <span class="token class-name">Payroll</span>
<span class="token punctuation">{</span>
  <span class="token comment">//覆蓋抽象方法(參數個數必須相同)</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Payment</span><span class="token punctuation">(</span><span class="token variable">$Hours</span><span class="token punctuation">,</span> <span class="token variable">$PayRate</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$Hours</span> <span class="token operator">*</span> <span class="token variable">$PayRate</span> <span class="token operator">+</span> <span class="token number">5000</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token single-quoted-string string">'加上獎金之後的薪資為'</span><span class="token punctuation">.</span>BonusPayroll<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Payment</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token single-quoted-string string">'&lt;br&gt;'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>輸出:</p>
</li>
</ul>
<h4 id="7-12-php-中的命名空間"><a href="#7-12-php-中的命名空間" class="headerlink" title="7.12 php 中的命名空間"></a>7.12 php 中的命名空間</h4><p>  「命名空間」是一種命名方式，用來組織各個類別、函式、常數等，它和這些元素的關係就像檔案系統中目錄與檔案的關係相同，其目的如下:</p>
<ul>
<li><p>解決名稱衝突的問題: 當撰寫的 <code>PHP</code> 程式和 <code>PHP</code> 內建或其它人撰寫的類別、函式、常數發生名稱衝突時，可以利用命名空間來解決。</p>
</li>
<li><p>提供設定別名的功能: 當 <code>PHP</code> 程式裡類別、函式或常數的名稱太長會不易理解時，可以利用命名空間來設定簡短易讀的別名(alias)。</p>
</li>
</ul>
<blockquote>
<p>事實上，若沒遇到上述的問題，可以不採用命名空間的方式。<br> <code>use</code> 和 <code>namespace</code> 這兩個操作子都必需是全域的，寫在文件的最上方，換句話說，不能寫在函式、方法或類別中。</p>
</blockquote>
<p>下面兩段程式碼，其功能是相同，但第二段程式碼有加入命名空間的概念。</p>
<ul>
<li><p>代碼一</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$Obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>代碼二</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$Obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Class1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>範例:<br>舉例說，<code>MyClass</code> 隸屬於 <code>\A\B\C</code> 的命名空間，則可以如下方式來建立:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$Obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>A<span class="token punctuation">\</span>B<span class="token punctuation">\</span>C<span class="token punctuation">\</span>MyClass</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>其中反斜線 <code>\</code> 表示「全域範圍」，就像檔案系統中的根目錄一樣。</p>
</blockquote>
<p>原則上，命名空間的命名方式及分類是依照類別、函式、常數的性質而定，同時 <code>PHP</code> 程式均放在全域範圍 <code>\</code> 內。若要在 <code>PHP</code> 程式中自訂命名空間，可以使用 <code>namespace</code> 關鍵字，如下例子:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">my<span class="token punctuation">\</span>name</span><span class="token punctuation">;</span>            <span class="token comment">//在全域範圍內定義 my\name命名空間</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>              <span class="token comment">//在 \my\name命名空間內定義MyClass類別</span>
  <span class="token keyword">function</span> <span class="token function">Myfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//在 \my\name命名空間內定義Myfunction函式</span>
  <span class="token keyword">const</span> <span class="token constant">MYCONST</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment">//在 \my\name命名空間內定義MYCONST常數</span>
  <span class="token variable">$X</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>my<span class="token punctuation">\</span>name<span class="token punctuation">\</span>MyClass</span><span class="token punctuation">;</span>  <span class="token comment">//建立 MyClass類別的物件，寫成 $X = new MyClass;亦可</span>
  <span class="token variable">$Y</span> <span class="token operator">=</span> \<span class="token package">my<span class="token punctuation">\</span>name<span class="token punctuation">\</span>MYCONST</span><span class="token punctuation">;</span>      <span class="token comment">//定義 Y 為常數 MYCONST，寫成$Y = MYCONST;亦可</span>
  <span class="token keyword">echo</span> <span class="token variable">$Y</span><span class="token punctuation">;</span>                    <span class="token comment">//顯示Y的値</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意 namespace 敘述須放在檔案的最前端。此外，PHP5 已經支援命名空間，但 PHP6 在這項功能有點問題，若欲順利執行前面的例子程式，必須將版本回復到 PHP5，同時要重新啟動 Web Server，以便設定生效。</p>
</blockquote>
<p>最後來設定別名，以 上例說明子，假設在第2行的下一行插入如下敘述，表示使用 <code>use</code> 關鍵字將 <code>my\name</code> 命名空間的別名設定為 A:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">my<span class="token punctuation">\</span>name</span> <span class="token keyword">as</span> <span class="token constant">A</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如此一來，第6、7行可以改寫成下，使用別名 A 取代 <code>my\name</code> 命名空間:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A<span class="token punctuation">\</span>MyVlass</span><span class="token punctuation">;</span>
<span class="token variable">$y</span> <span class="token operator">=</span> <span class="token constant">A</span>\<span class="token package">MYCONST</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="8-php-會話-session-與緩存-cookie（擴展）"><a href="#8-php-會話-session-與緩存-cookie（擴展）" class="headerlink" title="8. php 會話 session 與緩存 cookie（擴展）"></a>8. php 會話 session 與緩存 cookie（擴展）</h3><p> <code>session</code>和<code>cookie</code>都會是我們在<code>ajax</code>請求部分詳細說明的內容。但是我們有必要在這裡先對其概念有一個大致的瞭解，這樣有助於更好的理解後面部分的內容。</p>
<ul>
<li><p><strong>名詞解釋</strong>：<br> <font color="red"><b><code>cookie</code></b>指的是當訪問頁面的時，由後臺發往前臺頁面資料時所夾帶的一小段資訊。<br> <b><code>session</code></b>可以理解為一種不斷驗證口令以獲得用戶持久連接的 “存取機制”。 </font></p>
</li>
<li><p><strong>原理說明</strong>：<br> 當後臺返回給前臺資料的時候，添加的一段”持久”的資訊。<br> 因此這段資訊必須在php後臺代碼中插入添加。</p>
</li>
<li><p><strong>相關技術</strong>：<br> (1) <code>php</code> 中 <code>$_GET</code> 和 <code>$_POST</code> 對象，用於在 <code>php</code> 中獲取 <code>get</code> 和 <code>post</code> 請求的資料物件<br> (2) <code>php</code> 中 <code>time()</code> 用於獲取當前的時間戳記，單位是秒。支持加減法。<br> (3) <code>php</code> 中 <code>setcookie('key','value',過期時間);</code> 用於設置緩存。<br> (4) <code>html</code> 中 <code>document.cookie</code> 用來獲取頁面所保存的 <code>cookie</code> 值。類型是字串。</p>
</li>
<li><p><strong>HTML 代碼:</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   type<span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>
   url<span class="token operator">:</span><span class="token string">"php文件地址"</span><span class="token punctuation">,</span>
   data<span class="token operator">:</span><span class="token punctuation">{</span>
     username<span class="token operator">:</span><span class="token string">"allen"</span><span class="token punctuation">,</span>
     password<span class="token operator">:</span><span class="token string">"1qaz@wsx"</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   dataType<span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>
   <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token comment">//console.log(data);</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg <span class="token operator">==</span> <span class="token string">"OK"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"login OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>PHP代碼：</strong></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$uname</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$upass</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token variable">$uname</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'allen'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$upass</span><span class="token operator">==</span> <span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">,</span> <span class="token variable">$uname</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">,</span> <span class="token variable">$upass</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//echo "登入成功";</span>
  <span class="token variable">$success</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'msg'</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token single-quoted-string string">'OK'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'info'</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token single-quoted-string string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$success</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
  <span class="token comment">//echo "登入失敗";</span>
  <span class="token variable">$success</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'msg'</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token single-quoted-string string">'fail'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'info'</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token single-quoted-string string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<hr>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql pdo 物件</title>
    <url>/php-mysql/20200930-mysql-pdo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-singleton"><a href="#1-singleton" class="headerlink" title="1. singleton"></a>1. singleton</h2><p>  <code>singleton</code> 中文名稱為 <code>單例模式</code>，是一種<strong>建構類別</strong>的設計模式(一套編寫類別的規範、技巧，將它作成公版來給大家使用；設計模式有許多種，例如:工廠模式、簡單工廠模式、抽象工廠模式、複雜模式、單例模式、高抽象模式..等)。其目的是為了在全域獲取這個類別的物件時<font color="red">總是能獲取到唯一的物件</font>，而不是每次創建實體時都創建出新的物件的一種類別結構。特別的在 <code>DB</code> 操作中，<code>DB</code> 連接這種物件就必須是通過 <code>單例模式</code> 來實現的。</p>
<ul>
<li><p>說明</p>
<p>在 <code>JS</code> 中寫一個類別:</p>
<p><code>01單例模式.html</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token comment">//定義一個類別 Peo 具有特徵(姓名、年紀)</span>
  <span class="token keyword">function</span> <span class="token function">Peo</span><span class="token punctuation">(</span><span class="token parameter">pname<span class="token punctuation">,</span> page</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>perName <span class="token operator">=</span> pname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>peoAge <span class="token operator">=</span> page<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//實例化，每一次對同類別實例化，都會產生新的物件，如下</span>
  <span class="token keyword">var</span> allen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">(</span><span class="token string">'allen'</span><span class="token punctuation">,</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> aby <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peo</span><span class="token punctuation">(</span><span class="token string">'aby'</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>類別的主要目的在建構物件，所以每次創建類別都會獲得一個實體，這是正常操作現象，但是為了達到在全局開發中，對一個類別，不管創建幾次都只會得到一個物件，所以有了這個類別的設計模式:單例模式。</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">DBConnectionSingleton</span><span class="token punctuation">{</span>
  <span class="token comment">//通過私有，靜態聲明單例物件</span>
  <span class="token comment">//私有: 保證只能在這個類別底下訪問</span>
  <span class="token comment">//靜態: 只在 class DBConnectionSingleton{::} 聲明時被執行一次。</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
  <span class="token comment">//function __construct(){}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getconn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//self 指該類別內部</span>
    <span class="token comment">//如果它的靜態屬性: $conn 是空的話</span>
    <span class="token comment">//::調用類常數或靜態變數用</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">/*第一次時存在 private static $conn = null;
        $conn = null 即 false(假)， !假 =&gt; true，所以執行 new self();
        第二次後就視 "private static $conn = null;" 不存在了。 (!self::$conn) =&gt; 結果 !true =&gt; false，所以不執行 new self();
     通過靜態執行一次的特點保證物件唯一性
      */</span>
      self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$conn</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 <span class="token comment">//外部調用第一次，static 聲明過的方法 getconn() 與 屬性 $conn, 不再被執行(視為不存在)，所以直接作判斷</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token comment">//即 $conn 是空的話，將靜態變數 $conn=null 改變值 = new self(), 返回 new self() 給 $conn1</span>
   <span class="token variable">$conn1</span> <span class="token operator">=</span> DBConnectionSingleton<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getconn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">//外部調用第二次，static 聲明過的方法 getconn() 與 屬性 $conn, 不再被執行(視為不存在)，所以直接作判斷</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token comment">// 此時 self::$conn 已被第一次作初始化了，所以 self::$conn 是 true，就不會再執行 "self::$conn = new self();", 返回第一次的 new self() 給 $conn2</span>
   <span class="token variable">$conn2</span> <span class="token operator">=</span> DBConnectionSingleton<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getconn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>練習: 設計一單例模式</p>
<p><code>單例模式.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/*
 self: self 在 php 的類別內部使用，表示當前類別本身
       比如在下面的類別中，self 等價於 richestMan
*/</span>

<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">richestMan</span>
<span class="token punctuation">{</span>
  <span class="token comment">//創建單例類別中的唯一單例，聲明一個私有靜態變數</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$richestPeople</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>

  <span class="token comment">//創建單例方法，用來在全局中獲取唯一單例對象</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">findRichestMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">//如果這人不存在就創建一個最富有的人</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$richestPeople</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$richestPeople</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$richestPeople</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">pname</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'最富有的人'</span><span class="token punctuation">;</span>
      <span class="token keyword">echo</span> <span class="token double-quoted-string string">"========"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//如果存在，那麼就不用創建，而是直接把這個人返回就可以了</span>
    <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$richestPeople</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//公有屬性，當對象創建的時候，用來證明對象的身分</span>
  <span class="token keyword">public</span> <span class="token variable">$pname</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$richMan1</span> <span class="token operator">=</span> richestMan<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">findRichestman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$richMan2</span> <span class="token operator">=</span> richestMan<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">findRichestman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$richMan1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$richMan2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>輸出</strong></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/php-mysql-pdo-1.png" class="nofancybox img-center">
</li>
<li><p>結論<br>為何需要單例模式:</p>
<ul>
<li>例一:購物車<br>網站中在任一頁面開啟時，購物車應該都只有一個，依過去類別的概念來作，打開一個頁面實例一個對象一個新的購物車對象，這時就須用單例的結構。</li>
<li>例二:地圖<br>全局中只希望一張地圖，否則一經修改又須一張地圖，將耗時耗力。</li>
</ul>
</li>
</ul>
<h2 id="2-PDO-與-DB"><a href="#2-PDO-與-DB" class="headerlink" title="2. PDO 與 DB"></a>2. PDO 與 DB</h2><ul>
<li><p>為何需使用 PDO</p>
<p><code>mysqli_xxx()</code> 一系列的方法，都是針對 <code>mysql</code> 資料庫的操作。</p>
</li>
<li><p>問題</p>
<p>公司成立剛開始人數約莫只有 5人，客戶幾百人，使用 <strong>mysql</strong> 就足夠應付，但公司發展到一規模階段後，比如員工人數有 5000人，用戶從幾千人變成千萬人時，這時 <code>mysql</code> 就不夠足以處理業務上的需求，資料庫需變大，這時如把 <code>mysql DB</code> 更換成容量更大，體積更大，處理能力更強的資料庫，比如升級成 <code>oracle</code>, 但問題是原先的程式都是透過 <code>mysql</code> 處理，所以一旦要變更資料庫，資料庫操作的指令也要改變，如果有多個 <code>php mysql</code> 程式頁面要轉換(例如: 轉成 <code>oracl</code>)，將造成一大維護成本問題產生，所以　<code>php</code> 提供了一訪問資料庫通用的方法。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/php-mysql-pdo-2.png" width="60%" height="40%" class="nofancybox img-center">

<blockquote>
<p>通過 <code>PHP</code> 操作 <code>PDO</code>, <code>PDO</code> 會將這些操作自動轉換成想要連接的資料庫操作的方法</p>
</blockquote>
</li>
<li><p>描述</p>
<ul>
<li><code>PDO</code> 即 <code>PHP</code> 資料物件&nbsp;(<code>PHP Data Object</code>)。</li>
<li><code>PDO</code> 可被視為是一個工具，而這個工具為 <code>PHP</code> 訪問資料庫定義了一個羽量級的一致介面。</li>
<li>實現 <code>PDO</code> 介面的每個資料庫驅動可以公開具體資料庫的特性作為標準擴展功能。</li>
</ul>
</li>
<li><p>語法<br>   <font color="red">$pdo = new PDO(“DB名稱:host=主機名稱;dbname=DB名”,”DB帳號”,”DB密碼”);</font></p>
</li>
<li><p>注意</p>
<ul>
<li>利用 <code>PDO</code> 擴展自身並不能實現任何資料庫功能，必須使用一個具體資料庫的 <code>PDO</code> 驅動來訪問資料庫服務。</li>
<li><font color="red">PDO提供了一個【資料訪問】抽象層，這意味著不管使用哪種資料庫，都可以用相同的函數(方法)來查詢和獲取資料。</font></li>
<li><code>PDO</code> 不提供資料庫抽象層，它不會重寫 <code>SQL</code>，也不會模擬缺失的特性。<br>如果需要的話，應該使用一個成熟的抽象層。</li>
<li>從 <code>PHP 5.1</code> 開始附帶了 <code>PDO</code>，在 <code>PHP 5.0</code> 中是作為一個PECL擴展使用。<br><code>PDO</code> 需要 <code>PHP 5</code> 核心的新特性，因此不能在較早版本的 <code>PHP</code> 上運行。</li>
</ul>
</li>
<li><p>總結<br>   <code>PDO</code> 就像是一把槍，而使用哪種資料庫就好比是選擇不同的子彈。<br>   不管子彈有怎樣的特性，擊發的方法總沒有偏差，都是開槍而已。</p>
<blockquote>
<p>補充：在連接DB的時候，並不是每一次的連接都能保證一定完成。因此我們必須設置一個”保險”來説明我們監測連接的情況，這個東西就是<br> <font color="red"> <code>try…catch</code> </font> 機制。</p>
</blockquote>
</li>
<li><p>範例</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">try</span><span class="token punctuation">{</span>
  <span class="token variable">$pdo</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=frankdb"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token double-quoted-string string">"錯誤"</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在整個 <code>try…catch</code> 結構中，<code>try</code> 部分是可能會出現異常的代碼。<br>而當代碼執行的過程當中一旦 <code>try</code> 部分的代碼真的發生了異常，那麼會立即將這個異常拋出，並執行 <code>catch</code> 部分的代碼。<br><code>catch</code> 部分的形參 <code>$e</code> 就是用來接收拋出的異常的。</p>
<p>可以這樣認為：上述結構是獲取 <code>PDO</code> 時的一個固定結構！</p>
<p><code>pdo對象與mysql數據庫連接.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token comment">/* php 的 PDO 連接資料庫
   $pdo = new PDO("mysql:host=localhost;dbname=class", $user, $password);
   print_r($pdo);
   建立若成功會返回一個空對象。PDO 是一個介面，是一個工具，所以裡面什麼都沒有
   pdo 對象是一個在頁面中不可見內容的對象，這個對象只能靠創建成功與失敗來判斷連接，而無法查看內部的屬性和屬性值。
   因為 PDO 物件唯一空值，即為 false, 所以無法用 if ($pdo) 來做判斷是否連線，所以PHP提供另一機制來判斷 
   try{}catch(PDOException $e){}
   輸出:
   PDO object_get(${1:$object, {
   }
*/</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
   <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=class"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//print_r($pdo);</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"錯誤"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="3-singleton-獲取-PDO"><a href="#3-singleton-獲取-PDO" class="headerlink" title="3. singleton 獲取 PDO"></a>3. singleton 獲取 PDO</h2><ul>
<li><p>目的: 透過單例模式來確保唯一的 $PDO 對象去操作資料庫。</p>
</li>
<li><p>說明:<br>操作資料庫時，後台的 php 頁面 與 mysql DB 是兩個獨立的東西，資料庫如同一表格，而 php 如同一文件，若要操作資料庫需要借助像是 document 類似的對象，這裡就是之前建立的$PDO 對象。<br>所以要操作資料庫就得透過 $PDO 對象，但如果操作:</p>
<ul>
<li><p>PHP 要插入資料到資料庫時時，先找到一個 $PDO 對象。</p>
</li>
<li><p>PHP 要刪除資料到資料庫時時，再先找到一個 $PDO 對象。</p>
</li>
<li><p>:</p>
<p>假設此刻資料庫為空，若有兩個對象 $PDO 來操作:<br>case1: 一個 $PDO 先+1, 另一個 $PDO 再-1, 不會有問題發生。<br>case2: 但順序若相反，先做 -, 但資料庫此刻並無數據(一開始為空)，所以操作會失敗。</p>
<p>意味著若使用兩個  $PDO 對象來操作，結果可能會不相同;因為沒辦法確認哪一個 $PDO 對象會先執行(程序是多執行緒性的)。<br>所以解決的唯一辦法，就是指定同一個 $PDO 對象來做操作。</p>
</li>
</ul>
</li>
<li><p>範例<br><code>03單例模式獲取pdo對像.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//通過單例模式，獲取唯一 $PDO:</span>
<span class="token keyword">class</span> <span class="token class-name">singletonPDO</span><span class="token punctuation">{</span>
  <span class="token comment">//創建私有 $靜態變數或常數</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
  <span class="token comment">//獲取單例對象的方法</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//當前類的靜態變數, 第一次調用若為空值時</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//創建一個 $pdo(該 $pdo 為靜態，所以透過 :: 呼叫)</span>
      <span class="token keyword">try</span><span class="token punctuation">{</span>
         self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=class"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOException <span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">echo</span> <span class="token double-quoted-string string">"錯誤訊息為: "</span> <span class="token punctuation">.</span> <span class="token variable">$error</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//使用</span>
<span class="token variable">$pdo1</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每次使用 DB 要連上 DB 都要寫一次，太麻煩，所以將其寫成一獨立檔案，改成:</p>
<p><code>singletonPDO.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//通過單例模式，獲取唯一 $PDO:</span>
<span class="token keyword">class</span> <span class="token class-name">singletonPDO</span>
<span class="token punctuation">{</span>
  <span class="token comment">//創建私有 $靜態變數或常數</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
  <span class="token comment">//獲取單例對象的方法</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token comment">//當前類的靜態變數, 第一次調用若為空值時</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//創建一個 $pdo(該 $pdo 為靜態，所以透過 :: 呼叫)</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
              self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=class"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">echo</span> <span class="token double-quoted-string string">"錯誤訊息為: "</span> <span class="token punctuation">.</span> <span class="token variable">$error</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然後再來引用:</p>
<p><code>03單例模式獲取pdo對像.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">require_once</span> <span class="token single-quoted-string string">'singletonPDO.php'</span><span class="token punctuation">;</span>
<span class="token variable">$pdo1</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo2</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo3</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//測試，若連線成功會回傳一個 PDO空物件</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$pdo1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="4-PDO-實現-DB-增刪改查"><a href="#4-PDO-實現-DB-增刪改查" class="headerlink" title="4. PDO 實現 DB 增刪改查"></a>4. PDO 實現 DB 增刪改查</h2><p> 在上說明中說過，pdo是一種【資料訪問】層的抽象。<br> 因此本質上來講在面對同一種DB進行操作的時候，pdo的操作和php本身直接操作沒有區別。</p>
<ul>
<li><p>範例<br><code>04pdo實現mysql增刪改操作.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">require_once</span> <span class="token double-quoted-string string">"singletonPDO.php"</span><span class="token punctuation">;</span>
<span class="token comment">//通過單例方法獲取全域pdo單例對象</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getpdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//exec()方法是pdo物件的執行方法，相當於php中的query()方法.</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 新增
   $sql = "INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values('test','test','1qaz@wsx','男','2019-08-01','member','test@gmail.com','http://wda.edu.tw/test','098876543','台北市',1,'2008-10-21 12:06:08','2008-10-21 12:06:08')";
*/</span>

<span class="token comment">//刪除</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"DELETE FROM members WHERE m_username='test'"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//通過 pdo執行db操作</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"success"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"error"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試<br>開啟網頁，執行 <code>04pdo實現mysql增刪改操作.php</code>。</p>
</li>
<li><p>結果: success</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/php-mysql-pdo-3.png" class="nofancybox">
</li>
<li><p>刪除功能<br>更換上述程式的 $sql 為:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"DELETE FROM members WHERE username='test'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>更新功能<br>更換上述程式的 $sql 為:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//修改</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"UPDATE members set `m_sex`= '女'"</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">" WHERE m_id = 11"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試: 開啟網頁，執行 <code>04pdo實現mysql增刪改操作.php</code>。</p>
</li>
<li><p>結果: success</p>
<p><strong><font color="red">查詢</font></strong> ，回傳不是布林值:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT * FROM members WHERE 1"</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//這裡得到的是一個物件</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// int(0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>輸出:<br>int(0)</p>
<blockquote>
<p>新增、刪除、修改執行上沒問題，但<strong>查詢</strong>的結果是一個不可見的值，而且這不可見的值，不知如何處理，這裡需借用 PDO 預處理 <code>prepare</code> 和交易處理 <code>transaction</code></p>
</blockquote>
</li>
</ul>
<h2 id="5-PDO-異常處理-Exception"><a href="#5-PDO-異常處理-Exception" class="headerlink" title="5. PDO 異常處理 Exception"></a>5. PDO 異常處理 Exception</h2><p>  <strong>Exception</strong> 指的都是在執行 db 操作的時候發生異常，例如SQL語句異常或語法錯誤。而如果是DB<br>連接發生的錯誤則不會走本異常處理，而是直接由pdo輸出連接失敗。</p>
<ul>
<li><p>異常分兩大類:</p>
<ul>
<li>連接PDO時產生的異常，用 try {} catch(){} 去描述</li>
<li>操作DB時產生的異常，用下面三方法來解決。</li>
</ul>
<p>異常處理Exception是指在<code>try…catch</code>時發生異常時的處理手段，通常異常處理都是直接拋出提醒即可。而設置提醒的手段有三種設置方式：</p>
</li>
<li><p>預設模式<br><font color="red">主要依賴於系統提供的errorCode和errorInfo屬性實現</font></p>
</li>
<li><p>警報模式：<br><font color="red">為pdo設置setAttribu(PDO::ATTR_ERRMODE,PDO::ERRMODE_WARNING);</font></p>
</li>
<li><p>中斷模式：<br><font color="red">為pdo設置setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);</font><br><font color="orange">小貼士：需要說明的是異常處理並不是三種模式必須有一種顯式的去表現出來，哪怕一種都不主動寫出也不會認為是違法。只不過主動實現異常處理能夠在異常發生的時候給予我們更好的提示，因此推薦如果允許的情況下盡可能的添加異常處理模組代碼。</font></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">try</span><span class="token punctuation">{</span>
  <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=class"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//$pdo -&gt; setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_WARNING);</span>
  <span class="token comment">//$pdo -&gt; setAttribut(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>PDOExeption <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token variable">$e</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)"</span><span class="token punctuation">;</span>

<span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"succes"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token variable">$pdo</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">errorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$pdo</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">errorInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>範例:</p>
<p><code>05pdo異常捕獲.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token comment">// 第一類異常，數據庫連接異常</span>
<span class="token comment">// 這種異常直接通過try...catch捕獲</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'mysql:host=localhost;dbname=class'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'root'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 第二類異常，第二種處理方法</span>
  <span class="token comment">// 設置當數據庫操作發生異常的時候，彈出警報，但程序執行不會中斷</span>
  <span class="token comment">//$pdo -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);</span>

  <span class="token comment">// 第二類異常，第三種處理方法</span>
  <span class="token comment">// 設置當數據庫操作發生異常的時候，進行中斷</span>
  <span class="token comment">// $pdo -&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span>

<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token single-quoted-string string">'db 連接失敗，原因是：'</span> <span class="token punctuation">.</span> <span class="token variable">$err</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//連接成功的話</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"UPDATE members set `m_sex`= '男'"</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">" WHERE m_id = 11"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token single-quoted-string string">'操作成功'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 第二類異常，第一種處理方法(直接通過系統提供的errorCode()和errorInfo()屬性實現)</span>
  <span class="token keyword">echo</span> <span class="token single-quoted-string string">'操作失敗'</span><span class="token punctuation">;</span>
  <span class="token comment">// echo $pdo-&gt;errorCode();</span>
  <span class="token comment">// echo $pdo-&gt;errorInfo();</span>
<span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意: 即使 SQL 語句執行成功，但沒更新資料(例:無須改變)，仍會回傳 false。</p>
</blockquote>
</li>
</ul>
<h2 id="6-PDO-預處理-prepare"><a href="#6-PDO-預處理-prepare" class="headerlink" title="6. PDO 預處理 prepare"></a>6. PDO 預處理 prepare</h2><p>   預處理語句<code>prepare</code>是 <code>pdo</code> 提供的一中 <code>db</code> 操作方式。其語言邏輯與正常的 <code>pdo</code> 訪問相同。但區別在於 <code>prepare</code> 語句允許用戶在【設置sql語句】與【執行sql語句】之間部分進行參數的注入與提取操作，而不是像正常的pdo訪問一樣直接將參數寫死。</p>
<ul>
<li><p>正常 <code>pdo</code> 直接訪問程序<br>【設置 <code>sql</code> 語句】→【執行 <code>sql</code> 語句】</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SQL 語句"</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>預處理訪問程序<br>【設置 <code>sql</code> 語句】→ <font color="red">【執行 sql 語句】</font> →  <font color="red">【處理sql中參數】</font>  → 【執行sql語句】</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SQL 語句"</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>prepare</code> 是另一種像是 <code>$PDO</code> 提供資料庫操作 <code>exec</code> 的另一種方法，只是部分功能。<br>預先處理得到一種結果，再用這結果執行另一新方法，這新方法可處理sql中所需參數，然後最後再執行 <code>$pdo-&gt;exec($sql)</code>。</p>
</li>
<li><p>區別<br>在於再處理參數時，預處理可以將當初用  <code>$pdi-&gt;exec();</code> 處理上，看不到，拿不到，獲取不到的內容，通過處理參數後可取得。</p>
<p>處理分三部分</p>
<ol>
<li>關鍵核心: <code>prepare()</code> 預<font color="red">處理 <code>sql</code> 語句</font> 和 <code>execute()</code> <font color="red">處理sql 中參數</font> 兩種方法，</li>
<li>bindValue()</li>
<li>bindColumn()</li>
</ol>
</li>
</ul>
<h3 id="6-1-prepare-方法和execute-方法"><a href="#6-1-prepare-方法和execute-方法" class="headerlink" title="6.1 prepare()方法和execute()方法"></a>6.1 prepare()方法和execute()方法</h3><ol>
<li><p>描述：</p>
<ul>
<li><p>prepare()方法為預處理sql語句的方法，能夠讓pdo預先處理【半成品的】sql語句。<br>並生成一個 <code>PDOStatementObject</code> 類型的結果。</p>
</li>
<li><p>execute()方法是提供給 PDOStatementObject 類型物件去執行的【成品】sql語句的方法並生成一個 <code>PDOStatementObject</code> 類型的結果。</p>
</li>
</ul>
</li>
<li><p>說明：</p>
<ul>
<li><p>交由 pdo去prepare預處理的【半成品】sql語句，使用?問號作為預留位置，表示待傳參的參數</p>
</li>
<li><p>prepare預處理必須只能處理【半成品】sql語句，如果是完整則需要使用exec方法執行</p>
</li>
<li><p>execute()方法允許一個陣列作為參數，將參數帶入到預處理的sql語句中，並且會將結果存放到 PDOStatementObject 對象中。</p>
</li>
<li><p>PDOStatementObject 物件在預處理的不同階段有著不同的含義！！不可混淆，必須根據上下文判斷。</p>
</li>
</ul>
</li>
<li><p>語法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>
<span class="token variable">$pdoStatementObject</span> <span class="token operator">=</span> <span class="token variable">$pdoStatementObject</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$pdoStatementObject</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span>test<span class="token single-quoted-string string">','</span>test<span class="token single-quoted-string string">','</span><span class="token number">1</span>qaz@wsx<span class="token single-quoted-string string">','</span>男<span class="token single-quoted-string string">','</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">01</span><span class="token single-quoted-string string">','</span>member<span class="token single-quoted-string string">','</span>test@gmail<span class="token punctuation">.</span>com<span class="token single-quoted-string string">','</span>http<span class="token punctuation">:</span><span class="token comment">//wda.edu.tw/test','098876543','台北市',1,'2008-10-21 12:06:08','2008-10-21 12:06:08'));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>
<span class="token variable">$pdoStatementObject</span> <span class="token operator">=</span> <span class="token variable">$pdoStatementObject</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面寫法等同:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$pdoStatementObject</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`) values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>範例:</p>
<p><code>06pdo預處理語句.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token single-quoted-string string">'singletonPDO.php'</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//半成品sql語句</span>
<span class="token comment">//只能由prepare 預處理語句執行</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$halfPro</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 得到的是 PDOStatement, PDO 的語句對象，裡面有</span>
<span class="token comment">/*
  object(PDOStatement)#2
  (1) {
        ["queryString"]=&gt; string(195) "INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values(?,?,?,?,?,?,?,?,?,?,?,?,?)"
      }
*/</span>
<span class="token comment">//將半成品通過 execute方法傳入參數，變成成品</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'test'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'$test'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'男'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'2019-08-01'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'member'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'test@gmail.com'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'http://wda.edu.tw/test'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'098876543'</span><span class="token punctuation">,</span>台北市<span class="token single-quoted-string string">',1,'</span><span class="token number">2008</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">21</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">08</span><span class="token single-quoted-string string">','</span><span class="token number">2008</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">21</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">08</span>'<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//執行成功回傳 TRUE</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h3 id="6-2-bindColumn-方法"><a href="#6-2-bindColumn-方法" class="headerlink" title="6.2 bindColumn()方法"></a>6.2 bindColumn()方法</h3><ul>
<li><p>描述：<br><code>bindColumn()</code> 方法允許將執行結果的一列資料綁定到一個指定物件上，本方法需要在 <code>execute()</code> 方法執行結束後在執行。</p>
</li>
<li><p>語法：<font color="red">$pdoStatementObject-&gt;bindColumn(index,指定變數);</font></p>
</li>
<li><p>說明：</p>
<ul>
<li>第一個參數表示結果中的第幾列(col)資料。第一列(col)就寫1，以此類推。<blockquote>
<p>指: SQL 執行的到結果的欄位索引值。</p>
</blockquote>
</li>
<li>第二個參數表示資料要賦值給那個變數，隨便一個變數即可。<blockquote>
<p>指: 用來儲存該欄位的值。</p>
</blockquote>
</li>
<li>bindColumn()方法一次綁定一列給一個變數，如需綁定多個，則執行多次即可。</li>
</ul>
</li>
<li><p>例子：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM members WHERE 1"</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">=</span> $pdo <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">prepare</span><span class="token punctuation">(</span>$<span class="token keyword">sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>$name<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>$username<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>$passwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>$sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>$birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>$<span class="token keyword">level</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>$email<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>$url<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>$phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>$address<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span>$login<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span>$logintime<span class="token punctuation">)</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">-</span><span class="token operator">&gt;</span> bindColumn<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span>$jointime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span>$<span class="token keyword">row</span> <span class="token operator">=</span> $pdoStatementObject<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">fetch</span><span class="token punctuation">(</span>PDO::FETCH_COLUMN<span class="token punctuation">)</span><span class="token punctuation">)</span>{
  echo <span class="token string">"{$name}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$username}"</span><span class="token punctuation">.</span> <span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$passwd}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$sex}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$birthday}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$level}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$email}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$url}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$phone}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$login}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$logintime}"</span><span class="token punctuation">.</span><span class="token string">"----"</span><span class="token punctuation">.</span><span class="token string">"{$jointime}"</span><span class="token punctuation">.</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>練習: 修改原 <code>06pdo預處理語句.php</code> 的SQL 插入操作，變成查詢 <code>06pdo預處理語句_查詢.php</code>:</p>
<p><code>06pdo預處理語句_查詢.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// bindColumn</span>
<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token single-quoted-string string">'singletonPDO.php'</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//半成品sql語句</span>
<span class="token comment">//只能由prepare 預處理語句執行</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"SELECT * FROM members WHERE 1"</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$halfPro</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 得到的是 PDOStatement, PDO 的語句對象，裡面有</span>
<span class="token comment">// object(PDOStatement)#2 (1) {</span>
<span class="token comment">// ["queryString"]=&gt;</span>
<span class="token comment">//  string(51) "INSERT INTO members values(?,?,?,?,?,?,?,?,?,?,?,?)"</span>
<span class="token comment">// }</span>
<span class="token comment">//將半成品通過 execute方法傳入參數，但尚讀不出來</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//將結果中的內容綁定在指定變數上</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token variable">$passwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token variable">$sex</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token variable">$birthday</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token variable">$level</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token variable">$phone</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token variable">$address</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token variable">$login</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token variable">$logintime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindColumn</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token variable">$jointime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//讀取查詢結果</span>
<span class="token variable">$info</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_COLUMN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'name'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'username'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'passwd'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$passwd</span><span class="token punctuation">,</span>
      <span class="token single-quoted-string string">'sex'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$sex</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'birthday'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$birthday</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'level'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$level</span><span class="token punctuation">,</span>
      <span class="token single-quoted-string string">'email'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$email</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'url'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'phone'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$phone</span><span class="token punctuation">,</span>
      <span class="token single-quoted-string string">'address'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$address</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'login'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$login</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'logintime'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$logintime</span><span class="token punctuation">,</span>
      <span class="token single-quoted-string string">'jointime'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token variable">$jointime</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* while ($row = $halfPro-&gt;fetch(PDO::FETCH_COLUMN)) {
     echo "{$name}" . "----" . "{$username}" . "----" . "{$passwd}" . "----" . "{$sex}" . "----" . "{$birthday}" . "----" . "{$level}" . "----" . "{$email}" . "----" . "{$url}" . "----" . "{$phone}" . "----" . "{$login}" . "----" . "{$logintime}" . "----" . "{$jointime}" . "&lt;br/&gt;"; 
   }
*/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-bindValue-方法"><a href="#3-bindValue-方法" class="headerlink" title="3. bindValue()方法"></a>3. bindValue()方法</h3><ol>
<li><p>前言:<br>之前的方式，<code>SQL</code> 查詢中，使用 <code>prepare()</code> 做SQL 語句預處理，得到的半成品，再利用 <code>execute()</code>　傳遞所需參數，同時轉換得到成品，但讀不到內容，將結果中的內容透過 <code>bindColumn()</code> 來綁定資料在指定變數上。</p>
<p>若不想使用 <code>execute()</code> 來傳遞參數，可以改用 <code>bindValue()</code> 來給半成品的 SQL 語句進行傳值。</p>
</li>
<li><p>描述：<br>bindValue()方法是提供給　pdo　預處理之後得到的　PdoStatementObject 物件使用的方法，用來給【半成品】的sql語句進行傳值。</p>
</li>
<li><p>語法：<font color="red">$pdoStatementObject-&gt;bindValue(index,value);</font></p>
</li>
<li><p>說明:</p>
<ul>
<li>第一個參數表示給sql語句中第幾個參數傳值。第一個就寫1，以此類推。</li>
<li>第二個參數表示給sql語句中的對應參數傳的具體的值。</li>
<li>bindValue一次綁定一個參數，如果有多個則需要調用多次。</li>
</ul>
</li>
<li><p>例子：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO members values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>
$pdoStatementObject <span class="token operator">=</span> $pdo<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">prepare</span><span class="token punctuation">(</span>$<span class="token keyword">sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'1qaz@wsxd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'2019-08-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'member'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'test@gmail.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'http://wda.edu.tw/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'098876543'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'台北市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'2008-10-21 12:06:08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$halfPro<span class="token operator">-</span><span class="token operator">&gt;</span>bindValue<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'2008-10-21 12:06:08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
echo $pdoStatementObject<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>07pdo補充bindValue方法.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token single-quoted-string string">'singletonPDO.php'</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>

<span class="token variable">$halfPro</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//在prepare()方法和execute()方法之間，對sql語句中的？傳值</span>
<span class="token comment">//提供了一種更靈活的方式，來編輯sql語句</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'1qaz@wsxd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2019-08-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'member'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test@gmail.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'http://wda.edu.tw/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'098876543'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'台北市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2008-10-21 12:06:08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2008-10-21 12:06:08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//習慣上execute()方法不傳參，僅代表執行作用</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'test'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'1qaz@wsx'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'男'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2019-08-01'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'member'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test@gmail.com'</span><span class="token punctuation">,</span> 'http<span class="token punctuation">:</span><span class="token comment">//wda.ed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這種方式好處，是傳遞的值可以寫成一變數,提供了一種更靈活的方式，來編輯 <code>sql</code> 語句。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//$name = $_POST['name']</span>
<span class="token comment">//$username = $_POST['username']</span>

<span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token single-quoted-string string">'singletonPDO.php'</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"INSERT INTO members (`m_name`,`m_username`,`m_passwd`,`m_sex`,`m_birthday`,`m_level`,`m_email`,`m_url`,`m_phone`,`m_address`,`m_login`,`m_logintime`,`m_jointime`)values(?,?,?,?,?,?,?,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>

<span class="token variable">$halfPro</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//在prepare()方法和execute()方法之間，對sql語句中的？傳值</span>
<span class="token comment">//提供了一種更靈活的方式，來編輯sql語句</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'1qaz@wsxd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2019-08-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'member'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'test@gmail.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'http://wda.edu.tw/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'098876543'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'台北市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2008-10-21 12:06:08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'2008-10-21 12:06:08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//習慣上execute()方法不傳參，僅代表執行作用</span>
<span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//成功會回傳 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="7-PDO-交易處理-transaction"><a href="#7-PDO-交易處理-transaction" class="headerlink" title="7. PDO 交易處理 transaction"></a>7. PDO 交易處理 transaction</h2><ul>
<li><p>交易：多個事件組成的結構。</p>
</li>
<li><p>事件：事件實際上就是<font color="red">預處理語句執行的<b>execute</b>語句</font>。</p>
<blockquote>
<p>即多個　execute 子句</p>
</blockquote>
</li>
<li><p>注意：</p>
<ol>
<li><p>整個交易操作必須放到　<code>try...catch</code>　中，這是因為我們並不能保證執行的事件一定成功。<br>而對於整個交易而言，任何一個事件的失敗都會導致catch的觸發。<br>而catch觸發就意味著必須將之前做出的所有的操作都必須還原回滾操作: <code>$pdo-&gt;rollBack()</code></p>
</li>
<li><p>動作陳述式(CRUW)必須在交易開啟之後執行，在交易提交之前停止.<br>開啟交易：<code>$pdo-&gt;beginTransaction();</code><br>關閉交易：<code>$pdo-&gt;commit();</code></p>
</li>
<li><p>中文處理方案(避免亂碼)：<br>讀取：<code>$pdo-&gt;query("set names utf8");</code><br>插入：<code>$pdo-&gt;exec('set names utf8');</code></p>
</li>
<li><p>銀行轉帳:</p>
<ul>
<li>提錢 -&gt; 轉多少 -&gt; 輸入密碼 -&gt; 成功　-&gt; 轉帳成功</li>
<li>提錢 -&gt; 轉多少 -&gt; 輸入密碼 -&gt; 錯誤　-&gt; 轉帳失敗</li>
</ul>
<blockquote>
<p>只有成功，才允許轉錢出去。</p>
</blockquote>
</li>
</ol>
</li>
<li><p>交易目的：保證只有在交易成功才會有影響發生，否則不會有任何異動</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">require_once</span> <span class="token double-quoted-string string">"singletonPDO.php"</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getpdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
   <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"UPDATE members set `m_sex`=?, `m_login`=?"</span><span class="token punctuation">;</span>
   <span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">" WHERE m_id = ?"</span><span class="token punctuation">;</span>
   <span class="token variable">$pdoso</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">//成功</span>
   <span class="token variable">$pdoso</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'女'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span>’<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//失敗，參數不符</span>
   <span class="token variable">$pdoso</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">777</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">echo</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token variable">$pdo</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">rollBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">echo</span> <span class="token double-quoted-string string">"失敗"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>08pdo交易處理transaction方法.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">require_once</span> <span class="token single-quoted-string string">'singletonPDO.php'</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> singletonPDO<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">//開啟交易處理</span>
  <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//創建一個修改sql語句</span>
  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"UPDATE members set `m_sex`=?, `m_login`=?"</span><span class="token punctuation">;</span>
  <span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">" WHERE m_id = ?"</span><span class="token punctuation">;</span>

  <span class="token variable">$halfPro</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//執行第一條execute語句(第一個事件)</span>
  <span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'女'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//執行第二條execute語句(第二個事件),沒給 m_id， 數據不足，會觸發 Exception，本次交易發生異常</span>
  <span class="token comment">//操作錯誤，屬於第一類異常，執行到這有問題，就該中斷停止繼續往下執行，異常需設中斷模式</span>
  <span class="token variable">$halfPro</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'lileilei'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//提交交易</span>
  <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">rollBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token single-quoted-string string">'交易處理失敗，數據庫回滾到交易開始之前的狀態，沒有受到任何影響'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行第二條 <code>execute</code> 語句(第二個事件),沒給 <code>m_id</code>， 不足數據，所以會觸發 <code>Exception</code>，本次交易發生異常。</p>
<p>此錯誤為操作錯誤，屬於第一類異常，執行到這裏有問題，就該中斷停止繼續往下執行，異常需設中斷模式，在單例模式產生 <code>$PDO</code> 就要加入：<br><code>$pdo -&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//通過單例模式，獲取唯一 $PDO:</span>
<span class="token keyword">class</span> <span class="token class-name">singletonPDO</span>
<span class="token punctuation">{</span>
  <span class="token comment">//創建私有 $靜態變數或常數</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
  <span class="token comment">//獲取單例對象的方法</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getPdo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">//當前類的靜態變數, 第一次調用若為空值時</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//創建一個 $pdo(該 $pdo 為靜態，所以透過 :: 呼叫)</span>
  　  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    　  self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"mysql:host=localhost;dbname=class"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"1qaz@wsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
       self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>PDOException <span class="token variable">$error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"錯誤訊息為: "</span> <span class="token punctuation">.</span> <span class="token variable">$error</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  　  <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$pdo</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="8-學生管理實例"><a href="#8-學生管理實例" class="headerlink" title="8. 學生管理實例"></a>8. 學生管理實例</h2><hr>
<h2 id="Ajax與Http協議"><a href="#Ajax與Http協議" class="headerlink" title="Ajax與Http協議"></a>Ajax與Http協議</h2><h2 id="Ajax與Http協議詳解"><a href="#Ajax與Http協議詳解" class="headerlink" title="Ajax與Http協議詳解"></a>Ajax與Http協議詳解</h2><p>我們在jQuery中已經提到了Ajax，並且通過$.ajax()方法實現了和前後臺完成的簡單交互。但事實上在工作當中jQuery所提供的功能卻是遠遠不夠的，絕大部分的公司實際上並不希望他們的開發者使用現有的Ajax框架，而是選擇自行封裝一個功能相似但針對性卻更強的內容。因此我們必須知道在js內部，Ajax到底是怎樣工作的。</p>
<p>而在此之前，讓我們先對Ajax本身做一些詳細的說明。</p>
<ul>
<li><p>描述：Ajax全名為Asynchronous javascript and xml。</p>
<pre><code> &lt;font colr='red'&gt;是指圍繞【由js向伺服器發起http請求】這個功能而開發的一整套完整的做法。&lt;/font&gt;</code></pre>
</li>
<li><p>由來：99 年 Microsoft 公司第一次在 IE5.0中引入此功能</p>
<pre><code> 04 年 Gmail 發佈、05 年 Google Map發佈時此功能才被重視
 05 年 2月 Ajax正式提出
 06 年 W3C 發佈其對應的國際化標準</code></pre>
</li>
<li><p>概述：Ajax模組在處理網路請求的時候包括以下四個步驟</p>
<ol>
<li>創建Xhr對象</li>
<li>發出HTTP請求</li>
<li>接收伺服器回傳的資料</li>
<li>更新網頁數據</li>
</ol>
</li>
<li><p>補充：<code>Ajax</code>可以發出同步請求，也可以發出非同步請求。</p>
<pre><code> 但大多數情況下指的是非同步請求，因為同步的 `Ajax` 請求對流覽器會產生"阻塞效應"。</code></pre>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'GET'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'ajax.php'</span><span class="token punctuation">,</span><span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="xhr對象"><a href="#xhr對象" class="headerlink" title="xhr對象"></a>xhr對象</h2><h2 id="xhr物件發送請求整體感知"><a href="#xhr物件發送請求整體感知" class="headerlink" title="xhr物件發送請求整體感知"></a>xhr物件發送請求整體感知</h2><p>【Ajax發送請求】這件事情並不是一句話帶過就可以的，在Ajax中對整個請求從創建到發送都有著一套嚴格的標準流程。就好像車間生產產品，流水線上每一個步驟的操作完畢之後才能打包出售。</p>
<p>在Ajax規則中，”請求”<font color="red">從創建到被發送</font>需要至少經歷如下幾個步驟：</p>
<p>通過XMLHttpRequest類創建xhr對象<br>為xhr物件添加屬性與回檔方法<br>令xhr物件執行open()方法，指明請求被發往某處<br>令xhr物件執行send()方法，發出請求。</p>
<ul>
<li>說明：XMLHttpRequest物件用來在【流覽器】與【伺服器】之間傳送資料。<br>   <font color="red">通俗上來說將此物件稱為request請求物件、請求物件或請求。</font></li>
</ul>
<h3 id="xhr-物件的常用屬性與方法"><a href="#xhr-物件的常用屬性與方法" class="headerlink" title="xhr 物件的常用屬性與方法"></a>xhr 物件的常用屬性與方法</h3><p>  在整體感知中我們看到的例子中的屬性和方法，基本都是要掌握的內容。或許有一些內容並沒有體現在上面，但相信我他們都會是你今後離不開的東西。</p>
<h4 id="onreadystate-屬性"><a href="#onreadystate-屬性" class="headerlink" title="onreadystate 屬性"></a>onreadystate 屬性</h4><ul>
<li><p>描述：<code>onreadystatechange</code> 屬性指向一個回呼函數。</p>
<pre><code> 當頁面的載入狀態發生改變的時候 `readyState` 屬性就會跟隨發生變化，
 而這時 `readystatechange` 屬性所對應的回呼函數就會自動被調用。</code></pre>
</li>
<li><p>語法：<font color="red">xhr.onreadystatechange = function(){};</font></p>
</li>
</ul>
<h4 id="readyState-屬性"><a href="#readyState-屬性" class="headerlink" title="readyState 屬性"></a>readyState 屬性</h4><ul>
<li><p>描述：是一個唯讀屬性，用一個整數和對應的常量來表示 <code>XMLHttpRequest</code> 請求當前所處的狀態</p>
<pre><code> 一般會在 `onreadystatechange` 事件的回呼函數中，
 通過判斷 `readyState` 屬性的值，進而執行不同狀態對應的函數。</code></pre>
</li>
<li><p>語法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">// 執行對應的函數</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>說明：<br>值為 <code>0</code>,對應常量 <code>UNSENT</code><br>表示 <code>XMLHttpRequest</code> 實例已經生成，但是 <code>open()</code> 方法還沒有被調用。</p>
<p>值為 <code>1</code>,對應常量 <code>OPENED</code><br>表示 <code>send()</code> 方法還沒有被調用，仍然可以使用 <code>setRequestHeader()</code> 設定 <code>HTTP</code> 請求頭</p>
<p>值為 <code>2</code>,對應常量 <code>HEADERS_RECEIVED</code><br>表示 <code>send()</code> 方法已經執行，並且頭資訊和狀態碼已經收到。</p>
<p>值為 <code>3</code>,對應常量 <code>LOADING</code><br>表示正在接收伺服器傳來的 <code>body</code> 部分的資料，如果 <code>responseType</code> 屬性是text或者空字串，responseText就會包含已經收到的部分資訊。</p>
<p>值為 <code>4</code>,對應常量 <code>DONE</code>，表示伺服器資料已經完全接收，或者本次接收已經失敗了。</p>
</li>
</ul>
<h4 id="status屬性"><a href="#status屬性" class="headerlink" title="status屬性"></a>status屬性</h4><ul>
<li><p>描述：表示本次請求所得到的HTTP狀態碼，它是一個整數。</p>
</li>
<li><p>語法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//通信成功</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>說明：<br>  a.本屬性是唯讀屬性。<br>  b.本屬性有以下可能值：</p>
<p>200, OK，訪問正常<br>301, Moved Permanently，永久移動<br>302, Move temporarily，暫時移動<br>304, Not Modified，未修改<br>307, Temporary Redirect，暫時重定向<br>401, Unauthorized，未授權<br>403, Forbidden，禁止訪問<br>404, Not Found，未發現指定網址<br>500, Internal Server Error，伺服器發生錯誤</p>
</li>
<li><p>補充：一般來說認為 200 就是通信成功的標誌。</p>
</li>
</ul>
<h4 id="statusText屬性"><a href="#statusText屬性" class="headerlink" title="statusText屬性"></a>statusText屬性</h4><ul>
<li>描述：表示伺服器發送的狀態提示，是一個唯讀字串。</li>
<li>語法：<code>&lt;font color='red'&gt;xhr.statusText&lt;/font&gt;</code></li>
<li>說明：不同於status屬性，該屬性返回狀態碼所對應的狀態資訊。<pre><code> 比如OK。</code></pre>
</li>
</ul>
<h4 id="responseText屬性"><a href="#responseText屬性" class="headerlink" title="responseText屬性"></a>responseText屬性</h4><ul>
<li><p>描述：返回從伺服器接收到的字串內容，該屬性為唯讀。</p>
<pre><code> 如果本次請求沒有成功或者資料不完整，該屬性就會等於null。
 如果伺服器返回的資料格式是JSON，就可以使用responseText屬性來進行資料解析。</code></pre>
</li>
<li><p>語法：<code>&lt;font color='red'&gt;xhr.responseText&lt;/font&gt;</code></p>
</li>
</ul>
<h4 id="open-方法"><a href="#open-方法" class="headerlink" title="open()方法"></a>open()方法</h4><ul>
<li><p>描述：表示要將請求發往某處，只是設置而不是真的發送。</p>
</li>
<li><p>語法：xhr.open(‘請求類型’，’url地址’，是否非同步);</p>
</li>
<li><p>說明：</p>
<ul>
<li>第一個參數用來設置 <code>get/post</code> 請求</li>
<li>第二個參數用來設置請求發送到的 <code>url</code> 地址</li>
<li>第三個參數是布林值用來設置是否非同步發送，預設 <code>false</code> 表示同步。</li>
</ul>
</li>
<li><p>補充：<br>目前因為我們的頁面都採用 <code>localhost</code> 方式在本地主機直接訪問，<br>因此 <code>url</code> 直接寫出 <code>php</code> 檔的相對路徑即可。</p>
<p>而如果通過其他方式打開可能會引起js的跨域問題，就會報錯。<br>而這並不是今天的內容。</p>
</li>
</ul>
<h4 id="setRequestHeader-方法"><a href="#setRequestHeader-方法" class="headerlink" title="setRequestHeader()方法"></a>setRequestHeader()方法</h4><ul>
<li><p>描述：用於設置HTTP頭信息。</p>
</li>
<li><p>語法：xhr.setRequestHeader(‘key’，’value’);</p>
</li>
<li><p>說明：<br>   本方法必須在open()之後、send()之前被調用<br>   本方法用來設置在請求發送時，一併被發送出的一些補充資訊</p>
</li>
<li><p>例子：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-Length'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="send-方法"><a href="#send-方法" class="headerlink" title="send()方法"></a>send()方法</h4><ul>
<li>描述：用於實際發出HTTP請求。</li>
<li>語法：<code>xhr.send(formData);</code></li>
<li>說明：<code>send()</code>方法的參數是表單數據，為 <code>post</code> 請求準備。<pre><code> 如果是 `get` 請求則參數直接寫 `null` 即可。</code></pre>
</li>
</ul>
<h2 id="xhr對象發送post請求"><a href="#xhr對象發送post請求" class="headerlink" title="xhr對象發送post請求"></a>xhr對象發送post請求</h2><ul>
<li><p>描述：<code>post</code> 請求和 <code>get</code> 請求的差異就在於多了一個表單數據，</p>
<pre><code> 在 `xhr` 物件中可以通過 `FormData` 進行構建</code></pre>
</li>
<li><p>語法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'key'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value如果是字串類型要加引號。</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>說明：</p>
<pre><code>至於formData的創建時機和位置，只要你能夠在請求發送出去之前
也就是xhr.send()語句被寫出之前添加給xhr對象
那麼你願意把formData放在哪就放在哪。</code></pre>
</li>
<li><p>例子：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">var</span> userName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.userName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token keyword">var</span> password <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.password'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'userName'</span><span class="token punctuation">,</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="xhr物件的相容性問題"><a href="#xhr物件的相容性問題" class="headerlink" title="xhr物件的相容性問題"></a>xhr物件的相容性問題</h2><ul>
<li><p>描述：xhr物件的獲取方式在IE和非IE下是需要使用不同方法。</p>
</li>
<li><p>語法：</p>
<pre><code>標準流覽器支援的方法為: XMLHttpRequest()
IE流覽器支援的方法為: ActiveXObject()</code></pre>
</li>
<li><p>例子：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">{</span>
  xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span><span class="token punctuation">{</span>
  xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>說明：可以直接使用三目運算子解決</p>
  <pre class="line-numbers language-php" data-language="php"><code class="language-php">xhr <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest<span class="token operator">?</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="請求超時timeout與超時監聽ontimeout"><a href="#請求超時timeout與超時監聽ontimeout" class="headerlink" title="請求超時timeout與超時監聽ontimeout"></a>請求超時timeout與超時監聽ontimeout</h2><ul>
<li><p>描述：timeout屬性等於一個整數，用來設置當請求發出後等待接收回應的時間。</p>
<pre><code> ontimeout()方法則是當等待超時後，自動執行的回檔方法。</code></pre>
</li>
<li><p>語法：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> xxx<span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span>ontimeout<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"The request for"</span><span class="token operator">+</span>url地址<span class="token operator">+</span><span class="token double-quoted-string string">"timed out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>說明：timeout屬性單位是毫秒，表示當請求發出後等待回應的時間。</p>
<pre><code> 如果在設置的時間內沒能收到後臺回應的內容，則認為請求超時(執行ontimeout)。</code></pre>
</li>
<li><p>補充：如果該屬性等於0，就表示沒有時間限制。</p>
</li>
<li><p>例子：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span><span class="token comment">//5秒後超時</span>
xhr<span class="token punctuation">.</span>ontimeout <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"The request for "</span><span class="token operator">+</span>ajax<span class="token punctuation">.</span>php<span class="token operator">+</span><span class="token double-quoted-string string">"timed out."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="登錄post請求實例"><a href="#登錄post請求實例" class="headerlink" title="登錄post請求實例"></a>登錄post請求實例</h2><ul>
<li>要求</li>
</ul>
<ol>
<li>在 <code>html</code> 頁面中獲取使用者資訊，並在點擊的時候將資訊 <code>post</code> 到後臺。</li>
<li>在 <code>php</code> 檔中通過 <code>$_POST</code> 對象獲取 <code>html</code> 檔發來的資訊，並根據輸入內容進行回應擴展。</li>
<li>如果前兩問能夠自行實現並且沒問題，則使用 <code>sql</code> 語句來檢查輸入的用戶名密碼是否是 <code>DB</code> 中的條目，並根據 <code>DB</code> 的檢索結果回饋給用戶。</li>
</ol>
<blockquote>
<p>小貼士：操作db的時候，最好php原生操作和pdo操作都寫一遍。<br>        另外sql語句要求不看提示自行編寫。</p>
</blockquote>
<h2 id="發送檔進度條實例-擴展"><a href="#發送檔進度條實例-擴展" class="headerlink" title="發送檔進度條實例(擴展)"></a>發送檔進度條實例(擴展)</h2><hr>
<h2 id="封裝Ajax與跨域"><a href="#封裝Ajax與跨域" class="headerlink" title="封裝Ajax與跨域"></a>封裝Ajax與跨域</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>  對於<code>Ajax</code>現在相信大家已經不會陌生了，無論是原生的<code>XMLHttpRequest</code> 方式發送還是通過 <code>jQuery</code><br>框架中提供的 <code>$.ajax</code> 方式。但是從實際工作角度來說並不是所有的公司都喜歡採用上面兩種方式進行請求的發送。</p>
<p>其原因在於：</p>
<ul>
<li><font color="red">原生的方式過於繁瑣，並且大量重複代碼。</font></li>
<li><font color="red">jQuery的方式雖然方便，但必須引入jQuery框架，而框架中不是所有的內容都能用到，這就造成了大量無用代碼的堆積。佔用資源<br>因此我們自行封裝滿足於我們需求的<code>Ajax</code>框架就勢在必行，這節課我們就一起來封裝一個屬於我們自己的<code>Ajax</code>框架。</font><br><br>在此之前為了能更好的的理解今天的內容，讓我們先一起複習一下前兩種方式：</li>
<li>原生Ajax請求</li>
<li>jQuery中的$.ajax()請求</li>
</ul>
<h3 id="原生Ajax請求"><a href="#原生Ajax請求" class="headerlink" title="原生Ajax請求"></a>原生Ajax請求</h3><ul>
<li><p>範例</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">var</span> xhr <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest<span class="token operator">?</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'請求類型get/post'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'請求位址url'</span><span class="token punctuation">,</span><span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Content-Type'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>如果post請求則在這些formData<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="jQuery中的-ajax-請求"><a href="#jQuery中的-ajax-請求" class="headerlink" title="jQuery中的$.ajax()請求"></a>jQuery中的$.ajax()請求</h3><ul>
<li><p>範例</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token single-quoted-string string">'xxx/jquery1.12.3.min.js'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token comment">//… </span>
  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    type<span class="token punctuation">:</span><span class="token single-quoted-string string">'get|post'</span><span class="token punctuation">,</span>
    url<span class="token punctuation">:</span><span class="token single-quoted-string string">'http://xxxx/xxx.php'</span><span class="token punctuation">,</span>
    dataType<span class="token punctuation">:</span><span class="token single-quoted-string string">'json'</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span><span class="token single-quoted-string string">'如果是post請求則必須寫'</span><span class="token punctuation">,</span>
    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>jq的方式簡便快捷又好用，相比之下原生的寫法簡直麻煩。<br> 而這，正是我們要自行封裝 <code>Ajax</code> 的原因：<br> 因為 <code>jq</code> 的方式簡便快捷，但是 <code>jq</code> 框架卻過於龐大。<br> 所以我們要自行編寫一個屬於我們自己的，只用於處理 <code>Ajax</code> 的簡便框架。</p>
</blockquote>
</li>
</ul>
<h3 id="封裝-Ajax"><a href="#封裝-Ajax" class="headerlink" title="封裝 Ajax"></a>封裝 Ajax</h3><p>  實際上自封裝 <code>Ajax</code> 請求檔，就是將原生 <code>Ajax</code> 的請求步驟抽象為一個函數，並單獨生成一個 <code>js</code> 檔保存，當用到的時候直接引入這個檔的過程。<br>  很顯然這是個一次性的工作，封裝完畢之後我們以後直接拿來直接使用即可。<br>封裝 <code>Ajax</code> 大致分成下列幾個步驟：</p>
<h4 id="提供創建xhr物件的相容性函數。"><a href="#提供創建xhr物件的相容性函數。" class="headerlink" title="提供創建xhr物件的相容性函數。"></a><font color="red">提供創建xhr物件的相容性函數。</font></h4><ul>
<li><p>讓我們先創建一個 <code>js</code> 檔，並命名為 <code>EncapsulationAjax.js</code>。(這就是我們的框架檔)</p>
</li>
<li><p>在這個檔內部先聲明一個無參函數，命名為 <code>createXhr</code>。<br><code>function createXhr(){}</code></p>
</li>
<li><p>這個函數是為了獲得 <code>xhr</code> 相容性物件才書寫的，因此在裡面書寫相容性代碼</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">createXhr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> window<span class="token punctuation">.</span>XMLHttpRequest<span class="token operator">?</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span>‘’<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="提供發送請求的對外介面"><a href="#提供發送請求的對外介面" class="headerlink" title="提供發送請求的對外介面"></a><font color="red">提供發送請求的對外介面</font></h4><ul>
<li><p>聲明對外發送請求的介面，命名為 <code>ajax</code>。<br><code>function ajax(){}</code></p>
</li>
<li><p>為介面設置一個json格式的參數用於接收相關資料，命名為 <code>jsonObj</code><br><code>function ajax(jsonObj){}</code></p>
</li>
</ul>
<h4 id="設計並約定對外介面的參數規格"><a href="#設計並約定對外介面的參數規格" class="headerlink" title="設計並約定對外介面的參數規格"></a><font color="red">設計並約定對外介面的參數規格</font></h4><ul>
<li>規格<table>
<thead>
<tr>
<th align="center">欄位名稱</th>
<th align="center">表示含義</th>
<th align="right">資料類型</th>
<th align="center">可選值及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">method</td>
<td align="center">請求發送方式</td>
<td align="right">string</td>
<td align="center">‘get’,’post’</td>
</tr>
<tr>
<td align="center">data</td>
<td align="center">發送請求參數</td>
<td align="right">json</td>
<td align="center">若無參數可以不寫</td>
</tr>
<tr>
<td align="center">async</td>
<td align="center">同步</td>
<td align="right">非同步</td>
<td align="center">boolean</td>
</tr>
<tr>
<td align="center">url</td>
<td align="center">請求發送位址</td>
<td align="right">string</td>
<td align="center">後臺url地址</td>
</tr>
<tr>
<td align="center">success</td>
<td align="center">請求成功回檔</td>
<td align="right">function</td>
<td align="center">成功後自動執行的回呼函數</td>
</tr>
<tr>
<td align="center">error</td>
<td align="center">請求失敗回檔</td>
<td align="right">function</td>
<td align="center">失敗後在動執行的回呼函數</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="實現對外介面中參數處理"><a href="#實現對外介面中參數處理" class="headerlink" title="實現對外介面中參數處理"></a><font color="red">實現對外介面中參數處理</font></h4><ul>
<li><p>對外介面中創建xhr對象</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">createXhr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>根據請求方式設置參數。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">createXhr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">params</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i in data<span class="token punctuation">)</span><span class="token punctuation">{</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token double-quoted-string string">"="</span><span class="token operator">+</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  jsonObj<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">params</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token double-quoted-string string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>url <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"?"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span>
    <span class="token operator">?</span><span class="token double-quoted-string string">"?"</span><span class="token operator">+</span>jsonObj<span class="token punctuation">.</span>data
    <span class="token punctuation">:</span><span class="token double-quoted-string string">"&amp;"</span><span class="token operator">+</span>jsonObj<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="實現對外介面中回應處理"><a href="#實現對外介面中回應處理" class="headerlink" title="實現對外介面中回應處理"></a><font color="red">實現對外介面中回應處理</font></h4><ul>
<li><p>根據請求方式設置回呼函數。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//…</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>async <span class="token operator">===</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          jsonObj<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
          jsonObj<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//加入  </span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">.</span>async <span class="token operator">==</span> <span class="token boolean constant">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   jsonObj<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="實現對外介面中發送處理"><a href="#實現對外介面中發送處理" class="headerlink" title="實現對外介面中發送處理"></a><font color="red">實現對外介面中發送處理</font></h4><ul>
<li><p>調用open+send函數。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//…</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>method<span class="token punctuation">,</span>obj<span class="token punctuation">.</span>url<span class="token punctuation">,</span>obj<span class="token punctuation">.</span>async<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token double-quoted-string string">"post"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Content-Type"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="設置命名空間，避免全域變數污染。"><a href="#設置命名空間，避免全域變數污染。" class="headerlink" title="設置命名空間，避免全域變數污染。"></a><font color="red">設置命名空間，避免全域變數污染。</font></h4><p>  因為我們所編寫的js檔中存在大量全域變數，而這樣的全域變數會對其他檔中的內容造成不可預估的影響。在js中函數可以劃分作用域，因此我們採用自執行函數將整體包裹，避免了內部創建的變數對全域變數造成的影響。</p>
<p>但是這樣一來帶來的一個重要問題就是，內部創建的函數對外也變成了不可見狀態，因此我們可以借助window物件來將內部創建的對外介面設置為“可見狀態”.</p>
<ul>
<li><p>範例</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//…</span>
  funtion <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//…</span>
  <span class="token punctuation">}</span>

  window<span class="token punctuation">.</span>ajax <span class="token operator">=</span> ajax<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>到此為止一個名為EncapsulationAjax的框架封裝完成了。</p>
<p>這個框架歸屬於我們自己，並且具有我們所期待的一系列特點：</p>
<ul>
<li>羽量級，寥寥幾十行代碼</li>
<li>相容性，能夠處理IE中很多版本的Ajax請求</li>
<li>便捷性，參數都是自己規定的，用著方便</li>
<li>擴展性，如果還需要更多的功能直接添加進去即可，不會有任何內容衝突。</li>
</ul>
</li>
</ul>
<h3 id="案例：使用自封裝-Ajax"><a href="#案例：使用自封裝-Ajax" class="headerlink" title="案例：使用自封裝 Ajax"></a>案例：使用自封裝 Ajax</h3><ul>
<li><p>要求：</p>
<ol>
<li><p><code>html</code> 文檔結構如下：</p>
</li>
<li><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/php-mysql-pdo-4.png" class="nofancybox img-center"></li>
<li><p>發送 <code>Ajax</code> 使用 <code>EncapsulationAjax.js</code> 提供的方法實現。</p>
</li>
<li><p><code>php</code> 文檔內容如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'info'</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token variable">$_POST</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'desc'</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token single-quoted-string string">'post'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
 <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'info'</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token variable">$_GET</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'desc'</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token single-quoted-string string">'get'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
<li><p><code>post</code> 請求的返回結果</p>
<div style="display:inline-block;verticle:middle;width:300px">
   <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/php-mysql-pdo-5.png" class="nofancybox img-center">
</div>
</li>
<li><p>get請求的返回結果</p>
<div style="display:inline-block;verticle:middle;width:300px">
   <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/php-mysql-pdo-6.png" class="nofancybox img-center">
</div>

</li>
</ul>
<h3 id="案例：動態載入瀑布流"><a href="#案例：動態載入瀑布流" class="headerlink" title="案例：動態載入瀑布流"></a>案例：動態載入瀑布流</h3><ul>
<li><p>要求：</p>
<ol>
<li>整體html結構和js部分都和之前的代碼沒有衝突和區別只是需要將【原本的類比資料】變成【真正的Ajax請求來的數據】。</li>
<li>對於獲取資料而言，採用 <code>get</code> 請求。</li>
<li>最後需要將整個處理瀑布流載入過程的代碼，放置到 <code>success</code> 中執行</li>
<li><code>php</code> 後臺檔中只需要將圖片的路徑位址構建，並返回即可。</li>
</ol>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$imgArr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token single-quoted-string string">'http://127.0.0.1/waterfall/i1.jpg'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'http://127.0.0.1/waterfall/i2.jpg'</span><span class="token punctuation">,</span>…<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$finalArr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'desc'</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token single-quoted-string string">'success'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'imgArr'</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token variable">$imgArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$finalArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  method<span class="token punctuation">:</span><span class="token single-quoted-string string">'get'</span><span class="token punctuation">,</span>
  url<span class="token punctuation">:</span><span class="token single-quoted-string string">'waterfall.php'</span><span class="token punctuation">,</span>
  async<span class="token punctuation">:</span><span class="token boolean constant">true</span><span class="token punctuation">,</span>
  success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//…構建瀑布流的代碼</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><h4 id="流覽器同源政策"><a href="#流覽器同源政策" class="headerlink" title="流覽器同源政策"></a>流覽器同源政策</h4><ul>
<li><p>起源：1995年，同源政策由 <code>Netscape</code> 公司引入流覽器。</p>
</li>
<li><p>含義：最初的目的是某頁面所設置的 <code>cookie</code>，只能由其 “同源” 頁面打開。</p>
</li>
<li><p>說明：”同源”：協議相同、功能變數名稱相同、埠相同</p>
</li>
<li><p>例子：<code>http://www.frank.com/sxt/page.html</code> 這個網址</p>
<blockquote>
<p>協議是：http://<br>  功能變數名稱是：<code>www.allen.com</code><br>  埠是：80（預設埠可以省略）。</p>
</blockquote>
<p>它的同源情況如下：<br><code>http://www.frank.com/sxt2/other.html</code>：同源<br><code>http://frank.com/sxt/other.html</code>：不同源（功能變數名稱不同）<br><code>http://v3.www.frank.com/sxt/other.html</code>：不同源（功能變數名稱不同）<br><code>http://www.frank.com:81/dir/other.html</code>：不同源（埠不同）</p>
</li>
<li><p>目的：同源政策的目的，是為了保證使用者資訊的安全，防止惡意的網站竊取資料。</p>
</li>
<li><p>限制：隨著互聯網的發展，”同源政策”越來越嚴格。目前，如果非同源，共有三種行為受到限制：</p>
<ol>
<li>Cookie、LocalStorage 和 IndexDB 無法讀取。</li>
<li>DOM 無法獲得。</li>
<li>AJAX 請求不能發送。</li>
</ol>
</li>
<li><p>補充：凡事都有利有弊，儘管限制是有必要的，但在有些情況下合理的用途也會因”同源政策”而受到影響。</p>
<p>因此我們將要為大家介紹的一些規避上述限制的手段，就是【跨域】的由來。</p>
</li>
</ul>
<h4 id="Ajax-跨域"><a href="#Ajax-跨域" class="headerlink" title="Ajax 跨域"></a>Ajax 跨域</h4><ul>
<li><p>描述： <code>Ajax</code> 跨域指的是將 <code>Ajax</code> 請求進行跨域處理，而不是說在 <code>Ajax</code> 中提供了跨域的方法。</p>
</li>
<li><p>由來： 同源政策中明確規定 <code>Ajax</code> 請求只能發給同源的網址，否則就會發生跨域報錯。</p>
</li>
<li><p>解法： 除了設置代理之外頁面中有三種常見的解決跨域的手段，</p>
<blockquote>
<p>而根據我們所掌握的內容來考慮，我們只學習最常見的一種叫做 <code>JSONP</code> 的方法。<br>其餘另外兩種分別叫做 <code>webSocket</code> 和 <code>CORS</code>。</p>
</blockquote>
</li>
</ul>
<h4 id="JSONP跨域方案-get請求"><a href="#JSONP跨域方案-get請求" class="headerlink" title="JSONP跨域方案(get請求)"></a>JSONP跨域方案(get請求)</h4><ul>
<li><p>描述：<code>JSONP</code> 是伺服器與用戶端跨源通信的最常用方法。</p>
<pre><code> 最大特點就是簡單適用，老式流覽器全部支援，對伺服器改造非常小。</code></pre>
</li>
<li><p>本質：實際上利用了 <code>script</code> 標籤引入 <code>js</code> 檔，並解析執行的原理。</p>
</li>
<li><p>語法</p>
<ol>
<li><p>在 <code>html</code> 中插入 <code>script</code> 標籤，並利用 <code>script</code> 標籤發起跨源請求</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"type"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"text/javascript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token single-quoted-string string">'跨源url地址?【前後端約定回檔關鍵字】=【回呼函數名】'</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在伺服器對應 <code>php</code> 檔中通過拼接字串，類比函式呼叫。並將要返回資料通過回呼函數參數返回。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'前後端約定回檔關鍵字'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"("</span><span class="token punctuation">.</span><span class="token function">json_encode</span><span class="token punctuation">(</span>要返回資料<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">")"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>在 <code>html</code> 頁面中，顯式寫出回呼函數。這樣當跨源請求完成後對應回呼函數會自動執行。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> 回呼函數名<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
<li><p>優點</p>
<ol>
<li>由於使用 <code>script</code> 腳本作為請求，因此實際上請求和傳統的引入 <code>js</code> 腳本沒有任何區別。</li>
<li>而在返回的資料中我們也儘量類比出了 <code>js</code> 調用函數的語法，因此只要在頁面中聲明了回呼函數就會自動被調用。</li>
<li>再者作為參數的【伺服器端】的 <code>JSON</code> 資料，在 <code>js</code> 中是被直接識別為物件，因此在回呼函數中也避免了使用 <code>JSON.parse</code> 的步驟。</li>
</ol>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>php&amp;mysql</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>物聯網綜合應用(二)</title>
    <url>/iot/20210602-iot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0-課程準備"><a href="#0-課程準備" class="headerlink" title="0. 課程準備"></a>0. 課程準備</h2><ol>
<li><a href="https://drive.google.com/drive/folders/1YhOhREq4PmGqmGdS4rLc_dzmm0w92UTs?usp=sharing">雲端硬碟</a></li>
<li><a href="https://www.youtube.com/embed/zvrGOu8QFSo">生活智慧屋展示</a><br>
<iframe width="560" height="315" src="https://www.youtube.com/embed/zvrGOu8QFSo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></li>
<li><a href="https://drive.google.com/file/d/1EYgZEVWCqUnCRPuZ4-5JPg1hLfFeTPQs/view?usp=sharing">講義</a></li>
</ol>
<h2 id="1-硬體建置"><a href="#1-硬體建置" class="headerlink" title="1. 硬體建置"></a>1. 硬體建置</h2><h3 id="1-1-配線圖"><a href="#1-1-配線圖" class="headerlink" title="1.1 配線圖"></a>1.1 配線圖</h3><ul>
<li><p>樹莓派腳位圖</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602102127.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602102127_s.png" class="nofancybox  img-center"></a></p>
</li>
<li><p>樹莓派與其他裝置連接腳位圖</p>
<table>
<thead>
<tr>
<th align="left">PI3 B+ 腳位</th>
<th align="left">PI3 B+ 功能描述</th>
<th align="left">其他裝置腳位</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PI3 B+ 18</td>
<td align="left">GPIO 24</td>
<td align="left">Buzzer I/O</td>
</tr>
<tr>
<td align="left">PI3 B+ 2</td>
<td align="left">5V Power</td>
<td align="left">Buzzer VCC、SG 900 VCC(紅)</td>
</tr>
<tr>
<td align="left">PI3 B+ 6</td>
<td align="left">GND</td>
<td align="left">Buzzer GND、SG 900 GND(褐)</td>
</tr>
<tr>
<td align="left">PI3 B+ 11</td>
<td align="left">GPIO 17</td>
<td align="left">DHT 11 Out</td>
</tr>
<tr>
<td align="left">PI3 B+ 4</td>
<td align="left">5V Power</td>
<td align="left">DHT +</td>
</tr>
<tr>
<td align="left">PI3 B+ 20</td>
<td align="left">GND</td>
<td align="left">DHT -</td>
</tr>
<tr>
<td align="left">PI3 B+ 12</td>
<td align="left">GPIO 18 PCM_CLK</td>
<td align="left">SG 900 訊號(橘)</td>
</tr>
<tr>
<td align="left">PI3 B+ 37</td>
<td align="left">GPIO 26</td>
<td align="left">RELAY IN1</td>
</tr>
<tr>
<td align="left">PI3 B+ 13</td>
<td align="left">GPIO 27</td>
<td align="left">RELAY IN2</td>
</tr>
<tr>
<td align="left">PI3 B+ 15</td>
<td align="left">GPIO 22</td>
<td align="left">RELAY IN3</td>
</tr>
<tr>
<td align="left">PI3 B+ 16</td>
<td align="left">GPIO 23</td>
<td align="left">RELAY IN4</td>
</tr>
<tr>
<td align="left">PI3 B+ 24</td>
<td align="left">GPIO  8 SPIO_CE0_N</td>
<td align="left">RFID RC522 SDA</td>
</tr>
<tr>
<td align="left">PI3 B+ 23</td>
<td align="left">GPIO 11 SPIO_SCLK</td>
<td align="left">RFID RC522 SCK</td>
</tr>
<tr>
<td align="left">PI3 B+ 19</td>
<td align="left">GPIO 10 SPIO_MOSI</td>
<td align="left">RFID RC522 MOSI</td>
</tr>
<tr>
<td align="left">PI3 B+ 21</td>
<td align="left">GPIO  9 SPIO_MISO</td>
<td align="left">RFID RC522 MISO</td>
</tr>
<tr>
<td align="left">PI3 B+ 25</td>
<td align="left">GND</td>
<td align="left">RFID RC522 GND</td>
</tr>
<tr>
<td align="left">PI3 B+ 22</td>
<td align="left">GPIO 25</td>
<td align="left">RFID RC522 RST</td>
</tr>
<tr>
<td align="left">PI3 B+ 17</td>
<td align="left">3V3 Power</td>
<td align="left">RFID RC522 3.3V</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="1-2-網路設定參考"><a href="#1-2-網路設定參考" class="headerlink" title="1.2 網路設定參考"></a>1.2 網路設定參考</h3><p>有兩處可以修正網卡設定，擇一來設定，第一種方法會優先。</p>
<ol>
<li><p><code>sudo nano /etc/dhcpcd.cong</code></p>
</li>
<li><p><code>sudo nano /etc/network/interfaces</code></p>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">#表示使用 localhost
auto lo 
# 有網路卡 eth0，則用靜態方式設定 IP:
iface eth0 inet static
static ip_address=192.168.57.40
static routers=192.168.57.254
static domain_name_servers=8.8.8.8 168.95.1.1
  
# DHCP
#iface eth0 inet dhcp
# 有網路卡 eth0，則使用 dhcp 獲取 IP:
#static domain_name_servers=8.8.#8.8 168.95.1.1

# Wifi
#auto wlan0 #有 WLAN 使用 wlan0 裝置名稱
#wlan裝置可以熱拔插
#allow-hotplug wlan0
#有WLAN 網路時，使用 wpa-psk 認證方式
#iface wlan0 inet dhcp
#wpa-ssid "yvts"
#wpa-psk  "yvtsyvts"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>重新啟動</strong><br><code>sudo /etc/init.d/networking restart</code></p>
</li>
</ol>
<h2 id="2-環境設置"><a href="#2-環境設置" class="headerlink" title="2. 環境設置"></a>2. 環境設置</h2><h3 id="2-1-SSH-免密碼登入"><a href="#2-1-SSH-免密碼登入" class="headerlink" title="2.1 SSH 免密碼登入"></a>2.1 SSH 免密碼登入</h3><ol>
<li><p>使用系統管理者權限，修改檔案 <code>c:\windows\system32\drivers\etc\hosts</code></p>
<p>增加一筆資料如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">192.168</span>.xxx.xxx    smarthome.edu.tw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>測試:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> smarthome.edu.tw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>本機端(Window)，安裝 <a href="https://git-scm.com/downloads">Git</a> </p>
</li>
<li><p>設定識別資料, 使用 <code>Git bash</code> 開啟終端機視窗後，執行如下命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name  <span class="token string">"John Doe"</span>
<span class="token function">git</span> config --global user.email  johndoe@example.com

<span class="token comment">#指定編輯器</span>
<span class="token function">git</span> config --global core.editor <span class="token string">"'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"</span>
<span class="token comment">#or</span>
<span class="token function">git</span> config --global core.editor <span class="token string">"'C:/tools/nano.exe' -multiInst -nosession"</span>   
<span class="token function">git</span> config --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>配置 <code>sshd</code> 服務，允許認證金鑰檔案:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#登入 PI</span>
<span class="token function">ssh</span> pi@smarthome.edu.tw
<span class="token comment">#修改 SSH Daemon 服務組態檔</span>
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/ssh/sshd_config
<span class="token comment"># 將最前面的註解符號 `#` 取消掉，如下</span>
  AuthorizedKeysFile      .ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在定時備份或批次遠端處理，往往需要免密碼登入遠端主機工作。為達此目的，首先必須在 client 端產生一組 key，包含公開金鑰（Public Key）與私密金鑰（Private Key），將公鑰送到要登入的主機，相互對應做免密碼的登入。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#檢查有無私鑰與公鑰(本機端 PC)</span>
<span class="token function">ls</span> -al ~/.ssh/id_rsa.pub
<span class="token function">ls</span> -al ~/.ssh/id_rsa
<span class="token comment">#若沒有金鑰的話，key 的產生方法：</span>
ssh-keygen -t rsa -C xxx@gmail.com

Generating public/private rsa key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/root/.ssh/id_rsa<span class="token punctuation">)</span>:
Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:
Enter same passphrase again:
Your identification has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.
Your public key has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.pub.
The key fingerprint is:
c3:e9:25:65:00:c8:65:cb:e8:fe:4e:7e:ce:06:a4:9d root@kvm8.deyu.wang
The key's randomart image is:
+--<span class="token punctuation">[</span> RSA <span class="token number">2048</span><span class="token punctuation">]</span>----+
<span class="token operator">|</span>   <span class="token builtin class-name">.</span> o+<span class="token punctuation">..</span>        <span class="token operator">|</span>
<span class="token operator">|</span>    o+ <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>       <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token builtin class-name">.</span> o   o      <span class="token operator">|</span>
<span class="token operator">|</span>   <span class="token builtin class-name">.</span>  <span class="token punctuation">..</span> +       <span class="token operator">|</span>
<span class="token operator">|</span>    .+ .S <span class="token builtin class-name">.</span>      <span class="token operator">|</span>
<span class="token operator">|</span>   <span class="token punctuation">..</span> E. +       <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token builtin class-name">.</span> <span class="token punctuation">..</span>.        <span class="token operator">|</span>
<span class="token operator">|</span>     + .o        <span class="token operator">|</span>
<span class="token operator">|</span>     .++o        <span class="token operator">|</span>
+-----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>將公開金鑰放到要登入的主機上，利用以下指令完成:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> pi@smarthome.edu.tw <span class="token string">'mkdir -p ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys'</span> <span class="token operator">&lt;</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>登入測試</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> pi@smarthome.edu.tw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>特別注意目錄 .ssh 及檔案 authorized_keys 的權限，若群組或其他人的權限過大，除了安全性有問題外，也有可能因 ssh 判斷要對應的金鑰不安全，而無法對應，也就是不能免密碼登入。</p>
</blockquote>
</li>
<li><p>調整權限<br>設定 PI 上的authorized_keys 可讀、寫</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> pi@smarthome.edu.tw <span class="token string">"chmod 600 ~/.ssh/authorized_keys"</span>
<span class="token comment"># 設定 PI 上的authorized_keys 唯讀</span>
   <span class="token function">ssh</span> pi@smarthome.wda.edu.tw <span class="token string">"chmod 400 ~/.ssh/authorized_keys"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>再簡化登入程序: 本機 PC 端，加入 <code>config</code>, 簡化 <code>ssh</code> 登入指令</p>
<ul>
<li><p>在 <code>~/.ssh</code> 下新增 <code>config</code> 檔案，不需任何副檔名。 </p>
</li>
<li><p>在新增的檔案裡加上你的第一個 SSH config</p>
<p><code>nano ~/.ssh/config</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host pi                    <span class="token comment"># 用來連線的 alias 名稱</span>
HostName smarthome.edu.tw  <span class="token comment"># host domain 或 ip</span>
Port <span class="token number">22</span>                    <span class="token comment"># host 的 SSH port</span>
User pi                    <span class="token comment"># (選填)登入 SSH 的 username，</span>
                           <span class="token comment">#  只連 git 的話，可以不必要</span>
ForwardX11 <span class="token function">yes</span>             <span class="token comment"># (選填) 啟用回傳 GUI</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試<br><code>ssh pi</code>  </p>
</li>
</ul>
</li>
<li><p>常用 SSH 指令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#基本連線</span>
<span class="token function">ssh</span> username@hostname<span class="token punctuation">[</span>ip<span class="token punctuation">]</span>  
<span class="token comment">#SSH 連線再附加其他指令</span>
<span class="token function">ssh</span> pi <span class="token function">mkdir</span> <span class="token builtin class-name">test</span>
<span class="token comment">#scp 指定 SSH name</span>
<span class="token function">scp</span> -r ./ pi:/var/www/html/project/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>本機電腦端設定:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">d:
<span class="token builtin class-name">cd</span> d:<span class="token punctuation">\</span>xampp<span class="token punctuation">\</span>htdocs
   
<span class="token comment">#打開現行工作目錄</span>
code <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然後在 <code>vscode</code> 視窗下建立一新目錄 <code>smarthome</code>，就可以點擊滑鼠左鍵，來執行下載樹莓派檔案。</p>
</li>
<li><p>安裝 vscode 的套件 <code>sftp</code><br>F1 或 Ctrl+Shift+P, 選擇 SFTP:Config</p>
<p>加入以下設定:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>
   <span class="token punctuation">{</span>
       <span class="token builtin class-name">:</span>
   <span class="token punctuation">}</span> ,

   <span class="token punctuation">{</span>
    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"My Server"</span>,
    <span class="token string">"host"</span><span class="token builtin class-name">:</span> <span class="token string">"smarthome.edu.tw"</span>,
    <span class="token string">"protocol"</span><span class="token builtin class-name">:</span> <span class="token string">"sftp"</span>,
    <span class="token string">"port"</span><span class="token builtin class-name">:</span> <span class="token number">22</span>,
    <span class="token string">"username"</span><span class="token builtin class-name">:</span> <span class="token string">"pi"</span>,
    <span class="token string">"privateKeyPath"</span><span class="token builtin class-name">:</span> <span class="token string">"C:/Users/allen/.ssh/id_rsa"</span>,
    <span class="token string">"remotePath"</span><span class="token builtin class-name">:</span> <span class="token string">"/home/pi/www"</span>,
    <span class="token string">"uploadOnSave"</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h3 id="2-2-安裝-Apache-MySQL-PHP"><a href="#2-2-安裝-Apache-MySQL-PHP" class="headerlink" title="2.2 安裝 Apache + MySQL+ PHP"></a>2.2 安裝 <code>Apache + MySQL+ PHP</code></h3><ol>
<li><p>更新軟體套件清單<br><code>sudo apt get update y</code></p>
</li>
<li><p>更新軟體套件本身<br><code>sudo apt get upgrade y</code></p>
</li>
<li><p>重啟<br><code>reboot</code></p>
</li>
</ol>
<h4 id="2-2-1-安裝-Apache-PHP"><a href="#2-2-1-安裝-Apache-PHP" class="headerlink" title="2.2.1 安裝 Apache PHP"></a>2.2.1 安裝 Apache PHP</h4><ol>
<li><p>安裝軟體</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> get <span class="token function">install</span> apache2 y
<span class="token function">sudo</span> <span class="token function">apt</span> get <span class="token function">install</span> php y
<span class="token function">sudo</span> <span class="token function">apt</span> get <span class="token function">install</span> php mysql y
<span class="token function">sudo</span> <span class="token function">apt</span> get <span class="token function">install</span> php mbstring y
<span class="token function">sudo</span> systemctl restart apache2
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/apache2 apache2.conf <span class="token comment">## 設定文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160012.png"><img src="small/20210601160012_s.png" class="nofancybox  img-center"></a></p>
<br>
<a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160111.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160111_s.png" class="nofancybox  img-center"></a>

<p><code>sudo nano /etc/ports.conf</code></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160507.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160507_s.png" class="nofancybox  img-center"></a></p>
<p><strong>重啟伺服器</strong><br><code>sudo systemctl restart apache2</code></p>
</li>
<li><p>驗證 <code>apache</code> 正常運作：</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601161921.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601161921_s.png" class="nofancybox  img-center"></a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/www/html/
<span class="token function">sudo</span> <span class="token function">mv</span> index.html index1.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601162829.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601162829_s.png" class="nofancybox  img-center"></a></p>
</li>
<li><p>修改根目錄：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /home/pi/www/web
<span class="token function">sudo</span> <span class="token function">chown</span> -R pi:www-data /home/pi/www/web
<span class="token function">chmod</span> -R <span class="token number">770</span> /home/pi/www/web
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/apache2/apache2.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601165908.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601165908_s.png" class="nofancybox  img-center"></a></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601165936.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601165936_s.png" class="nofancybox  img-center"></a></p>
<p><code>sudo nano /etc/apache2/sites-enabled/000-default.conf</code></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601163545.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601163545_s.png" class="nofancybox  img-center"></a></p>
<blockquote>
<p>cd /etc/apache2/sites-available<br>  ln -s /etc/apache2/sites-enabled/000-default.conf<br>  sudo systemctl restart apache2</p>
</blockquote>
</li>
<li><p>加入虛擬新網域</p>
<ul>
<li><p>新網域名稱: <code>smarthome.edu.tw</code></p>
</li>
<li><p>建立資料夾: <code>mkdir ~/www/smarthome</code></p>
</li>
<li><p>修改現有檔案: <code>nano /etc/apache2/sites-enabled/000-default.conf</code></p>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">&lt;VirtualHost *:80&gt;
  ServerName smarthome.edu.tw
  #ServerAdmin webmaster@localhost
  DocumentRoot /home/pi/www/smarthome

  &lt;Directory /home/pi/www/smarthome&gt;
    Options indexes FollowSymLinks
    AllowOverride None
    Require all granted
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>重啟 <code>Apache</code> 伺服器<br><code>sudo systemctl restart apache2</code></p>
</li>
<li><p>開啟 <code>PHP</code> 錯誤日誌<br><code>sudo nano /etc/php/7.0/apache2/php.ini</code></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601163646.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601163646_s.png" class="nofancybox  img-center"></a></p>
</li>
</ol>
<h4 id="2-2-2-安裝-MySQL"><a href="#2-2-2-安裝-MySQL" class="headerlink" title="2.2.2 安裝 MySQL"></a>2.2.2 安裝 MySQL</h4><ul>
<li><p>安裝<br><code>apt cache search mysql server</code><br><code>sudo apt get install mysql server</code></p>
</li>
<li><p>Setting MySQL/MariaDB root password  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql u root p
mysql<span class="token operator">&gt;</span> use mysql<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">plugin</span><span class="token operator">=</span><span class="token string">''</span> where u <span class="token assign-left variable">ser</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> flush privileges<span class="token punctuation">;</span>

<span class="token punctuation">(</span>刷新權限，當你直接通過 update 權限後，需要通過刷新使你的授權有效<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">exit</span>
<span class="token function">sudo</span> mysql_secure_installation
<span class="token function">sudo</span> mysql u root p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601170430.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601170430_s.png" class="nofancybox  img-center"></a></p>
<p><a href="https://websiteforstudents.com/mariadb--installedinstalled--witwithouthout--passwordpassword--promptsprompts--forfor--rootroot--onon--ubuntuubuntu--1717--1010--1818--0404--beta/beta/">參考文獻</a></p>
</li>
</ul>
<h4 id="2-2-3-安裝-phpmyadmin"><a href="#2-2-3-安裝-phpmyadmin" class="headerlink" title="2.2.3 安裝 phpmyadmin"></a>2.2.3 安裝 phpmyadmin</h4><ul>
<li><p>安裝 <code>sudo nano ~/www/web/info.php</code></p>
<p>內容加入：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191331.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191331_s.png" class="nofancybox  img-center"></a></p>
</li>
<li><p>檢查 <code>MySql</code> 版本   </p>
<p><code>sudo mysql --version</code></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191548.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191548_s.png" class="nofancybox  img-center"></a></p>
</li>
<li><p>檢查 <code>PHP</code> 版本<br><code>sudo php --version</code></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191856.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191856_s.png"></a></p>
</li>
<li><p>找尋下載檔案 <a href="https://www.phpmyadmin.net/downloads/">phpmyadmin</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601192053.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601192053_s.png" class="nofancybox  img-center"></a></p>
<blockquote>
<p>補充:<br> 不可以使用 phpmyadmin 4.9+snapshot 的版本(不支援繁體中文，不穩定版本)</p>
</blockquote>
</li>
<li><p>下載與安裝</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">cd ~/www/web/
sudo wget https<span class="token punctuation">:</span>//files.phpmyadmin.net/phpMyAdmin/4.7.3/phpMyAdmin<span class="token punctuation">-</span>4.7.3<span class="token punctuation">-</span>alllanguages.tar.gz
sudo tar <span class="token punctuation">-</span>zxvf phpMyAdmin<span class="token punctuation">-</span>4.7.3<span class="token punctuation">-</span>all<span class="token punctuation">-</span>languages.tar.gz
sudo mv phpMyAdmin<span class="token punctuation">-</span>4.7.3<span class="token punctuation">-</span>all<span class="token punctuation">-</span>languages phpMyAdmin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="2-2-4-解決-缺少-tmp-與-移除其他警告訊息"><a href="#2-2-4-解決-缺少-tmp-與-移除其他警告訊息" class="headerlink" title="2.2.4 解決 缺少 tmp 與 移除其他警告訊息"></a>2.2.4 解決 缺少 tmp 與 移除其他警告訊息</h4><ul>
<li><p>現象<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601194654.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601194654_s.png" class="nofancybox  img-center"></a></p>
<ul>
<li><p>解決 1: 移除設定檔案需要設定一組加密密碼 (blowfish_secret)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /var/www/html/phpMyAdmin/config.sample.inc.php  ~/www/web/phpMyAdmin/config.inc.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>sudo nano ~/www/web/phpMyAdmin/config.inc.php</code></p>
<p>將檔案內的 <code>$cfg['blowfish_secret'] = '';</code><br>設定為 ：(至少要 32 個字元)</p>
<p><code>$cfg['blowfish_secret'] = 'xxxxxxxxxxxxxxxx';</code></p>
<blockquote>
<p>意思是：加上一堆亂七八糟的英文數字當作秘鑰</p>
</blockquote>
</li>
<li><p>解決 2: 移除 <code>tmp</code> 警告訊息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /var/www/html/phpMyAdmin/tmp<span class="token punctuation">(</span>若本來就存在，刪除再新增<span class="token punctuation">)</span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> /var/www/html/phpMyAdmin/tmp
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> /var/www/html/phpMyAdmin/tm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601195724.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601195724_s.png" class="nofancybox  img-center"></a></p>
</li>
</ul>
</li>
</ul>
<h2 id="3-影像串流-MJPG-STREAMER-for-WebCam"><a href="#3-影像串流-MJPG-STREAMER-for-WebCam" class="headerlink" title="3. 影像串流  MJPG-STREAMER for WebCam"></a>3. 影像串流  MJPG-STREAMER for WebCam</h2><h3 id="3-1-說明"><a href="#3-1-說明" class="headerlink" title="3.1 說明"></a>3.1 說明</h3><p>  安裝 <code>mjpg-streamer</code>， <code>mjpg-streamer</code> 是用來將視訊網路串流化，透過 <code>mjpg</code> 裡面的解碼器，可以讓影像擷取速率以及畫質有良好的表現。</p>
<ul>
<li><p><a href="http://www.linux-projects.org/uv4l/installation/">參考文獻</a></p>
</li>
<li><p>PI 上安裝影像串流(mjpg-streamer)，把 <code>Raspberry Pi</code> 轉成 <code>Webcam server</code></p>
</li>
<li><p>PI 上安裝 <code>Motion</code>， 動態捕捉, 依照間格時間來抓取.</p>
</li>
</ul>
<h3 id="3-2-安裝相關套件"><a href="#3-2-安裝相關套件" class="headerlink" title="3.2 安裝相關套件"></a>3.2 安裝相關套件</h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新 apt-get</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade
<span class="token comment">#安裝依賴包</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> subversion
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libjpeg-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> imagemagick
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libv4l-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-3-安裝-mjpg-streamer"><a href="#3-3-安裝-mjpg-streamer" class="headerlink" title="3.3 安裝 mjpg-streamer"></a>3.3 安裝 <code>mjpg-streamer</code></h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/source
<span class="token builtin class-name">cd</span> ~/source
<span class="token comment"># 利用 svn 把最新版的 mjpg-streamer 抓下來</span>
svn co https://svn.code.sf.net/p/mjpg-streamer/code/
<span class="token builtin class-name">cd</span> code/mjpg-streamer
<span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>

<span class="token comment"># 拷貝到 *.so /usr/local/lib</span>
<span class="token function">sudo</span> <span class="token function">cp</span>  *.so /usr/local/lib/.
<span class="token comment"># 拷貝到 mjpg_streamer 到 /usr/local/bin</span>
<span class="token function">sudo</span> <span class="token function">cp</span> mjpg_streamer  /usr/local/bin/.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-4-停止-motion"><a href="#3-4-停止-motion" class="headerlink" title="3.4 停止 motion"></a>3.4 停止 <code>motion</code></h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#如果 motion 還在啟動中，先停掉</span>
<span class="token function">sudo</span> <span class="token function">service</span> motion stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-5-啟動-mjpg-streamer"><a href="#3-5-啟動-mjpg-streamer" class="headerlink" title="3.5 啟動 mjpg-streamer"></a>3.5 啟動 <code>mjpg-streamer</code></h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先打開 pi carmera</span>
<span class="token function">sudo</span> raspi-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-1.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-1_s.png" class="nofancybox  img-center"></a></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-2.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-2_s.png" class="nofancybox  img-center"></a></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-3.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-3_s.png" class="nofancybox  img-center"></a></p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-4.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-4_s.png" class="nofancybox  img-center"></a></p>
<p><strong>須重開機</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source/code/mjpg-streamer
<span class="token function">sudo</span> ./mjpg_streamer -i <span class="token string">"./input_uvc.so -f 10 -r 1024x768 -d /dev/video0 -y -n"</span> -o <span class="token string">"./output_http.so -w ./www -p 8080"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-5.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-5_s.png" class="nofancybox  img-center"></a></p>
<blockquote>
<p><code>320x240</code> 也可以修改為 <code>640x480</code>，如果啟動失敗，請再執行下列程序:</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span>  /etc/modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>#加入以下內容 :<br>bcm2835-v412</p>
<p>#重新啟動<br><code>sudo reboot</code></p>
</li>
</ul>
<h3 id="3-6-測試"><a href="#3-6-測試" class="headerlink" title="3.6 測試"></a>3.6 測試</h3><p>  啟動後在 raspberry ip 位置。例如: <code>192.168.62.100:8080/stream.html</code> 中，檢查有沒有看到影像串流。</p>
<p>  <code>http://smarthome.edu.tw:8080/?action=streamer</code></p>
<p>  或<br>  <code>http://smarthome.edu.tw:8080/stream_simple.html</code></p>
<p>  如果要客制化頁面的，可以再在自己的頁面上加上 <code>tag</code><br>  <code>http://192.168.62.100:8080/?action=stream"</code>，就能捉的到串流影像。</p>
<h3 id="3-7-設置登入帳號和密碼"><a href="#3-7-設置登入帳號和密碼" class="headerlink" title="3.7 設置登入帳號和密碼"></a>3.7 設置登入帳號和密碼</h3><ul>
<li><p>關掉服務</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查指定程序 id</span>
pidof mjpg_streamer
<span class="token comment">#刪除指定 id</span>
<span class="token function">kill</span> -9 <span class="token punctuation">[</span>pid of mjpg_streamer<span class="token punctuation">]</span>

<span class="token function">sudo</span> ./mjpg_streamer -i <span class="token string">"./input_uvc.so -f 10 -r 320x240 -d /dev/video0 -y -n"</span> -o <span class="token string">"./output_http.so -w ./www -p 8080 -c userid:password"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-8-開機時自動執行串流伺服器"><a href="#3-8-開機時自動執行串流伺服器" class="headerlink" title="3.8 開機時自動執行串流伺服器"></a>3.8 開機時自動執行串流伺服器</h3><ul>
<li><p>操作步驟如下:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">cd <span class="token operator">~</span><span class="token operator">/</span>source
nano mjpg<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>內容如下:</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">import os
os.system('LD_LIBRARY_PATH=/usr/local/lib mjpg_streamer <span class="token punctuation">-</span>i "input_uvc.so <span class="token punctuation">-</span>y <span class="token punctuation">-</span>r 1024x768 <span class="token punctuation">-</span>n" <span class="token punctuation">-</span>o "output_http.so <span class="token punctuation">-</span>w /home/pi/source/code/mjpg<span class="token punctuation">-</span>streamer/www"')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>#改變屬性(可執行)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> mjpg.py
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/crontab

<span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/sh

<span class="token comment">#0 0 * * * root  python /home/pi/source/mjpg.py</span>
@reboot root python /home/pi/source/mjpg.py <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意: import os 與 os.system() 注意前面不要空行</p>
</blockquote>
</li>
</ul>
<h2 id="4-GPIO-控制"><a href="#4-GPIO-控制" class="headerlink" title="4. GPIO 控制"></a>4. GPIO 控制</h2><h3 id="4-1-說明"><a href="#4-1-說明" class="headerlink" title="4.1 說明"></a>4.1 說明</h3><p>  網頁控制 LED(燈與風扇) Relay Control (GPIO)，現在方法使用國外人寫的一個插件模組<a href="http://wiringpi.com/download-and-install/">wiringPI</a>, 然後在網頁上使用執行 linux shell command 來控制腳位(針腳)用 php 控制．</p>
<blockquote>
<p>可改寫成不用這插件, 直接用 <code>python</code> 來控制腳位</p>
</blockquote>
<h3 id="4-2-腳位控制-GPIO"><a href="#4-2-腳位控制-GPIO" class="headerlink" title="4.2 腳位控制 GPIO"></a>4.2 腳位控制 GPIO</h3><ul>
<li><p>腳位</p>
<table>
<thead>
<tr>
<th>腳位名稱</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>GPIO26</td>
<td>RELAY IN1 For Fan</td>
</tr>
<tr>
<td>GPIO27</td>
<td>RELAY IN2 For LED</td>
</tr>
<tr>
<td>GPIO22</td>
<td>RELAY IN3 For LED</td>
</tr>
<tr>
<td>GPIO23</td>
<td>RELAY IN4 For LED</td>
</tr>
</tbody></table>
</li>
<li><p>安裝模組 <code>wiringPi</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> wiringpi<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>目前 PI 都已內建支援 GPIO，使用命令： <code>pinout</code> 可得知腳位訊息。</p>
</blockquote>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-gpio-pinout.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-gpio-pinout_s.png" class="nofancybox  img-center"></a></p>
</li>
</ul>
<h3 id="4-3-測試有無-WiringPi-模組"><a href="#4-3-測試有無-WiringPi-模組" class="headerlink" title="4.3 測試有無 WiringPi 模組"></a>4.3 測試有無 <code>WiringPi</code> 模組</h3><ul>
<li><p>檢查 GPIO 版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpio -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>顯示目前所有 GPIO 的輸入或輸出狀態</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gpio readall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_gpio_readall.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_gpio_readalls.png" class="nofancybox  img-center"></a></p>
</li>
</ul>
<h3 id="4-4-測試硬體接線狀態"><a href="#4-4-測試硬體接線狀態" class="headerlink" title="4.4 測試硬體接線狀態"></a>4.4 測試硬體接線狀態</h3><ul>
<li><p>使用下列指令作測試</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpio -g mode <span class="token number">26</span> out
gpio -g <span class="token function">write</span> <span class="token number">26</span> <span class="token number">1</span>
gpio -g <span class="token function">write</span> <span class="token number">26</span> <span class="token number">0</span>

gpio -g mode <span class="token number">27</span> out
gpio -g <span class="token function">write</span> <span class="token number">27</span> <span class="token number">1</span>
gpio -g <span class="token function">write</span> <span class="token number">27</span> <span class="token number">0</span>

gpio -g mode <span class="token number">22</span> out
gpio -g <span class="token function">write</span> <span class="token number">22</span> <span class="token number">1</span>
gpio -g <span class="token function">write</span> <span class="token number">22</span> <span class="token number">0</span>

gpio -g mode <span class="token number">23</span> out
gpio -g <span class="token function">write</span> <span class="token number">23</span> <span class="token number">1</span>
gpio -g <span class="token function">write</span> <span class="token number">23</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><a href="https://www.raspberrypi.org/documentation/configuration/config-txt/gpio.md">GPIO ontrol in config.txt</a></p>
</blockquote>
</li>
</ul>
<h2 id="5-DHT-溫溼度偵測"><a href="#5-DHT-溫溼度偵測" class="headerlink" title="5. DHT 溫溼度偵測"></a>5. DHT 溫溼度偵測</h2><h3 id="5-1-硬體配置"><a href="#5-1-硬體配置" class="headerlink" title="5.1 硬體配置"></a>5.1 硬體配置</h3><p>  首先將 <code>DHTXX</code> 連接到 <code>Raspberry Pi</code> 的 <code>GPIO (general purpose input/output)</code> 上，<code>DHT</code> 上僅有 <code>VCC</code> (使用 3.3V)、<code>OUT</code>、<code>GND</code> 三個接腳，其中 <code>OUT</code> 是資料的輸出，須接在 <code>GPIO</code>(14,15,18,23,24,25,6,7,2,3,4,17,27,22,10,9,11) 中的任一接腳上。</p>
<p>  這裡使用的是 GPIO17。</p>
<ul>
<li><p>範例:<br>參考網頁: <code>https://opendev2016.wordpress.com/2017/04/22/using-raspberry-pi-and-dth11-to-bulid-a-environment-monitor/</code></p>
</li>
<li><p>建立資料庫與資料表</p>
<ol>
<li><p>建立資料庫 <code>raspberry</code> 的資料表 <code>temp</code>。<br>連線進入 <a href="http://smarthome.edu.tw/phpmyadmin">phpmyadmin</a><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-pi-table-create.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-pi-table-creates.png" class="nofancybox"></a></p>
</li>
<li><p>使用 sql 視窗，建立 table。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--</span>
<span class="token comment">-- 資料表結構 `raspberryPI.temp`</span>
<span class="token comment">--</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>raspberryPI<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">temp</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>rowid<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span><span class="token keyword">datetime</span><span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span>temperature<span class="token punctuation">`</span> <span class="token keyword">FLOAT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span>humidity<span class="token punctuation">`</span> <span class="token keyword">FLOAT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>rowid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_unicode_ci<span class="token punctuation">;</span>
<span class="token comment">--</span>
<span class="token comment">-- 資料表的匯出資料 `temp`</span>
<span class="token comment">--</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">temp</span><span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token keyword">datetime</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>temperature<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>humidity<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-01 09:20:02'</span><span class="token punctuation">,</span> <span class="token number">23.2</span><span class="token punctuation">,</span> <span class="token number">60.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-02 09:20:02'</span><span class="token punctuation">,</span> <span class="token number">20.1</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-03 09:21:03'</span><span class="token punctuation">,</span> <span class="token number">28.3</span><span class="token punctuation">,</span> <span class="token number">88.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-04 09:21:03'</span><span class="token punctuation">,</span> <span class="token number">25.4</span><span class="token punctuation">,</span> <span class="token number">70.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-05 09:25:03'</span><span class="token punctuation">,</span> <span class="token number">26.5</span><span class="token punctuation">,</span> <span class="token number">63.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-06 09:25:03'</span><span class="token punctuation">,</span> <span class="token number">32.1</span><span class="token punctuation">,</span> <span class="token number">74.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-07 09:26:02'</span><span class="token punctuation">,</span> <span class="token number">30.2</span><span class="token punctuation">,</span> <span class="token number">89.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-08 09:26:02'</span><span class="token punctuation">,</span> <span class="token number">22.2</span><span class="token punctuation">,</span> <span class="token number">64.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-09 09:27:03'</span><span class="token punctuation">,</span> <span class="token number">38.3</span><span class="token punctuation">,</span> <span class="token number">62.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-10 09:27:03'</span><span class="token punctuation">,</span> <span class="token number">32.4</span><span class="token punctuation">,</span> <span class="token number">56.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-11 09:28:02'</span><span class="token punctuation">,</span> <span class="token number">24.5</span><span class="token punctuation">,</span> <span class="token number">69.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-12 09:28:02'</span><span class="token punctuation">,</span> <span class="token number">35.6</span><span class="token punctuation">,</span> <span class="token number">51.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-pi-table-create2.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-pi-table-create2s.png" class="nofancybox  img-center"></a></p>
</li>
</ol>
</li>
</ul>
<h3 id="5-2-安裝-Adafruit-範例程式"><a href="#5-2-安裝-Adafruit-範例程式" class="headerlink" title="5.2 安裝 Adafruit 範例程式"></a>5.2 安裝 <code>Adafruit</code> 範例程式</h3><h4 id="5-2-1-法一"><a href="#5-2-1-法一" class="headerlink" title="5.2.1. 法一"></a>5.2.1. 法一</h4><ol>
<li><p>先安裝所需套件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新 apt-get</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token comment">#下載套件 Adafruit_Python_DHT 套件</span>
<span class="token builtin class-name">cd</span> ~/source
<span class="token function">git</span> clone https://github.com/adafruit/Adafruit_Python_DHT.git
<span class="token comment">#安裝</span>
<span class="token builtin class-name">cd</span> Adafruit_Python_DHT
<span class="token function">sudo</span> python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>測試:<br>接著就能讀取 <code>DHTXX</code> 了，執行寫好的範例 <code>Python</code> 程式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source/Adafruit_Python_DHT/examples
<span class="token function">cp</span> AdafruitDHT.py ~/source/.
<span class="token builtin class-name">cd</span> ~/source
python /home/pi/source/AdafruitDHT.py <span class="token number">2302</span> <span class="token number">17</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>參數 <code>11</code>   代表 <code>DHT11，17</code>   代表我把它接到 <code>Raspberry Pi</code> 的 <code>GPIO 17</code>。<br>參數 <code>22</code>   代表 <code>DHT22，17</code>   代表我把它接到 <code>Raspberry Pi</code> 的 <code>GPIO 17</code>。<br>參數 <code>2302</code> 代表 <code>DHT2302，17</code> 代表我把它接到 <code>Raspberry Pi</code> 的 <code>GPIO 17</code>。</p>
</li>
<li><p>輸出訊息<br>Temp=27.0*C  Humidity=81.0%</p>
</li>
</ol>
<h4 id="5-2-2-法二"><a href="#5-2-2-法二" class="headerlink" title="5.2.2. 法二"></a>5.2.2. 法二</h4><ol>
<li><p>先安裝所需套件<br><code>$ sudo pip install Adafruit_DHT</code></p>
</li>
<li><p>若要從 python 3 版本執行，請先安裝套件如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-dev python3-pip
<span class="token function">sudo</span> python3 -m pip <span class="token function">install</span> --upgrade pip setuptools wheel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>編輯 python 程式</p>
<p><code>~/source/dht22.py</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> Adafruit_DHT 

DHT_SENSOR <span class="token operator">=</span> Adafruit_DHT<span class="token punctuation">.</span>DHT22 
DHT_PIN <span class="token operator">=</span> <span class="token number">17</span>  

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    humidity<span class="token punctuation">,</span> temperature <span class="token operator">=</span> Adafruit_DHT<span class="token punctuation">.</span>read_retry<span class="token punctuation">(</span>DHT_SENSOR<span class="token punctuation">,</span> DHT_PIN<span class="token punctuation">)</span>
    <span class="token keyword">if</span> humidity <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> temperature <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Temp={0:0.2f}*C  Humidity={1:0.2f}%"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> humidity<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Failed to retrieve data from HDT22 sensor"</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
</ol>
<h3 id="5-3-修改現有程式碼-AdafruitDHT-py"><a href="#5-3-修改現有程式碼-AdafruitDHT-py" class="headerlink" title="5.3 修改現有程式碼 AdafruitDHT.py"></a>5.3 修改現有程式碼 <code>AdafruitDHT.py</code></h3><ul>
<li><p>程式碼</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> /home/pi/source/AdafruitDHT.py

<span class="token comment">#在現有程式碼最前面，引入以下內容</span>
<span class="token function">import</span> urllib
<span class="token function">import</span> urllib2
<span class="token function">import</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-7.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183s.synology.me/images/wiot-dht-7s.png" class="nofancybox  img-center"></a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在現有程式碼最後面，加入以下程式碼內容</span>
<span class="token assign-left variable">mydata</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'temperature'</span>,temperature<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token string">'humidity'</span>,humidity<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token assign-left variable">mydata</span><span class="token operator">=</span>urllib.urlencode<span class="token punctuation">(</span>mydata<span class="token punctuation">)</span>
path <span class="token operator">=</span> <span class="token string">'http://127.0.0.1/dht_write_temp.php'</span>
<span class="token assign-left variable">req</span><span class="token operator">=</span>urllib2.Request<span class="token punctuation">(</span>path, mydata<span class="token punctuation">)</span>
req.add_header<span class="token punctuation">(</span><span class="token string">"Content-type"</span>, <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span>
<span class="token assign-left variable">page</span><span class="token operator">=</span>urllib2.urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-1.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-1s.png" class="nofancybox  img-center"></a></p>
</li>
<li><p>產生程式碼 <code>dht_write_temp.php</code> 於網頁目錄 smarthome 下:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"connDB.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">date_defult_timezone_set</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Asia/Taipei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$now</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'YmdHis'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'temperature'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$humidity</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'humidity'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Temperature= "</span> <span class="token punctuation">.</span> <span class="token variable">$temp</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"humidity= "</span> <span class="token punctuation">.</span> <span class="token variable">$humidity</span> <span class="token punctuation">.</span>  <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>

    <span class="token variable">$sql</span> <span class="token operator">=</span>  <span class="token double-quoted-string string">"INSERT INTO temp  VALUES (null, <span class="token interpolation"><span class="token variable">$now</span></span>,<span class="token interpolation"><span class="token variable">$temp</span></span>,<span class="token interpolation"><span class="token variable">$humidity</span></span>)"</span><span class="token punctuation">;</span>
    <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"close connection"</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">", Date time="</span> <span class="token punctuation">.</span> <span class="token variable">$now</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">", Temperature="</span> <span class="token punctuation">.</span> <span class="token variable">$temp</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"  Humidity="</span> <span class="token punctuation">.</span> <span class="token variable">$humidity</span><span class="token punctuation">;</span>
  <span class="token delimiter important">?&gt;</span></span>
  ``` 
- 修改後，再用主程式 `AdafruitDHT.py` 測試，執行後，請檢查資料庫上是否有多一筆資料。
  
  `python /home/pi/source/AdafruitDHT.py 2302 17`

  問題: 會找不到 `url`
  解決: 刪除 `/etc/nginx/sites-enabled/default`

  ```bash
  sudo rm /etc/nginx/sites-enabled/default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="5-4-排程"><a href="#5-4-排程" class="headerlink" title="5.4 排程"></a>5.4 排程</h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source

<span class="token comment">#編輯 /home.pi/source/gettemp.sh</span>
<span class="token comment">#如果是  DHT11   加入 sudo python /home/pi/source/AdafruitDHT.py 11 17</span>
<span class="token comment">#如果是  DHT22   加入 sudo python /home/pi/source/AdafruitDHT.py 22 17</span>
<span class="token comment">#如果是  DHT2302 加入 sudo python /home/pi/source/AdafruitDHT.py 2302 17</span>
<span class="token comment">#如果是  LCD     加入 sudo python /home/pi/source/Adafruit_Python_DHT/examples/AdafruitDHT.py 22 17</span>

<span class="token comment">#編輯自動執行程序 gettemp.sh</span>
<span class="token function">nano</span> gettemp.sh

<span class="token comment">#加入以下內容</span>
<span class="token function">sudo</span> python /home/pi/source/AdafruitDHT.py <span class="token number">2302</span> <span class="token number">17</span>
<span class="token comment">#修改執行權限  </span>
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> gettemp.sh
<span class="token comment">#加入排程</span>
<span class="token function">sudo</span> <span class="token function">crontab</span> -e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-2.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-2s.png" class="nofancybox  img-center"></a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#最後面加入以下內容</span>
*/1 * * * * /home/pi/source/gettemp.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-3.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-3s.png" class="nofancybox  img-center"></a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#重新啟動</span>
<span class="token function">sudo</span> <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="5-5-DHT-sensor-讀取值後寫入資料庫-raspberryPI-的資料表-temp"><a href="#5-5-DHT-sensor-讀取值後寫入資料庫-raspberryPI-的資料表-temp" class="headerlink" title="5.5 DHT sensor 讀取值後寫入資料庫: raspberryPI 的資料表 temp"></a>5.5 <code>DHT</code> sensor 讀取值後寫入資料庫: <code>raspberryPI</code> 的資料表 <code>temp</code></h3><ol>
<li><p>主程式: <code>/home/pi/www/smarthome/dht_write_temp.php</code></p>
</li>
<li><p>先使用網址傳參數方式，測試數據可否正常寫入資料庫，如下步驟:<br>使用 <code>get</code> 方式，讀取網址傳入數，如下:</p>
<p><code>dht_write_temp.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"connDB.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//date_defult_timezone_set("Asia/Taipei");</span>

  <span class="token variable">$now</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'YmdHis'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'temperature'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$humidity</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'humidity'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Temperature= "</span> <span class="token punctuation">.</span> <span class="token variable">$temp</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"humidity= "</span> <span class="token punctuation">.</span> <span class="token variable">$humidity</span> <span class="token punctuation">.</span>  <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>

  <span class="token variable">$sql</span> <span class="token operator">=</span>  <span class="token double-quoted-string string">"INSERT INTO temp (`datetime`,`temperature`,`humidity`) VALUES (<span class="token interpolation"><span class="token variable">$now</span></span>,<span class="token interpolation"><span class="token variable">$temp</span></span>,<span class="token interpolation"><span class="token variable">$humidity</span></span>)"</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"close connection"</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">", Date time="</span> <span class="token punctuation">.</span> <span class="token variable">$now</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">", Temperature="</span> <span class="token punctuation">.</span> <span class="token variable">$temp</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"  Humidity="</span> <span class="token punctuation">.</span> <span class="token variable">$humidity</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試步驟</p>
<ul>
<li><p>輸入網址與參數: <code>http://smarthome.edu.tw/dht_write_temp.php?temperature='22'&amp;humidity='60'</code><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-4.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-4s.png" class="nofancybox  img-center"></a></p>
</li>
<li><p>打開 <a href="http://smarthome.edu.tw/phpmyadmin">phpmyadmin</a>，查詢 <code>temperature='22'&amp;humidity='60'</code> 數據有無寫入到 <code>raspberryPI.temp</code>。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-5.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-5s.png" class="nofancybox  img-center"></a></p>
</li>
</ul>
</li>
<li><p>確認沒問題後，將程式 <code>dht_write_temp.php</code> 的 <code>GET</code> 改成 <code>POST</code> 方法。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  <span class="token builtin class-name">:</span>
<span class="token variable">$temp</span>     <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'temperature'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$humidity</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'humidity'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token builtin class-name">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>觀察 <a href="http://smarthome.edu.tw/phpmyadmin">phpmyadmin</a> 上的資料表 <code>temp</code> 數據，一分鐘有無自動更新一次。</p>
</li>
</ol>
<h3 id="5-6-讀取資料庫的-temp-資料表應用集"><a href="#5-6-讀取資料庫的-temp-資料表應用集" class="headerlink" title="5.6 讀取資料庫的 temp 資料表應用集"></a>5.6 讀取資料庫的 temp 資料表應用集</h3><ol>
<li><p>主程式:   <code>/home/pi/www/smarthome/dht_read_temp.php</code></p>
</li>
<li><p>範例:</p>
<ul>
<li><p>溫溼度資料管理統:     <code>http://smarthome.edu.tw/dht_read_temp.php</code></p>
</li>
<li><p>溫溼度管理系統(傳統分頁): <code>http://smarthome.edu.tw/dht_read_temp_paging.php</code></p>
</li>
<li><p>溫溼度管理系統(使用 Bootstrap 分頁): <code>http://smarthome.edu.tw/dht_read_temp_paging_bootstrap.php</code></p>
</li>
<li><p>溫溼度表管理系統: 使用 <a href="https://plugins.jquery.com/bootpag/">jQuery.bootpag 分頁控件</a></p>
<ul>
<li><code>dht_read_temp_paging_bootpag.php</code></li>
<li><code>tempQuery.php</code></li>
</ul>
</li>
<li><p>溫溼度表:</p>
<ul>
<li><code>http://smarthome.edu.tw/dht_read_temp_ajax.php</code> (前端)</li>
<li><code>http://smarthome.edu.tw/dht_read_temp_ajax_api.php</code> (後端)</li>
</ul>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-8.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-8s.png" class="nofancybox  img-center"></a></p>
</li>
<li><p>溫度顯示圖表 (2D): <code>showTemperatureChart.php</code></p>
</li>
<li><p>溫度顯示圖表 (3D): <code>showChart.php</code></p>
</li>
</ul>
</li>
</ol>
<h3 id="5-7-溫、濕度資料寫入-LCD-1502"><a href="#5-7-溫、濕度資料寫入-LCD-1502" class="headerlink" title="5.7 溫、濕度資料寫入 LCD 1502"></a>5.7 溫、濕度資料寫入 LCD 1502</h3><ol>
<li><p>LCD 功能啟用</p>
</li>
<li><p>下載 LCD 驅動程式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> $ <span class="token function">git</span> clone https://github.com/paulbarber/raspi-gpio
 $ <span class="token builtin class-name">cd</span> raspi-gpio
 $ <span class="token function">nano</span>  lcd_display.py
    
<span class="token comment">#修改 ADDRESS 為 0x3f</span>
  <span class="token function">import</span> i2c_lib
  from <span class="token function">time</span> <span class="token function">import</span> <span class="token function">sleep</span>

 <span class="token comment"># LCD Address</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>AdafruitDHT.py</code> 程式碼修改</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span>
<span class="token comment"># Copyright (c) 2014 Adafruit Industries</span>
<span class="token comment"># Author: Tony DiCola</span>

<span class="token comment"># Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<span class="token comment"># of this software and associated documentation files (the "Software"), to deal</span>
<span class="token comment"># in the Software without restriction, including without limitation the rights</span>
<span class="token comment"># to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<span class="token comment"># copies of the Software, and to permit persons to whom the Software is</span>
<span class="token comment"># furnished to do so, subject to the following conditions:</span>

<span class="token comment"># The above copyright notice and this permission notice shall be included in all</span>
<span class="token comment"># copies or substantial portions of the Software.</span>
<span class="token comment"># THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<span class="token comment"># IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<span class="token comment"># FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<span class="token comment"># AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<span class="token comment"># LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<span class="token comment"># OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span>
<span class="token comment"># SOFTWARE.</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> time   
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"/home/pi/source/raspi-gpio"</span><span class="token punctuation">)</span>   
<span class="token keyword">from</span> lcd_display <span class="token keyword">import</span> lcd   
<span class="token keyword">import</span> Adafruit_DHT   
<span class="token keyword">import</span> urllib
<span class="token keyword">import</span> urllib2
<span class="token keyword">import</span> requests   
<span class="token comment"># Parse command line parameters.</span>
sensor_args <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'11'</span><span class="token punctuation">:</span> Adafruit_DHT<span class="token punctuation">.</span>DHT11<span class="token punctuation">,</span>
                <span class="token string">'22'</span><span class="token punctuation">:</span> Adafruit_DHT<span class="token punctuation">.</span>DHT22<span class="token punctuation">,</span>
                <span class="token string">'2302'</span><span class="token punctuation">:</span> Adafruit_DHT<span class="token punctuation">.</span>AM2302 <span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> sensor_args<span class="token punctuation">:</span>
    sensor <span class="token operator">=</span> sensor_args<span class="token punctuation">[</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    pin <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Usage: sudo ./Adafruit_DHT.py [11|22|2302] &lt;GPIO pin number&gt;'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Example: sudo ./Adafruit_DHT.py 2302 4 - Read from an AM2302 connected to GPIO pin #4'</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment"># Try to grab a sensor reading.  Use the read_retry method which will retry up</span>
<span class="token comment"># to 15 times to get a sensor reading (waiting 2 seconds between each retry).</span>
humidity<span class="token punctuation">,</span> temperature <span class="token operator">=</span> Adafruit_DHT<span class="token punctuation">.</span>read_retry<span class="token punctuation">(</span>sensor<span class="token punctuation">,</span> pin<span class="token punctuation">)</span>

<span class="token comment"># Un-comment the line below to convert the temperature to Fahrenheit.</span>
<span class="token comment"># temperature = temperature * 9/5.0 + 32</span>

<span class="token comment"># Note that sometimes you won't get a reading and</span>
<span class="token comment"># the results will be null (because Linux can't</span>
<span class="token comment"># guarantee the timing of calls to read the sensor).</span>
<span class="token comment"># If this happens try again!</span>

<span class="token keyword">if</span> humidity <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> temperature <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    my_lcd <span class="token operator">=</span> lcd<span class="token punctuation">(</span><span class="token punctuation">)</span>
    my_lcd<span class="token punctuation">.</span>display_string<span class="token punctuation">(</span><span class="token string">'T:{:.1f}C'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' H:{:.1f}%'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>humidity<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    my_lcd<span class="token punctuation">.</span>display_string<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y/%m/%d"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Temp={0:0.1f}*  Humidity={1:0.1f}%'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> humidity<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Failed to get reading. Try again!'</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

mydata<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'temperature'</span><span class="token punctuation">,</span>temperature<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'humidity'</span><span class="token punctuation">,</span>humidity<span class="token punctuation">)</span><span class="token punctuation">]</span>
mydata<span class="token operator">=</span>urllib<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>mydata<span class="token punctuation">)</span>
path <span class="token operator">=</span> <span class="token string">'http://127.0.0.1/dht_write_temp.php'</span>
req<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>path<span class="token punctuation">,</span> mydata<span class="token punctuation">)</span>
req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span>
page<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-RFID-Tag"><a href="#6-RFID-Tag" class="headerlink" title="6. RFID Tag"></a>6. RFID Tag</h2></li>
</ol>
<h3 id="6-1-參考文章"><a href="#6-1-參考文章" class="headerlink" title="6.1 參考文章"></a>6.1 參考文章</h3><ul>
<li><code>http://atceiling.blogspot.com/2017/02/raspberry-pi-rfid.html</code></li>
<li><code>https://pimylifeup.com/raspberry-pi-rfid-rc522/</code></li>
</ul>
<h3 id="6-2-更新軟體"><a href="#6-2-更新軟體" class="headerlink" title="6.2 更新軟體"></a>6.2 更新軟體</h3><ol>
<li><p>更新 OS</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token comment"># sudo apt -t stretch update</span>

<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade  
<span class="token comment"># sudo apt -t stretch upgrade</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>更新 RPI OS</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> rpi-update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ol>
<h3 id="6-3-使用-raspi-config-確認已經啟用-SPI-協定功能"><a href="#6-3-使用-raspi-config-確認已經啟用-SPI-協定功能" class="headerlink" title="6.3 使用 raspi-config 確認已經啟用 SPI 協定功能"></a>6.3 使用 <code>raspi-config</code> 確認已經啟用 <code>SPI</code> 協定功能</h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#P4 SPI ENABLED</span>
<span class="token function">sudo</span> raspi-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_1.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_1s.png" class="nofancybox img-center"></a><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_2.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_2s.png" class="nofancybox img-center"></a><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_3.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_3s.png" class="nofancybox img-center"></a><br><a data-fancybox="gallery" href=""><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_4s.png" class="nofancybox img-center"></a><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_5.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_5s.png" class="nofancybox img-center"></a></p>
</li>
</ul>
<h3 id="6-4-在-boot-config-txt-最後加入以下內容"><a href="#6-4-在-boot-config-txt-最後加入以下內容" class="headerlink" title="6.4 在 /boot/config.txt 最後加入以下內容"></a>6.4 在 <code>/boot/config.txt</code> 最後加入以下內容</h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /boot/config.txt
<span class="token comment"># 最後加上以下內容</span>
<span class="token comment"># RFID  </span>
<span class="token assign-left variable">dtparam</span><span class="token operator">=</span>spi<span class="token operator">=</span>on
<span class="token assign-left variable">dtoverlay</span><span class="token operator">=</span>spi-bcm2708
<span class="token assign-left variable">dtoverlay</span><span class="token operator">=</span>spi0-hw-cs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="6-5-重開-raspberry-pi"><a href="#6-5-重開-raspberry-pi" class="headerlink" title="6.5 重開 raspberry pi"></a>6.5 重開 <code>raspberry pi</code></h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">reboot</span> now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h3 id="6-6-檢查-spi-模組是否已經成功安裝"><a href="#6-6-檢查-spi-模組是否已經成功安裝" class="headerlink" title="6.6 檢查 spi 模組是否已經成功安裝"></a>6.6 檢查 <code>spi</code> 模組是否已經成功安裝</h3><ul>
<li><p><code>lsmod | grep spi</code></p>
<blockquote>
<p>若出現一下這一行，表示 spi 安裝成功<br>  spi_bcm2835       20480  0</p>
</blockquote>
</li>
<li><p>確認 <code>24pin</code> 腳設定正確</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpio readall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h3 id="6-7-線路圖"><a href="#6-7-線路圖" class="headerlink" title="6.7 線路圖"></a>6.7 線路圖</h3><ol>
<li><p>實體圖<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfids.png" class="nofancybox img-center"></a></p>
</li>
<li><p>PIN 腳對應如下</p>
<table>
<thead>
<tr>
<th>RC522 Pin</th>
<th>Pi pin</th>
<th>PI GPIO signal and function</th>
</tr>
</thead>
<tbody><tr>
<td>SDA(NSS)</td>
<td>24</td>
<td>CS0 – This is the SPI chip select, active low</td>
</tr>
<tr>
<td>SCK</td>
<td>23</td>
<td>SCLK – this is the SPI clock</td>
</tr>
<tr>
<td>MOSI</td>
<td>19</td>
<td>MOSI – data to the RC522</td>
</tr>
<tr>
<td>MISO</td>
<td>21</td>
<td>MISO – data from the RC522</td>
</tr>
<tr>
<td>IRQ</td>
<td></td>
<td>None</td>
</tr>
<tr>
<td>GND</td>
<td>6</td>
<td>GND</td>
</tr>
<tr>
<td>RST</td>
<td>22</td>
<td>GPIO25</td>
</tr>
<tr>
<td>3.3V</td>
<td>1</td>
<td>2.3V</td>
</tr>
</tbody></table>
<blockquote>
<p>SPI匯流排定義四組 logic signals：<br>  • SCLK—Serial Clock（自master輸出）<br>  • MOSI—Master Output, Slave Input（自master輸出）<br>  • MISO—Master Input, Slave Output（自slave輸出）</p>
</blockquote>
</li>
</ol>
<h3 id="6-8-透過已下指令安裝相關需要的工具跟範例程式"><a href="#6-8-透過已下指令安裝相關需要的工具跟範例程式" class="headerlink" title="6.8 透過已下指令安裝相關需要的工具跟範例程式"></a>6.8 透過已下指令安裝相關需要的工具跟範例程式</h3><ol>
<li><p>下載套件與安裝</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">   <span class="token builtin class-name">cd</span> ~/source
   <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y python-dev
   <span class="token comment"># 取得SPI-py程式碼，SPI-py是 python 讀取硬體 SPI 的擴充函式庫：</span>
   <span class="token function">git</span> clone https://github.com/lthiery/SPI-Py.git
   <span class="token comment"># 安裝 SPI 模組</span>
   <span class="token builtin class-name">cd</span> SPI-Py
   <span class="token function">sudo</span> python setup.py <span class="token function">install</span>
   <span class="token builtin class-name">cd</span> ~/source

<span class="token number">2</span>. 安裝 <span class="token variable"><span class="token variable">`</span>MFRC522-python<span class="token variable">`</span></span>

   ```bash
   <span class="token function">git</span> clone https://github.com/mxgxw/MFRC522-python.git
   <span class="token builtin class-name">cd</span> MFRC522-python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python Read.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>出現問題，如下畫面:<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_6.png"> <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_6s.png" class="nofancybox img-center"></a></p>
<p>問題解決:</p>
<ul>
<li><p><code>python -v</code><br>問題發生於: 執行於 <code>version 2.7.13</code> 上會有問題。</p>
</li>
<li><p>解決: 複製其中的 mfrc522/MFRC522.py 取代下的 /source/MFRC522-python/MFRC522.py</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source
<span class="token function">git</span> clone https://github.com/pimylifeup/MFRC522-python.git  MFRC522
<span class="token function">cp</span> MFRC522/mfrc522/MFRC522.py ~/source/MFRC522-python/MFRC522.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>再執行測試</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source/MFRC522-python
python Read.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_test.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_tests.png" class="nofancybox img-center"></a></p>
</li>
</ul>
</li>
<li><p>建立資料表 <code>rfid</code></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> <span class="token punctuation">`</span>raspberryPI<span class="token punctuation">`</span><span class="token punctuation">;</span>
<span class="token comment">-- 資料表結構 `rfid`</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>rfid<span class="token punctuation">`</span> <span class="token punctuation">(</span>
  <span class="token punctuation">`</span><span class="token keyword">datetime</span><span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>rfid_data<span class="token punctuation">`</span> <span class="token keyword">mediumtext</span> <span class="token keyword">COLLATE</span> utf8_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_unicode_ci<span class="token punctuation">;</span>
<span class="token comment">-- 資料表的匯出資料 `rfid`</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>rfid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token keyword">datetime</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>rfid_data<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-11 14:23:47'</span><span class="token punctuation">,</span> <span class="token string">'5464521376'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-11 14:29:11'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-11 14:29:11'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-11 14:29:12'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-13 19:18:44'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-13 19:19:13'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-13 19:19:21'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:41:52'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:41:55'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:41:57'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:41:59'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:01'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:04'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:06'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:08'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:10'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:14'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:14'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:19'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:45:26'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:45:28'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:45:44'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:46:06'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:46:12'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:28'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:33'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:35'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:38'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:43'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:45'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:46'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:48'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:49'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:50'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:50'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:50'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:51'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:51'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:53'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:03:23'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:03:54'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:03:54'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:03:54'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:10:40'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:49:23'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:49:23'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:49:33'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:49:33'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:53:14'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:53:14'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:15'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:15'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:19'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:19'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:30'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:30'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:30'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:30'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:30'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:31'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:31'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:31'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:31'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:36'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:36'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:36'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:36'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修正主程式: <code>Read.py</code></p>
<p>連結 <a href="http://ftp.allen5183.synology.me/Read.py">Read.py</a> 後, 取代原來檔案 <code>Read.py</code>。</p>
</li>
<li><p>產生程式碼 <code>rfid_write_db.php</code> 於 <code>smarthome</code> 目錄下:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"connDB.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">date_default_timezone_get</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Asia/Taipei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token variable">$date</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Ymdhis'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$rfid_data</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'rfid_data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"INSERT INTO rfid (datetime,rfid_data) VALUES (<span class="token interpolation"><span class="token variable">$date</span></span>, <span class="token interpolation"><span class="token variable">$rfid_data</span></span>)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"powenk.com get it"</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"date time"</span> <span class="token punctuation">.</span> <span class="token variable">$date</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">",rdid date="</span> <span class="token punctuation">.</span> <span class="token variable">$rfid_data</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>執行主程式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python Read.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>刷 <code>RFID</code> 後，檢查是否 <code>tag</code> 資料有寫入資料表 <code>rfid</code>。</p>
</li>
<li><p>應用原理</p>
<p>嗶卡後將 <code>rfid</code> 編碼資料丟入資料庫, 在到資料庫抓取資料記錄的時間, 寫到 rfid 資料表，</p>
<p><code>Read.py</code></p>
<p><code>content,response_code=fetch_thing('http://127.0.0.1/rfid_write_db.php',{'rfid_data':x},'GET')</code></p>
</li>
<li><p>Q&amp;A</p>
<ul>
<li><p>Q: No module named RPI.GPIO<br>A: <code>pip install RPi.GPIO</code></p>
</li>
<li><p>Q: PHP 時間不正確<br>A:</p>
<ul>
<li><p>修正時區</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span>  /etc/php/7.0/fpm/php.ini

date.timezone <span class="token operator">=</span> <span class="token string">"Asia/Taipei"</span>

<span class="token comment">#重啟 `php-fpm` 服務</span>
<span class="token function">sudo</span> <span class="token function">service</span> php7.0-fpm restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>時區修正，安裝  <code>NTP Server</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ntpdate
<span class="token comment">#修改時區</span>
tzselect       <span class="token comment"># 選 4)Asia 再選 43)Taiwan，確認 1)Yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試時間</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">date</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>開機時自動執行 <code>RDID</code> 偵測:</p>
<p>#編輯自動執行程序</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source
<span class="token function">nano</span> rfid.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>import os<br>os.system(‘python /home/pi/source/MFRC522-python/Read.py’)</p>
<blockquote>
<p>PS: <code>import os</code> 與 <code>os.system()</code> 注意前面不要空行</p>
</blockquote>
<p>#檔案修改成可執行<br><code>chmod 755 rfid.py</code></p>
<p>#加入排程<br><code>sudo nano /etc/crontab</code></p>
<p>最後面<br>#加入以下指令<br>@reboot root python /home/pi/source/rfid.py &amp;</p>
</li>
<li><p>應用</p>
</li>
</ol>
<ul>
<li><p>寫入資料庫<br>讀取 <code>RFID</code> 的 Tag ID 後，再透過 <code>http://smarthome.edu.tw/rfid_write_db.php</code> 寫入 DB。</p>
</li>
<li><p>讀取資料<br><code>RFID</code> 的 Tag ID 從資料庫取得，透過 <code>http://smarthome.edu.tw/rfid_read_db.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">require_once</span> <span class="token double-quoted-string string">"connDB.php"</span><span class="token punctuation">;</span>
  <span class="token function">date_default_timezone_get</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Asia/Taipei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"SELECT * FROM rfid ORDER BY datetime DESC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;form align='center' name='form1' method='post' action=''&gt;"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;h1 align=\"center\"&gt;RFID Tag 資料管理系統&lt;/h1&gt;"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;table align=center border='1' style='border-collapse: collapse' cellpadding='4'&gt;

  &lt;tr&gt;
    &lt;th&gt;日期時間&lt;/th&gt;
    &lt;th&gt;Tag Code&lt;/th&gt;
  &lt;/tr&gt;"</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;tr&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'datetime'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'rfid_data'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/tr&gt;"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/table&gt;"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/form&gt;"</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>手動測試:<br><code>http://smarthome.edu.tw/rfid_write_db.php?rfid_data="test"</code></p>
</li>
<li><p>顯示於 LCD 1602</p>
<ol>
<li><p>Raspberry I2C 功能<br>$sudo raspi-config<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210520141632.png" alt="20210520141632"></p>
<br>
![20210520141709](https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210520141709.png)
</li>
<li><p>重新開機<br><code>sudo shutdown -r now</code></p>
</li>
<li><p>安裝 <code>RPLCD</code> 套件<br><code>pip install RPLCD</code></p>
</li>
<li><p>安裝 <code>smbus2</code> 套件<br><code>pip install smbus2</code></p>
</li>
<li><p>確認 <code>RPLCD</code>, <code>smbus2</code> 套件皆已正確安裝<br><code>pip list</code></p>
</li>
<li><p>尋找 I2C 裝置的位址<br><code>i2cdetect -y 1</code></p>
</li>
<li><p>編輯程式碼 <code>i2c_lcd.py</code><br><code>~/source $ nano i2c_lcd.py</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">     <span class="token keyword">import</span> sys
     <span class="token keyword">import</span> time
     <span class="token keyword">import</span> smbus2
     <span class="token comment"># 將 smbus 模組用 smbus2 取代</span>
     sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">'smbus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> smbus2
     <span class="token comment">#引入 smbus2 套件</span>
     <span class="token keyword">from</span> RPLCD<span class="token punctuation">.</span>i2c <span class="token keyword">import</span> CharLCD
     <span class="token comment">#建立一個可透過 I2C 介面來控制 LCD 的 Python 物件。其中 PCF8574 為 I2C 晶片型號，而 address 為我們透過指令 i2cdetect 所找出的裝置位址，而 backlight_enabled=False 則是關閉其背光功能。如果你使用的 I2C 裝置位址與此不同，請記得要加以修改。</span>
     lcd <span class="token operator">=</span> CharLCD<span class="token punctuation">(</span><span class="token string">'PCF8574'</span><span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token number">0x27</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> backlight_enabled<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

     <span class="token keyword">try</span><span class="token punctuation">:</span>
         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'按下 Ctrl-C 可停止程式'</span><span class="token punctuation">)</span>
         <span class="token comment">#將螢幕內容清空</span>
         lcd<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
             <span class="token comment">#將下一次輸出的開始位置設定為  (0, 0)，也就是第一行的第一個字元</span>
             lcd<span class="token punctuation">.</span>cursor_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
             lcd<span class="token punctuation">.</span>write_string<span class="token punctuation">(</span><span class="token string">"Date: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y/%m/%d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             lcd<span class="token punctuation">.</span>cursor_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
             lcd<span class="token punctuation">.</span>write_string<span class="token punctuation">(</span><span class="token string">"Time: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
     <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'關閉程式'</span><span class="token punctuation">)</span>
     <span class="token keyword">finally</span><span class="token punctuation">:</span>
         lcd<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
     ```  
     

<span class="token comment">## 9. 樹梅派控制伺服馬達 SG90 Servo </span>

<span class="token comment">### 硬體介紹</span>

<span class="token number">1</span><span class="token punctuation">.</span> 三隻接腳依序分別為<span class="token punctuation">:</span>
   <span class="token operator">-</span> 控制 <span class="token punctuation">(</span>橘色<span class="token punctuation">)</span>   RPI <span class="token number">11</span> BCM <span class="token number">17</span>
   <span class="token operator">-</span> 電源 <span class="token punctuation">(</span>紅色<span class="token punctuation">)</span>   RPI <span class="token number">2</span>  <span class="token operator">+</span>5V
   <span class="token operator">-</span> 接地 <span class="token punctuation">(</span>棕色 <span class="token punctuation">)</span>  RPI <span class="token number">6</span>  GND
  
   <span class="token operator">&lt;</span>a data<span class="token operator">-</span>fancybox<span class="token operator">=</span><span class="token string">"gallery"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521092755.png"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521092755s.png"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>

<span class="token number">2</span><span class="token punctuation">.</span> 在 `Raspberry Pi` 使用伺服馬達有一些需要特別注意的地方。
 <span class="token operator">-</span> 首先當然是控制能力。因為 Raspberry Pi 的 PWM 的功能並不算上強大，如果使用的是軟體模擬 PWM，效果更是差強人意。而由於 PWM 是用來控制伺服馬達旋轉角度的機制，所以使得 Raspberry Pi 在控制伺服馬達的角度方面並不是那麼地精準跟穩定。
 <span class="token operator">-</span> 再來則是電壓的問題。一般伺服馬達無法使用 <span class="token operator">+</span><span class="token number">3.</span>3V 加以驅動，所以除非透過外部電源，否則就只能使用 <span class="token operator">+</span>5V 接腳當作供電來源。而 Raspberry Pi 的 <span class="token operator">+</span>5V 電壓直接來自於 USB <span class="token punctuation">(</span>或外接電源<span class="token punctuation">)</span>，並沒有經過整流，所以電源的穩定度較差。
 <span class="token operator">-</span> 最後則是電流的問題。因為 Raspberry Pi 的 <span class="token operator">+</span>5V 電源來自於 USB <span class="token punctuation">(</span>或外接電源<span class="token punctuation">)</span>，其實際上能夠輸出的最大電流受到很多因素的影響，所以可能因為輸出電流不夠而造成伺服馬達運作不正常。此外，伺服馬達啟動時通常會有一瞬間的較大電流，也有可能導致板子的損毀。

   
總結來說，如果想要比較精確地控制伺服馬達，尤其是多個伺服馬達時，可以考慮選用專用的 HAT 或是改用 Arduino 等其他控制板。

<span class="token number">3</span><span class="token punctuation">.</span> `PWM` 與旋轉角度
   脈衝寬度與旋轉角度的關係是<span class="token punctuation">,</span>大多數伺服馬達以 <span class="token number">1</span> ms 的脈衝寬度當作 <span class="token operator">-</span><span class="token number">90</span> 度，而 <span class="token number">2</span> ms 則為 <span class="token operator">+</span><span class="token number">90</span> 度。
   <span class="token operator">&lt;</span>a data<span class="token operator">-</span>fancybox<span class="token operator">=</span><span class="token string">"gallery"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093132.png"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093132s.png"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>

   因為我們所使用的 Python 套件必須指定 PWM 的工作週期而非脈衝寬度，所以我們必須先進行轉換。當頻率為 <span class="token number">50</span> Hz 時，則每一個週期為 <span class="token number">1</span><span class="token operator">/</span><span class="token number">50</span> <span class="token operator">=</span> <span class="token number">0.02</span> 秒，也就是 <span class="token number">20</span> 毫秒 <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>。<span class="token number">1</span> ms 的脈衝寬度其工作週期為 <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">20</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">%</span>

   <span class="token operator">&lt;</span>a data<span class="token operator">-</span>fancybox<span class="token operator">=</span><span class="token string">"gallery"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093224.png"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093224s.png"</span><span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>

   同樣的，<span class="token number">2</span> ms 脈衝寬度的工作週期則為 <span class="token number">10</span><span class="token operator">%</span>。所以我們只要把 PWM 的頻率設定為 <span class="token number">50</span> Hz，然後控制工作週期在 <span class="token number">5</span><span class="token operator">~</span><span class="token number">10</span><span class="token operator">%</span> 之間，就可以從 <span class="token operator">-</span><span class="token number">90</span> 度旋轉到 <span class="token operator">+</span><span class="token number">90</span> 度。不過因為其實轉軸外部並沒有任何記號，所以為了方便我們也可以說是從 <span class="token number">0</span> 度轉到 <span class="token number">180</span> 度 <span class="token punctuation">(</span>逆時針方向<span class="token punctuation">)</span>。換句話說，旋轉角度與工作週期的關係可用下表呈現：


   旋轉角度 <span class="token operator">|</span> 工作週期 <span class="token punctuation">(</span>當頻率為 <span class="token number">50</span> Hz 時<span class="token punctuation">)</span> 
   <span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">|</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
    <span class="token number">0</span> 度  <span class="token operator">|</span>	   <span class="token number">5</span><span class="token operator">%</span>
   <span class="token number">45</span> 度  <span class="token operator">|</span>	<span class="token number">6.25</span><span class="token operator">%</span>
   <span class="token number">90</span> 度  <span class="token operator">|</span>	<span class="token number">7.5</span><span class="token operator">%</span>
   <span class="token number">135</span> 度 <span class="token operator">|</span>	<span class="token number">8.75</span><span class="token operator">%</span>
   <span class="token number">180</span> 度	<span class="token operator">|</span> <span class="token number">10</span><span class="token operator">%</span>

   或者也可以用下列圖形加以說明：
   <span class="token operator">&lt;</span>a data<span class="token operator">-</span>fancybox<span class="token operator">=</span><span class="token string">"gallery"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093347.png"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093347s.png"</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>

   其實就是一個一元一次函數。根據前面分析的結果，只要把 <span class="token number">5</span><span class="token operator">%</span><span class="token operator">~</span><span class="token number">10</span><span class="token operator">%</span> 之間的差距平分給 <span class="token number">180</span> 個角度，就可以控制伺服馬達的旋轉角度了。也就是
   <span class="token operator">&lt;</span>a data<span class="token operator">-</span>fancybox<span class="token operator">=</span><span class="token string">"gallery"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093438.png"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093438s.png"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>

   經過查看 Servo 函式庫的文件後，發現預設 <span class="token number">0</span> 度的脈衝寬度是 <span class="token number">544</span> microsecond，也就是 <span class="token number">0.544</span> ms，而預設 <span class="token number">180</span> 度的脈衝寬度則是 <span class="token number">2400</span> microsecond，也就是 <span class="token number">2.4</span> ms。而在某些文件中可以看到 SG90 的脈衝寬度為 <span class="token number">0.5</span> ms <span class="token operator">~</span> <span class="token number">2.4</span> ms，所以使用 <span class="token number">1</span> ms <span class="token operator">~</span> <span class="token number">2</span> ms 當然就會有很大的偏差。此外，少數資料對 <span class="token number">0.5</span> ms <span class="token operator">~</span> <span class="token number">2.4</span> ms 的解釋是 SG90 可以擁有更大的旋轉角度，但是很顯然實際上並不是這樣。否則根據這句話來看，SG90 已經可以旋轉接近 <span class="token number">360</span> 度了。

   同樣在頻率為 50Hz 的情況下，脈衝寬度為 <span class="token number">0.5</span> ms 時的工作週期為 <span class="token number">2.5</span><span class="token operator">%</span>，而 <span class="token number">2.4</span> ms 的工作週期則為 <span class="token number">12</span><span class="token operator">%</span>，所以針對 SG90 修改公式如下：
   <span class="token operator">&lt;</span>a data<span class="token operator">-</span>fancybox<span class="token operator">=</span><span class="token string">"gallery"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093546.png"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093546s.png"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>

   一樣是一個一元一次函數。
   不過在實際撰寫程式時，因為我們希望頻率是可以由程式加以指定，所以需要重新改寫如下：
   <span class="token operator">&lt;</span>a data<span class="token operator">-</span>fancybox<span class="token operator">=</span><span class="token string">"gallery"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093738.png"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093738s.png"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>

   <span class="token operator">&lt;</span>a data<span class="token operator">-</span>fancybox<span class="token operator">=</span><span class="token string">"gallery"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093738.png"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093738s.png"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>

   此公式即為後面 Python 程式所使用之計算方式。

<span class="token number">4</span><span class="token punctuation">.</span> 線路圖
   <span class="token operator">&lt;</span>a data<span class="token operator">-</span>fancybox<span class="token operator">=</span><span class="token string">"gallery"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093705.png"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521093705s.png"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>

<span class="token number">5</span><span class="token punctuation">.</span> 說明如下<span class="token punctuation">:</span>

 <span class="token operator">-</span> 在這個範例中我們將使用軟體模擬的 PWM 功能，所以控制接腳 <span class="token punctuation">(</span>橘色<span class="token punctuation">)</span> 可連結至任一可用於輸出的腳位，這個範例中我們使用實體編號 <span class="token number">11</span> 的腳位 <span class="token punctuation">(</span>其 BCM 編號為 <span class="token number">17</span><span class="token punctuation">)</span>。
 <span class="token operator">-</span> SG90 的工作電壓為 <span class="token operator">+</span><span class="token number">4.</span>8V 以上，所以我們必須連結至 Raspberry Pi <span class="token operator">+</span>5V 的腳位，在此我們將 SG90 電源輸入接腳 <span class="token punctuation">(</span>紅色<span class="token punctuation">)</span> 連結至實體編號 <span class="token number">2</span> 的腳位。
 <span class="token operator">-</span> 接地接腳 <span class="token punctuation">(</span>棕色<span class="token punctuation">)</span> 必須接地，所以連結至 Raspberry Pi 的實體編號 <span class="token number">6</span> 的腳位。
 <span class="token operator">-</span> 腳位對應關係整理如下：

   SG90 伺服馬達接腳	<span class="token operator">|</span>Raspberry Pi GPIO 腳位
   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
   橘色 <span class="token punctuation">(</span>控制訊號<span class="token punctuation">)</span>	  <span class="token operator">|</span>實體編號 <span class="token number">11</span> <span class="token punctuation">(</span>BCM 編號 <span class="token number">17</span><span class="token punctuation">)</span>
   紅色 <span class="token punctuation">(</span>電源輸入<span class="token punctuation">)</span>	  <span class="token operator">|</span>實體編號 <span class="token number">2</span> <span class="token punctuation">(</span><span class="token operator">+</span>5V<span class="token punctuation">)</span>
   棕色 <span class="token punctuation">(</span>接地<span class="token punctuation">)</span>	     <span class="token operator">|</span>實體編號 <span class="token number">6</span> <span class="token punctuation">(</span>接地<span class="token punctuation">)</span>
 <span class="token operator">-</span> 如之前所提，伺服馬達的啟動或運作電流可能會過大而造成運作不正常、甚至損毀 Raspberry Pi，因此如果你手邊的伺服馬達並沒有註明型號，也沒有相關規格，請避免直接連結至 Raspberry Pi。

<span class="token number">6</span><span class="token punctuation">.</span> 程式代碼
   
   `nano pwm_sg90<span class="token punctuation">.</span>py`
   
   ```python
   <span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO
   <span class="token keyword">import</span> time
   
   CONTROL_PIN <span class="token operator">=</span> <span class="token number">17</span>
   PWM_FREQ <span class="token operator">=</span> <span class="token number">50</span>
   STEP<span class="token operator">=</span><span class="token number">15</span>
   
   GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>
   GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>CONTROL_PIN<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
   
   pwm <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span>CONTROL_PIN<span class="token punctuation">,</span> PWM_FREQ<span class="token punctuation">)</span>
   pwm<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
   
   <span class="token keyword">def</span> <span class="token function">angle_to_duty_cycle</span><span class="token punctuation">(</span>angle<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
       duty_cycle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.05</span> <span class="token operator">*</span> PWM_FREQ<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0.19</span> <span class="token operator">*</span> PWM_FREQ <span class="token operator">*</span> angle <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span> duty_cycle
   
   <span class="token keyword">try</span><span class="token punctuation">:</span>
       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'按下 Ctrl-C 可停止程式'</span><span class="token punctuation">)</span>
       <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> STEP<span class="token punctuation">)</span><span class="token punctuation">:</span>
           dc <span class="token operator">=</span> angle_to_duty_cycle<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>
           pwm<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>
           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'角度={: &gt;3}, 工作週期={:.2f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>angle<span class="token punctuation">,</span> dc<span class="token punctuation">)</span><span class="token punctuation">)</span>
           time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
       <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>STEP<span class="token punctuation">)</span><span class="token punctuation">:</span>
           dc <span class="token operator">=</span> angle_to_duty_cycle<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>
           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'角度={: &gt;3}, 工作週期={:.2f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>angle<span class="token punctuation">,</span> dc<span class="token punctuation">)</span><span class="token punctuation">)</span>
           pwm<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>
           time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
       pwm<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>angle_to_duty_cycle<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
           <span class="token builtin">next</span>
   <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'關閉程式'</span><span class="token punctuation">)</span>
   <span class="token keyword">finally</span><span class="token punctuation">:</span>
       pwm<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>
       GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
</ul>
<ol start="7">
<li><p>程式說明如下:</p>
<ul>
<li>第 1 行引入 RPi.GPIO 套件，在這個範例中我們將使用這個套件所提供的 PWM 功能。</li>
<li>第 4 行定義控制接腳所連結之 Raspberry Pi 腳位，我們連結的是實體編號 11 的腳位，其 BCM 編號為 17。</li>
<li>第 5 行定義 PWM 所使用的頻率。</li>
<li>第 6 行定義每次旋轉的角度。</li>
<li>第 8 行使用 BCM 編號方式。</li>
<li>第 9 行將控制腳位設定為輸出。</li>
<li>第 11 行宣告 pwm 控制物件。</li>
<li>第 12 行開始 pwm 功能。</li>
<li>第 14~16 行定義角度與工作週期的對應關係，也就是前述的公式三。</li>
<li>第 20~29 行透過兩個 for 迴圈將 SG90 由 0 度逐次旋轉至 180 度，之後再逐次轉回 0 度。</li>
<li>第 30 行將 SG90 軸心旋轉至 90 度。</li>
<li>第 31~32 行執行無任何功能的迴圈，其目的是讓 SG90 的軸心停在 90 度的位置。</li>
<li>第 36~37 行確定程式停止後 pwm 功能會被關閉，而且程式所使用的腳位會回到預設狀態。</li>
</ul>
<p>程式完成後，輸入下列指令執行程式<br><code>python pwm_sg90.py</code></p>
</li>
</ol>
<h3 id="利用-Raspberry-Pi-硬體式-PWM-功能來控制伺服馬達-SG90"><a href="#利用-Raspberry-Pi-硬體式-PWM-功能來控制伺服馬達-SG90" class="headerlink" title="利用 Raspberry Pi 硬體式 PWM 功能來控制伺服馬達 SG90"></a>利用 Raspberry Pi 硬體式 PWM 功能來控制伺服馬達 SG90</h3><ol>
<li><p>支援硬體 PWM 功能的 <code>pigpio</code> 模組</p>
</li>
<li><p>使用硬體式的 PWM 功能，所以控制接腳 (橘色) 必須連結至支援硬體 PWM 功能的腳位，使用實體編號 12 的腳位 (其 BCM 編號為 18)。</p>
</li>
<li><p>啟用 pigpio 服務<br>sudo service pigpiod start</p>
</li>
<li><p>安裝 pigpio 套件<br>pip install pigpio</p>
</li>
<li><p>確認 pigpio 套件已正確安裝<br>pip list</p>
</li>
<li><p>線路圖<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521094725.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521094725s.png"></a></p>
</li>
<li><p>說明如下:</p>
<ul>
<li><p>在這個範例中我們將使用硬體式的 PWM 功能，所以控制接腳 (橘色) 必須連結至支援硬體 PWM 功能的腳位，這個範例中我們使用實體編號 12 的腳位 (其 BCM 編號為 18)。</p>
</li>
<li><p>SG90 的工作電壓為 +4.8V 以上，所以我們必須連結至 Raspberry Pi +5V 的腳位，在此我們將 SG90 電源輸入接腳 (紅色) 連結至實體編號 2 的腳位。</p>
</li>
<li><p>接地接腳 (棕色) 必須接地，所以連結至 Raspberry Pi 的實體編號 6 的腳位。</p>
</li>
<li><p>腳位對應關係整理如下：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>SG90 伺服馬達接腳</th>
<th>Raspberry Pi GPIO 腳位</th>
</tr>
</thead>
<tbody><tr>
<td>橘色 (控制訊號)</td>
<td>實體編號 12 (BCM 編號 18)</td>
</tr>
<tr>
<td>紅色 (電源輸入)</td>
<td>實體編號 6 (接地)</td>
</tr>
<tr>
<td>棕色 (接地)</td>
<td>實體編號 2 (+5V)</td>
</tr>
</tbody></table>
</li>
<li><p>如之前所提，伺服馬達的啟動或運作電流可能會過大而造成運作不正常、甚至損毀 Raspberry Pi，因此如果你手邊的伺服馬達並沒有註明型號，也沒有相關規格，請避免直接連結至 Raspberry Pi。</p>
</li>
<li><p>利用文字編輯器 (如 nano) 新增 Python 程式<br><code>hardware_pwm_sg90.py</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">   <span class="token keyword">import</span> pigpio
   <span class="token keyword">import</span> time
   
   PWM_CONTROL_PIN <span class="token operator">=</span> <span class="token number">18</span>
   PWM_FREQ <span class="token operator">=</span> <span class="token number">50</span>
   STEP <span class="token operator">=</span> <span class="token number">15</span>
   
   pi <span class="token operator">=</span> pigpio<span class="token punctuation">.</span>pi<span class="token punctuation">(</span><span class="token punctuation">)</span>
   
   <span class="token keyword">def</span> <span class="token function">angle_to_duty_cycle</span><span class="token punctuation">(</span>angle<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
       duty_cycle <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> PWM_FREQ <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1900</span> <span class="token operator">*</span> PWM_FREQ <span class="token operator">*</span> angle <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span> duty_cycle
   
   <span class="token keyword">try</span><span class="token punctuation">:</span>
       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'按下 Ctrl-C 可停止程式'</span><span class="token punctuation">)</span>
       <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> STEP<span class="token punctuation">)</span><span class="token punctuation">:</span>
           dc <span class="token operator">=</span> angle_to_duty_cycle<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>
           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'角度={: &gt;3}, 工作週期={: &gt;6}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>angle<span class="token punctuation">,</span> dc<span class="token punctuation">)</span><span class="token punctuation">)</span>
           pi<span class="token punctuation">.</span>hardware_PWM<span class="token punctuation">(</span>PWM_CONTROL_PIN<span class="token punctuation">,</span> PWM_FREQ<span class="token punctuation">,</span> dc<span class="token punctuation">)</span>
           time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
       <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>STEP<span class="token punctuation">)</span><span class="token punctuation">:</span>
           dc <span class="token operator">=</span> angle_to_duty_cycle<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>
           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'角度={: &gt;3}, 工作週期={: &gt;6}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>angle<span class="token punctuation">,</span> dc<span class="token punctuation">)</span><span class="token punctuation">)</span>
           pi<span class="token punctuation">.</span>hardware_PWM<span class="token punctuation">(</span>PWM_CONTROL_PIN<span class="token punctuation">,</span> PWM_FREQ<span class="token punctuation">,</span> dc<span class="token punctuation">)</span>
           time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
       pi<span class="token punctuation">.</span>hardware_PWM<span class="token punctuation">(</span>PWM_CONTROL_PIN<span class="token punctuation">,</span> PWM_FREQ<span class="token punctuation">,</span> angle_to_duty_cycle<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
           <span class="token builtin">next</span>
   <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'關閉程式'</span><span class="token punctuation">)</span>
   <span class="token keyword">finally</span><span class="token punctuation">:</span>
       pi<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span>PWM_CONTROL_PIN<span class="token punctuation">,</span> pigpio<span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>   
   ```  

<span class="token number">10</span><span class="token punctuation">.</span> 程式說明如下<span class="token punctuation">:</span>

<span class="token operator">-</span> 第 <span class="token number">1</span> 行引入 pigpio 套件，在這個範例中我們將透過這個套件使用 Raspberry Pi 的硬體 PWM 功能。
<span class="token operator">-</span> 第 <span class="token number">4</span> 行定義控制接腳所連結之 Raspberry Pi 腳位，我們連結的是實體編號 <span class="token number">12</span> 的腳位，其 BCM 編號為 <span class="token number">18</span>。
<span class="token operator">-</span> 第 <span class="token number">5</span> 行定義 PWM 所使用的頻率。
<span class="token operator">-</span> 第 <span class="token number">6</span> 行定義每次旋轉的角度。
<span class="token operator">-</span> 第 <span class="token number">8</span> 行宣告 pigpio 控制物件。
<span class="token operator">-</span> 第 <span class="token number">10</span><span class="token operator">~</span><span class="token number">12</span> 行定義角度與工作週期的對應關係，也就是這篇文章中的公式三。不過因為 RPi<span class="token punctuation">.</span>GPIO 所使用的工作週期參數範圍為 <span class="token number">0</span> <span class="token operator">~</span> <span class="token number">100</span>，而 pigpio 的 hardware_PWM 函式所使用的工作週期參數範圍為 <span class="token number">0</span> <span class="token operator">~</span> <span class="token number">1000000</span>，所以須將原公式乘以 <span class="token number">10000</span>。
第 <span class="token number">16</span><span class="token operator">~</span><span class="token number">25</span> 行透過兩個 <span class="token keyword">for</span> 迴圈將 SG90 由 <span class="token number">0</span> 度逐次旋轉至 <span class="token number">180</span> 度，之後再逐次轉回 <span class="token number">0</span> 度。
<span class="token operator">-</span> 第 <span class="token number">26</span> 行將 SG90 軸心旋轉至 <span class="token number">90</span> 度。
<span class="token operator">-</span> 第 <span class="token number">27</span><span class="token operator">~</span><span class="token number">28</span> 行執行無任何功能的迴圈，其目的是讓 SG90 的軸心停在 <span class="token number">90</span> 度的位置。
<span class="token operator">-</span> 第 <span class="token number">32</span> 行確定程式結束後程式中所使用的腳位會回到預設狀態。

<span class="token number">11</span><span class="token punctuation">.</span> 程式完成後，輸入下列指令執行程式

    ```Shell
    python hardware_pwm_sg90<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="10-開機自動執行-shell-程式"><a href="#10-開機自動執行-shell-程式" class="headerlink" title="10. 開機自動執行 shell 程式"></a>10. 開機自動執行 <code>shell</code> 程式</h2><ol>
<li><p>目的：樹莓派開機時自動執行某些腳本，不用手動設置，減少麻煩。</p>
</li>
<li><p>思路：新建一個自動啟動 <code>pigpio</code> 服務的腳本 pigpio.sh，然後添加執行命令到 /etc/rc.local文件中</p>
</li>
<li><p>實現步驟<br>3.1. 新建一個 bash shell 腳本</p>
<pre><code> `touch /home/pi/source/pigpio.sh` </code></pre>
<p>3.2. 往 <code>pigpio.sh</code> 腳本添加如下內容</p>
   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/home/pi/source"</span>

<span class="token function">sudo</span> <span class="token function">service</span> pigpiod start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>3.3. 給予腳本 <code>pigpiod.sh</code> 許可權並執行，查看是否能正常執行</p>
   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /home/pi/source
$ <span class="token function">chmod</span> +x pigpiod.sh
$ <span class="token function">bash</span> ./pigpiod.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>3.4. 在 <code>/etc/rc.local</code> 檔中添加執行指令碼命令</p>
   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">:</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$_IP</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
 <span class="token builtin class-name">printf</span> <span class="token string">"My IP address is %s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"<span class="token variable">$_IP</span>"</span>
<span class="token keyword">fi</span>

<span class="token function">bash</span>  ./home/pi/source/pigpiod.sh <span class="token comment">#添加這條命令，路徑是絕對路徑</span>
<span class="token builtin class-name">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="11-開機自動執行-python-程式"><a href="#11-開機自動執行-python-程式" class="headerlink" title="11. 開機自動執行 python 程式"></a>11. 開機自動執行 <code>python</code> 程式</h2><h3 id="步驟摘要如下"><a href="#步驟摘要如下" class="headerlink" title="步驟摘要如下 :"></a>步驟摘要如下 :</h3><ol>
<li><code>Python</code> 程式第一行要放 #!/usr/bin/python3 指定執行之解譯器版本</li>
<li>用 chmod 指令將此 Python 程式改為可執行 (+x), 例如 :<br><code>chmod +x /home/pi/test.py</code> </li>
<li>建立 bash shell 程式 <code>mypython</code>, <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/bash</span>
<span class="token comment">### BEGIN INIT INFO</span>
<span class="token comment"># Provides:          mypython</span>
<span class="token comment"># Required-Start:    $syslog $network</span>
<span class="token comment"># Required-Stop:     $syslog $network</span>
<span class="token comment"># Default-Start:     2 3 4 5</span>
<span class="token comment"># Default-Stop:      0 1 6</span>
<span class="token comment"># Short-Description: starts the mypython</span>
<span class="token comment"># Description:       starts mypython using start-stop-daemon</span>
<span class="token comment">### END INIT INFO</span>

<span class="token comment"># /etc/init.d/mypython</span>
<span class="token comment"># 1.新增檔案權限：可以執行</span>
<span class="token comment">#   sudo chmod +x /etc/init.d/mypython</span>
<span class="token comment"># 2.設定開機啟動</span>
<span class="token comment">#   sudo update-rc.d mypython defaults 95</span>
<span class="token comment">#   (如果要移除開機啟動：sudo update-rc.d mypython remove)</span>
<span class="token comment">#   ( mypython 有修改的話，要執行 systemctl daemon-reload )</span>
<span class="token comment"># 3.使用指令碼啟動、停止服務</span>
<span class="token comment">#   sudo service mypython start</span>
<span class="token comment">#   sudo service mypython stop</span>

case <span class="token string">"$1"</span> <span class="token keyword">in</span>
    start<span class="token punctuation">)</span>
        echo <span class="token operator">-</span>n <span class="token string">"Starting python: "</span>
        echo <span class="token string">"---------------------------------------------------------------------------------"</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        date <span class="token operator">+</span><span class="token string">"! %Y/%m/%d %a %T : Starting python ."</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        echo start
        <span class="token comment">#cd /home/pi/inv/</span>
        <span class="token comment">#./mqtt-ledv4-test.py &gt;&gt; /var/log/inv.log &amp;</span>
        cd <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>source<span class="token operator">/</span>
        <span class="token punctuation">.</span><span class="token operator">/</span>test<span class="token punctuation">.</span>py <span class="token operator">&amp;</span>
        echo <span class="token string">"Done."</span>
        echo <span class="token string">""</span>
        date <span class="token operator">+</span><span class="token string">"! %Y/%m/%d %a %T : Finished."</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        echo <span class="token string">"---------------------------------------------------------------------------------"</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        touch <span class="token operator">/</span>var<span class="token operator">/</span>lock<span class="token operator">/</span>subsys<span class="token operator">/</span>python
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    stop<span class="token punctuation">)</span>
        echo <span class="token operator">-</span>n <span class="token string">"Shutting Down python Listeners: "</span>
        echo <span class="token string">"---------------------------------------------------------------------------------"</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        date <span class="token operator">+</span><span class="token string">"! %Y/%m/%d %a %T : Shutting Down python."</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        echo <span class="token string">"python"</span>
        <span class="token comment">#killall -9 mqtt-ledv4-test.py</span>
        killall <span class="token operator">-</span><span class="token number">9</span> test<span class="token punctuation">.</span>py
        echo <span class="token string">"Done."</span>
        rm <span class="token operator">-</span>f <span class="token operator">/</span>var<span class="token operator">/</span>lock<span class="token operator">/</span>subsys<span class="token operator">/</span>python
        echo <span class="token string">"Done."</span>
        date <span class="token operator">+</span><span class="token string">"! %Y/%m/%d %a %T : Finished."</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        echo <span class="token string">"---------------------------------------------------------------------------------"</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">)</span>
        echo <span class="token string">"Usage: mypython { start | stop | restart }"</span>
        exit <span class="token number">1</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
esac
exit <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>修改其中第 38 行與第 51 行的 Python 程式檔名為自己要執行之 Python 程式檔名, 例如 test.py, 然後將此 <code>mypython</code> 程式放在 /etc/init.d/ 目錄下, 用 chmod 指令將其權限改為可執行 :<br><code>sudo chmod +x /etc/init.d/mypython</code> </li>
<li>設定 <code>mypython</code> 開機自動執行 :<br><code>sudo update-rc.d mypython defaults 95</code></li>
<li>啟動服務 :<br><code>sudo service mypython start</code></li>
<li>重開機檢查 Python 程式是否有在執行<br><code>ps -ax|grep mypython</code></li>
</ol>
<h3 id="取消自動執行程序"><a href="#取消自動執行程序" class="headerlink" title="取消自動執行程序 :"></a>取消自動執行程序 :</h3><ol>
<li>移除開機啟動設定：<br><code>sudo update-rc.d mypython remove</code></li>
<li>停止服務 :<br><code>sudo service mypython stop</code></li>
<li>刪除 mypython :<br><code>sudo rm /etc/init.d/mypython</code></li>
</ol>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>iot</tag>
        <tag>wiot</tag>
      </tags>
  </entry>
  <entry>
    <title>wiot</title>
    <url>/wiot/20210329-wiot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-硬體建置"><a href="#1-硬體建置" class="headerlink" title="1. 硬體建置"></a>1. 硬體建置</h2><h3 id="1-1-配線圖"><a href="#1-1-配線圖" class="headerlink" title="1.1 配線圖"></a>1.1 配線圖</h3><ul>
<li><p>樹莓派腳位圖</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602102127.png" class="nofancybox img-center">
</li>
<li><p>樹莓派與其他裝置連接腳位圖</p>
<table>
<thead>
<tr>
<th align="left">PI3 B+ 腳位</th>
<th align="left">PI3 B+ 功能描述</th>
<th align="left">其他裝置腳位</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PI3 B+ 18</td>
<td align="left">GPIO 24</td>
<td align="left">Buzzer I/O</td>
</tr>
<tr>
<td align="left">PI3 B+ 2</td>
<td align="left">5V Power</td>
<td align="left">Buzzer VCC、SG 900 VCC(紅)</td>
</tr>
<tr>
<td align="left">PI3 B+ 6</td>
<td align="left">GND</td>
<td align="left">Buzzer GND、SG 900 GND(褐)</td>
</tr>
<tr>
<td align="left">PI3 B+ 11</td>
<td align="left">GPIO 17</td>
<td align="left">DHT 11 Out</td>
</tr>
<tr>
<td align="left">PI3 B+ 4</td>
<td align="left">5V Power</td>
<td align="left">DHT +</td>
</tr>
<tr>
<td align="left">PI3 B+ 20</td>
<td align="left">GND</td>
<td align="left">DHT -</td>
</tr>
<tr>
<td align="left">PI3 B+ 12</td>
<td align="left">GPIO 18 PCM_CLK</td>
<td align="left">SG 900 訊號(橘)</td>
</tr>
<tr>
<td align="left">PI3 B+ 37</td>
<td align="left">GPIO 26</td>
<td align="left">RELAY IN1</td>
</tr>
<tr>
<td align="left">PI3 B+ 13</td>
<td align="left">GPIO 27</td>
<td align="left">RELAY IN2</td>
</tr>
<tr>
<td align="left">PI3 B+ 15</td>
<td align="left">GPIO 22</td>
<td align="left">RELAY IN3</td>
</tr>
<tr>
<td align="left">PI3 B+ 16</td>
<td align="left">GPIO 23</td>
<td align="left">RELAY IN4</td>
</tr>
<tr>
<td align="left">PI3 B+ 24</td>
<td align="left">GPIO  8 SPIO_CE0_N</td>
<td align="left">RFID RC522 SDA</td>
</tr>
<tr>
<td align="left">PI3 B+ 23</td>
<td align="left">GPIO 11 SPIO_SCLK</td>
<td align="left">RFID RC522 SCK</td>
</tr>
<tr>
<td align="left">PI3 B+ 19</td>
<td align="left">GPIO 10 SPIO_MOSI</td>
<td align="left">RFID RC522 MOSI</td>
</tr>
<tr>
<td align="left">PI3 B+ 21</td>
<td align="left">GPIO  9 SPIO_MISO</td>
<td align="left">RFID RC522 MISO</td>
</tr>
<tr>
<td align="left">PI3 B+ 25</td>
<td align="left">GND</td>
<td align="left">RFID RC522 GND</td>
</tr>
<tr>
<td align="left">PI3 B+ 22</td>
<td align="left">GPIO 25</td>
<td align="left">RFID RC522 RST</td>
</tr>
<tr>
<td align="left">PI3 B+ 17</td>
<td align="left">3V3 Power</td>
<td align="left">RFID RC522 3.3V</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="1-2-SDCard-燒錄"><a href="#1-2-SDCard-燒錄" class="headerlink" title="1.2 SDCard 燒錄"></a>1.2 SDCard 燒錄</h3><ol>
<li><p>先安裝 <code>SDFormatterv4</code></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-sd_format.png" class="nofancybox img-center">

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-sd_format-2.png" class="nofancybox  img-center">
</li>
<li><p>SD Card 寫入</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-sd_write.png" class="nofancybox  img-center">

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_sd_write-ok.png" class="nofancybox  img-center">

<blockquote>
<p>這裡使用的版本是: <code>http://blog-images.allen5183.synology.me/wiot/2018-11-13-raspbian-stretch.img</code></p>
</blockquote>
</li>
</ol>
<h3 id="1-3-網路設定參考"><a href="#1-3-網路設定參考" class="headerlink" title="1.3 網路設定參考"></a>1.3 網路設定參考</h3><ul>
<li><p>網卡IP</p>
<p>有兩處可以修正網卡設定，擇一來設定，第一種方法會優先。</p>
<ol>
<li><code>sudo nano /etc/dhcpcd.cong</code></li>
<li><code>sudo nano /etc/network/interfaces</code></li>
</ol>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">#表示使用 localhost
auto lo 
# 有網路卡 eth0，則用靜態方式設定 IP:
iface eth0 inet static
static ip_address=192.168.57.40
static routers=192.168.57.254
static domain_name_servers=8.8.8.8 168.95.1.1

# DHCP
#iface eth0 inet dhcp
# 有網路卡 eth0，則使用 dhcp 獲取 IP:
#static domain_name_servers=8.8.#8.8 168.95.1.1

# Wifi
#auto wlan0 #有 WLAN 使用 wlan0 裝置名稱
#wlan裝置可以熱拔插
#allow-hotplug wlan0
#有WLAN 網路時，使用 wpa-psk 認證方式
#iface wlan0 inet dhcp
#wpa-ssid "yvts"
#wpa-psk  "yvtsyvts"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>重新啟動</strong><br><code>sudo /etc/init.d/networking restart</code></p>
</li>
</ul>
<h2 id="2-環境設置"><a href="#2-環境設置" class="headerlink" title="2. 環境設置"></a>2. 環境設置</h2><h3 id="2-1-SSH-免密碼登入"><a href="#2-1-SSH-免密碼登入" class="headerlink" title="2.1 SSH 免密碼登入"></a>2.1 SSH 免密碼登入</h3><ol>
<li><p>使用系統管理者權限，修改檔案 <code>c:\windows\system32\drivers\etc\hosts</code></p>
<p>增加一筆資料如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">192.168</span>.xxx.xxx    smarthome.edu.tw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>測試:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> smarthome.edu.tw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>本機端(Window)，安裝 <a href="https://git-scm.com/downloads">Git</a></p>
</li>
<li><p>設定識別資料, 使用 <code>Git bash</code> 開啟終端機視窗後，執行如下命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name  <span class="token string">"John Doe"</span>
<span class="token function">git</span> config --global user.email  johndoe@example.com

<span class="token comment">#指定編輯器</span>
<span class="token function">git</span> config --global core.editor <span class="token string">"'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"</span>
<span class="token comment">#or</span>
<span class="token function">git</span> config --global core.editor <span class="token string">"'C:/tools/nano.exe' -multiInst -nosession"</span>
<span class="token function">git</span> config --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>配置 <code>sshd</code> 服務，允許認證金鑰檔案:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#登入 PI</span>
<span class="token function">ssh</span> pi@smarthome.edu.tw
<span class="token comment">#修改 SSH Daemon 服務組態檔</span>
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/ssh/sshd_config
<span class="token comment"># 將最前面的註解符號 `#` 取消掉，如下</span>
  AuthorizedKeysFile      .ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在定時備份或批次遠端處理，往往需要免密碼登入遠端主機工作。為達此目的，首先必須在 client 端產生一組 key，包含公開金鑰（Public Key）與私密金鑰（Private Key），將公鑰送到要登入的主機，相互對應做免密碼的登入。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#檢查有無私鑰與公鑰(本機端 PC)</span>
<span class="token function">ls</span> -al ~/.ssh/id_rsa.pub
<span class="token function">ls</span> -al ~/.ssh/id_rsa
<span class="token comment">#若沒有金鑰的話，key 的產生方法：</span>
ssh-keygen -t rsa -C xxx@gmail.com

Generating public/private rsa key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/root/.ssh/id_rsa<span class="token punctuation">)</span>:
Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:
Enter same passphrase again:
Your identification has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.
Your public key has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.pub.
The key fingerprint is:
c3:e9:25:65:00:c8:65:cb:e8:fe:4e:7e:ce:06:a4:9d root@kvm8.deyu.wang
The key's randomart image is:
+--<span class="token punctuation">[</span> RSA <span class="token number">2048</span><span class="token punctuation">]</span>----+
<span class="token operator">|</span>   <span class="token builtin class-name">.</span> o+<span class="token punctuation">..</span>        <span class="token operator">|</span>
<span class="token operator">|</span>    o+ <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>       <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token builtin class-name">.</span> o   o      <span class="token operator">|</span>
<span class="token operator">|</span>   <span class="token builtin class-name">.</span>  <span class="token punctuation">..</span> +       <span class="token operator">|</span>
<span class="token operator">|</span>    .+ .S <span class="token builtin class-name">.</span>      <span class="token operator">|</span>
<span class="token operator">|</span>   <span class="token punctuation">..</span> E. +       <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token builtin class-name">.</span> <span class="token punctuation">..</span>.        <span class="token operator">|</span>
<span class="token operator">|</span>     + .o        <span class="token operator">|</span>
<span class="token operator">|</span>     .++o        <span class="token operator">|</span>
+-----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>將公開金鑰放到要登入的主機上，利用以下指令完成:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> pi@smarthome.edu.tw <span class="token string">'mkdir -p ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys'</span> <span class="token operator">&lt;</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>登入測試</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> pi@smarthome.edu.tw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>特別注意目錄 .ssh 及檔案 authorized_keys 的權限，若群組或其他人的權限過大，除了安全性有問題外，也有可能因 ssh 判斷要對應的金鑰不安全，而無法對應，也就是不能免密碼登入。</p>
</blockquote>
</li>
<li><p>調整權限<br>設定 PI 上的authorized_keys 可讀、寫</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> pi@smarthome.edu.tw <span class="token string">"chmod 600 ~/.ssh/authorized_keys"</span>
<span class="token comment"># 設定 PI 上的authorized_keys 唯讀</span>
   <span class="token function">ssh</span> pi@smarthome.wda.edu.tw <span class="token string">"chmod 400 ~/.ssh/authorized_keys"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>再簡化登入程序: 本機 PC 端，加入 <code>config</code>, 簡化 <code>ssh</code> 登入指令</p>
<ul>
<li><p>在 <code>~/.ssh</code> 下新增 <code>config</code> 檔案，不需任何副檔名。</p>
</li>
<li><p>在新增的檔案裡加上你的第一個 SSH config</p>
<p><code>nano ~/.ssh/config</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host pi                     <span class="token comment"># 用來連線的 alias 名稱</span>
HostName smarthome.edu.tw   <span class="token comment"># host domain 或 ip</span>
Port <span class="token number">22</span>                     <span class="token comment"># host 的 SSH port</span>
User pi                     <span class="token comment"># (選填)登入 SSH 的 username，</span>
                            <span class="token comment">#  只連 git 的話，可以不必要</span>
ForwardX11 <span class="token function">yes</span>              <span class="token comment"># (選填) 啟用回傳 GUI</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試<br><code>ssh pi</code> </p>
</li>
</ul>
</li>
<li><p>常用 SSH 指令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#基本連線</span>
<span class="token function">ssh</span> username@hostname<span class="token punctuation">[</span>ip<span class="token punctuation">]</span>   
<span class="token comment">#SSH 連線再附加其他指令</span>
<span class="token function">ssh</span> pi <span class="token function">mkdir</span> <span class="token builtin class-name">test</span>
<span class="token comment">#scp 指定 SSH name</span>
<span class="token function">scp</span> -r ./ pi:/var/www/html/project/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>本機電腦端設定:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">d:
<span class="token builtin class-name">cd</span> d:<span class="token punctuation">\</span>xampp<span class="token punctuation">\</span>htdocs

<span class="token comment">#打開現行工作目錄</span>
code <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然後在 <code>vscode</code> 視窗下建立一新目錄 <code>smarthome</code>，就可以點擊滑鼠左鍵，來執行下載樹莓派檔案。</p>
</li>
<li><p>安裝 vscode 的套件 <code>sftp</code><br>F1 或 Ctrl+Shift+P, 選擇 SFTP:Config</p>
<p>加入以下設定:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>
   <span class="token punctuation">{</span>
       <span class="token builtin class-name">:</span>
   <span class="token punctuation">}</span> ,

   <span class="token punctuation">{</span>
    <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"My Server"</span>,
    <span class="token string">"host"</span><span class="token builtin class-name">:</span> <span class="token string">"smarthome.edu.tw"</span>,
    <span class="token string">"protocol"</span><span class="token builtin class-name">:</span> <span class="token string">"sftp"</span>,
    <span class="token string">"port"</span><span class="token builtin class-name">:</span> <span class="token number">22</span>,
    <span class="token string">"username"</span><span class="token builtin class-name">:</span> <span class="token string">"pi"</span>,
    <span class="token string">"privateKeyPath"</span><span class="token builtin class-name">:</span> <span class="token string">"C:/Users/allen/.ssh/id_rsa"</span>,
    <span class="token string">"remotePath"</span><span class="token builtin class-name">:</span> <span class="token string">"/home/pi/www"</span>,
    <span class="token string">"uploadOnSave"</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://drive.google.com/drive/folders/1YhOhREq4PmGqmGdS4rLc_dzmm0w92UTs?usp=sharing/VsCode_Setting.txt">VSCode 設定檔</a></p>
</li>
</ol>
<h3 id="2-2-安裝-Apache-MySQL-PHP"><a href="#2-2-安裝-Apache-MySQL-PHP" class="headerlink" title="2.2 安裝 Apache + MySQL+ PHP"></a>2.2 安裝 <code>Apache + MySQL+ PHP</code></h3><ol>
<li><p>更新軟體套件清單<br><code>sudo apt get update y</code></p>
</li>
<li><p>更新軟體套件本身<br><code>sudo apt get upgrade y</code></p>
</li>
<li><p>重啟<br><code>reboot</code></p>
</li>
</ol>
<h4 id="2-2-1-安裝-Apache-PHP"><a href="#2-2-1-安裝-Apache-PHP" class="headerlink" title="2.2.1 安裝 Apache PHP"></a>2.2.1 安裝 Apache PHP</h4><ol>
<li><p>安裝軟體</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> get <span class="token function">install</span> apache2 y
<span class="token function">sudo</span> <span class="token function">apt</span> get <span class="token function">install</span> php y
<span class="token function">sudo</span> <span class="token function">apt</span> get <span class="token function">install</span> php mysql y
<span class="token function">sudo</span> <span class="token function">apt</span> get <span class="token function">install</span> php mbstring y
<span class="token function">sudo</span> systemctl restart apache2
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/apache2 apache2.conf <span class="token comment">## 設定文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160012.png" width="40%" height="50%">
<br>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160111.png" width="40%" height="50%">

<p><code>sudo nano /etc/ports.conf</code></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601160507.png" width="60%" height="50%">

<p><strong>重啟伺服器</strong><br><code>sudo systemctl restart apache2</code></p>
</li>
<li><p>驗證 <code>apache</code> 正常運作：</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601161921.png" width="60%" height="50%">

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/www/html/
<span class="token function">sudo</span> <span class="token function">mv</span> index.html index1.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601162829.png" width="60%" height="50%">
</li>
<li><p>修改根目錄：   </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /home/pi/www/web
<span class="token function">sudo</span> <span class="token function">chown</span> -R pi:www-data /home/pi/www/web
<span class="token function">chmod</span> -R <span class="token number">770</span> /home/pi/www/web
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/apache2/apache2.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601165908.png" width="50%" height="50%">

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601165936.png" width="50%" height="50%">

<p><code>sudo nano /etc/apache2/sites-enabled/000-default.conf</code></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601163545.png" width="50%" height="50%">

<blockquote>
<p>cd  /etc/apache2/sites-available<br>  ln -s /etc/apache2/sites-enabled/000-default.conf<br>  sudo systemctl restart apache2</p>
</blockquote>
</li>
<li><p>加入虛擬新網域</p>
<ul>
<li><p>新網域名稱: <code>smarthome.edu.tw</code></p>
</li>
<li><p>建立資料夾: <code>mkdir ~/www/smarthome</code></p>
</li>
<li><p>修改現有檔案: <code>nano /etc/apache2/sites-enabled/000-default.conf</code></p>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">&lt;VirtualHost *:80&gt;
  ServerName smarthome.edu.tw
  #ServerAdmin webmaster@localhost
  DocumentRoot /home/pi/www/smarthome

  &lt;Directory /home/pi/www/smarthome&gt;
    Options indexes FollowSymLinks
    AllowOverride None
    Require all granted
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>重啟 <code>Apache</code> 伺服器<br><code>sudo systemctl restart apache2</code></p>
</li>
<li><p>開啟 <code>PHP</code> 錯誤日誌<br><code>sudo nano /etc/php/7.0/apache2/php.ini</code></p>
 <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601163646.png" width="50%" height="50%">

</li>
</ol>
<h4 id="2-2-2-安裝-MySQL"><a href="#2-2-2-安裝-MySQL" class="headerlink" title="2.2.2 安裝 MySQL"></a>2.2.2 安裝 MySQL</h4><ul>
<li><p>安裝<br><code>apt cache search mysql server</code><br><code>sudo apt get install mysql server</code></p>
</li>
<li><p>Setting MySQL/MariaDB root password  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql u root p
mysql<span class="token operator">&gt;</span> use mysql<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">plugin</span><span class="token operator">=</span><span class="token string">''</span> where u <span class="token assign-left variable">ser</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> flush privileges<span class="token punctuation">;</span>

<span class="token punctuation">(</span>刷新權限，當你直接通過 update 權限後，需要通過刷新使你的授權有效<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">exit</span>
<span class="token function">sudo</span> mysql_secure_installation
<span class="token function">sudo</span> mysql u root p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601170430.png" width="50%" height="50%">

<p>[參考文獻](<a href="https://websiteforstudents.com/mariadb">https://websiteforstudents.com/mariadb</a><br><a href="https://websiteforstudents.com/mariadb--installedinstalled--witwithouthout--passwordpassword--promptsprompts--forfor--rootroot--onon--ubuntuubuntu--1717--1010--1818--0404--beta/beta/">https://websiteforstudents.com/mariadb--installedinstalled--witwithouthout--passwordpassword--promptsprompts--forfor--rootroot--onon--ubuntuubuntu--1717--1010--1818--0404--beta/beta/</a>)</p>
</li>
</ul>
<h4 id="2-2-3-安裝-phpmyadmin"><a href="#2-2-3-安裝-phpmyadmin" class="headerlink" title="2.2.3 安裝 phpmyadmin"></a>2.2.3 安裝 phpmyadmin</h4><ul>
<li><p>安裝 <code>sudo nano ~/www/web/info.php</code></p>
<p>內容加入：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191331.png" width="50%" height="50%">
</li>
<li><p>檢查 <code>MySql</code> 版本   </p>
<p><code>sudo mysql --version</code></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191548.png" width="50%" height="50%">
</li>
<li><p>檢查 <code>PHP</code> 版本<br><code>sudo php --version</code></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601191856.png" width="50%" height="50%">
</li>
<li><p>找尋下載檔案 <a href="https://www.phpmyadmin.net/downloads/">phpmyadmin</a></p>
 <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601192053.png" width="50%" height="50%">

<blockquote>
<p>補充:<br> 不可以使用 phpmyadmin 4.9+snapshot 的版本(不支援繁體中文，不穩定版本)</p>
</blockquote>
</li>
<li><p>下載與安裝</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/www/web/
<span class="token function">sudo</span> <span class="token function">wget</span> https://files.phpmyadmin.net/phpMyAdmin/4.7.3/phpMyAdmin-4.7.3-alllanguages.tar.gz
<span class="token function">sudo</span> <span class="token function">tar</span> -zxvf phpMyAdmin-4.7.3-all-languages.tar.gz
<span class="token function">sudo</span> <span class="token function">mv</span> phpMyAdmin-4.7.3-all-languages phpMyAdmin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="2-2-4-解決-缺少-tmp-與-移除其他警告訊息"><a href="#2-2-4-解決-缺少-tmp-與-移除其他警告訊息" class="headerlink" title="2.2.4 解決 缺少 tmp 與 移除其他警告訊息"></a>2.2.4 解決 缺少 tmp 與 移除其他警告訊息</h4><ul>
<li><p>現象</p>
 <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601194654.png" width="50%" height="50%">
- 解決 1: 移除設定檔案需要設定一組加密密碼 (blowfish_secret)

  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /var/www/html/phpMyAdmin/config.sample.inc.php  ~/www/web/phpMyAdmin/config.inc.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  <code>sudo nano ~/www/web/phpMyAdmin/config.inc.php</code></p>
<p>  將檔案內的 <code>$cfg['blowfish_secret'] = '';</code><br>  設定為 ：(至少要 32 個字元)</p>
<p>  <code>$cfg['blowfish_secret'] = 'xxxxxxxxxxxxxxxx';</code></p>
<blockquote>
<p>（意思是：加上一堆亂七八糟的英文數字當作秘鑰）</p>
</blockquote>
<ul>
<li>解決 2: 移除 <code>tmp</code> 警告訊息<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /var/www/html/phpMyAdmin/tmp<span class="token punctuation">(</span>若本來就存在，刪除再新增<span class="token punctuation">)</span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> /var/www/html/phpMyAdmin/tmp
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> /var/www/html/phpMyAdmin/tm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210601195724.png" width="50%" height="50%">

</li>
</ul>
</li>
</ul>
<h3 id="2-3-安裝-PHP7-Nginx-MySQL-PhpMyAdmin"><a href="#2-3-安裝-PHP7-Nginx-MySQL-PhpMyAdmin" class="headerlink" title="2.3 安裝 PHP7 + Nginx + MySQL + PhpMyAdmin"></a>2.3 安裝 <code>PHP7 + Nginx + MySQL + PhpMyAdmin</code></h3><h4 id="2-3-1-建置"><a href="#2-3-1-建置" class="headerlink" title="2.3.1 建置"></a>2.3.1 建置</h4><ol>
<li><p>至 <a href="https://gist.github.com/isc30/aa80d81df44de8a91dc0a82d55806381">GitHub 官網</a>，下載  <code>install.bash</code>。</p>
</li>
<li><p>手動安裝如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source
<span class="token function">wget</span> https://gist.github.com/isc30/aa80d81df44de8a91dc0a82d55806381/raw/install.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>#報錯誤<br>#因版本是 stretch 所以須修改 install.bash 內容，如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> install.bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>#原來 line 10<br><code>echo "APT::Default-Release "jessie";" &gt; /etc/apt/apt.conf.d/99-default-release</code></p>
<p>#修改成如下<br><code>echo "APT::Default-Release \"stretch\";" &gt; /etc/apt/apt.conf.d/99-default-release</code></p>
<p>#修改後再執行程序。</p>
<p><code>sudo bash install.bash</code></p>
</li>
<li><p>開始安裝 <code>mysql</code>，輸入登入密碼後，按下 Enter。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_install.bash_2.png" class="nofancybox  img-center">
</li>
<li><p>開始安裝 <code>phpmyadmin</code>，輸入 <code>y</code> 後，按下 <code>Enter</code>。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_install.bash_3.png" class="nofancybox  img-center">
</li>
<li><p>開始安裝 <code>phpmyadmin</code>，按下空白鍵，選取 <code>apache2</code> 後，按下 <code>確定</code>。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_install.bash_4.png" class="nofancybox  img-center">
</li>
<li><p>手動組態 <code>phpmyadmin</code>，選擇 <code>否</code> 後，按下 <code>Enter</code>。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_install.bash_5.png" class="nofancybox  img-center">
</li>
<li><p>安裝完成畫面如下:</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_install.bash_6.png" class="nofancybox  img-center">
</li>
<li><p>測試安裝正確與否</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php -v
nginx -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>設定 Nginx 環境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token builtin class-name">cd</span> /etc/nginx
<span class="token function">sudo</span> <span class="token function">mv</span> default smarthome

<span class="token comment">#編輯 smarthome</span>
<span class="token function">sudo</span> <span class="token function">nano</span> smarthome

<span class="token comment">#修正內容如下</span>
server <span class="token punctuation">{</span>
  <span class="token comment">#listen 80 default_server;</span>
  <span class="token comment">#listen [::]:80 default_server;</span>

  autoindex on<span class="token punctuation">;</span>
  server_name smarthome.edu<span class="token punctuation">;</span>
  root /home/pi/www/smarthome<span class="token punctuation">;</span>
       <span class="token builtin class-name">:</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>追加一筆主機名稱 <code>smarthome.edu.tw</code> 到 /etc/hosts</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /etc/hosts

<span class="token builtin class-name">:</span>
<span class="token number">127.0</span>.0.1  smarthome.edu.tw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h4 id="2-3-2-設定-mysql-權限"><a href="#2-3-2-設定-mysql-權限" class="headerlink" title="2.3.2 設定 mysql 權限"></a>2.3.2 設定 mysql 權限</h4><ul>
<li><p>權限賦予</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql --user<span class="token operator">=</span><span class="token string">"root"</span> --password<span class="token operator">=</span><span class="token string">"1qaz@wsx"</span> --database<span class="token operator">=</span><span class="token string">"mysql"</span> --execute<span class="token operator">=</span><span class="token string">"GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' IDENTIFIED BY '1qaz@wsx'; FLUSH PRIVILEGES;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>登入 <code>mysql</code> 測試<br><code>mysql -uroot -p1qaz@wsx</code></p>
</li>
</ul>
<h4 id="2-3-3-phpmyadmin-測試畫面"><a href="#2-3-3-phpmyadmin-測試畫面" class="headerlink" title="2.3.3 phpmyadmin 測試畫面"></a>2.3.3 <code>phpmyadmin</code> 測試畫面</h4><ul>
<li>輸出<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_install.bash_7.png" width="60%" height="40%" class="nofancybox  img-center">

</li>
</ul>
<h4 id="2-3-4-Nginx-Web、PHP-Fpm-設定"><a href="#2-3-4-Nginx-Web、PHP-Fpm-設定" class="headerlink" title="2.3.4 Nginx Web、PHP Fpm 設定"></a>2.3.4 <code>Nginx Web、PHP Fpm</code> 設定</h4><ul>
<li><p>PHP Fpm 設定</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改預設使用群組與使用者</span>
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/php/7.0/fpm/pool.d/www.conf
  <span class="token comment">#群組改成 pi，使用者改成 pi</span>
  user <span class="token operator">=</span> pi
  group <span class="token operator">=</span> pi
<span class="token comment">#重啟 PHP Fpm 服務</span>
<span class="token function">sudo</span> <span class="token function">service</span> php7.0-fpm restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>1.7.2 Nginx Web 設定</p>
<ol>
<li><p>修改 Nginx 使用者</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/nginx/nginx.conf
<span class="token comment"># user www-data;</span>
user pi<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>增加虛擬主機 <code>smarthome.edu</code>，複製 <code>default</code> 後來修改.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/nginx/default  /etc/nginx/smarthome
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/nginx/sites-enabled/smarthome

<span class="token comment">#修改部分如下</span>
server <span class="token punctuation">{</span>
   <span class="token comment">#listen 80 default_server;</span>
   <span class="token comment">#listen [::]:80 default_server;</span>

   autoindex on<span class="token punctuation">;</span>
   server_name smarthome.edu.tw<span class="token punctuation">;</span>
   root /home/pi/www/smarthome<span class="token punctuation">;</span>
   <span class="token builtin class-name">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>重啟 Nginx Web 服務</p>
<p><code>sudo service nginx restart</code></p>
</li>
</ol>
</li>
</ul>
<h4 id="2-3-5-設置-smarthome"><a href="#2-3-5-設置-smarthome" class="headerlink" title="2.3.5 設置 smarthome"></a>2.3.5 設置 smarthome</h4><ul>
<li><p>建置虛擬主機目錄</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/
<span class="token function">mkdir</span> -p www/smarthome<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>虛擬目錄下建置首頁</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/www/smarthome
<span class="token function">nano</span> index.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>輸出訊息: Hello World For SmartHome Test!</p>
</li>
<li><p>測試首頁</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_install.bash_8.png" class="nofancybox  img-center">

</li>
</ul>
<h4 id="2-3-6-連結-phpmyadmin"><a href="#2-3-6-連結-phpmyadmin" class="headerlink" title="2.3.6 連結 phpmyadmin"></a>2.3.6 連結 <code>phpmyadmin</code></h4><ul>
<li><p>產生 software link</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s  /var/www/default/public/phpmyadmin   ~/www/smarthome/phpmyadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h2 id="3-影像串流-MJPG-STREAMER-for-WebCam"><a href="#3-影像串流-MJPG-STREAMER-for-WebCam" class="headerlink" title="3. 影像串流  MJPG-STREAMER for WebCam"></a>3. 影像串流  MJPG-STREAMER for WebCam</h2><h3 id="3-1-說明"><a href="#3-1-說明" class="headerlink" title="3.1 說明"></a>3.1 說明</h3><p>  安裝 <code>mjpg-streamer</code>， <code>mjpg-streamer</code> 是用來將視訊網路串流化，透過 <code>mjpg</code> 裡面的解碼器，可以讓影像擷取速率以及畫質有良好的表現。</p>
<ul>
<li><p><a href="http://www.linux-projects.org/uv4l/installation/">參考文獻</a></p>
</li>
<li><p>PI 上安裝影像串流(mjpg-streamer)，把 <code>Raspberry Pi</code> 轉成 <code>Webcam server</code></p>
</li>
<li><p>PI 上安裝 <code>Motion</code>， 動態捕捉, 依照間格時間來抓取.</p>
</li>
</ul>
<h3 id="3-2-安裝相關套件"><a href="#3-2-安裝相關套件" class="headerlink" title="3.2 安裝相關套件"></a>3.2 安裝相關套件</h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新 apt-get</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade
<span class="token comment">#安裝依賴包</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> subversion
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libjpeg-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> imagemagick
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libv4l-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-3-安裝-mjpg-streamer"><a href="#3-3-安裝-mjpg-streamer" class="headerlink" title="3.3 安裝 mjpg-streamer"></a>3.3 安裝 <code>mjpg-streamer</code></h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/source
<span class="token builtin class-name">cd</span> ~/source
<span class="token comment"># 利用 svn 把最新版的 mjpg-streamer 抓下來</span>
svn co https://svn.code.sf.net/p/mjpg-streamer/code/
<span class="token builtin class-name">cd</span> code/mjpg-streamer
<span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>

<span class="token comment"># 拷貝到 *.so /usr/local/lib</span>
<span class="token function">sudo</span> <span class="token function">cp</span>  *.so /usr/local/lib/.
<span class="token comment"># 拷貝到 mjpg_streamer 到 /usr/local/bin</span>
<span class="token function">sudo</span> <span class="token function">cp</span> mjpg_streamer  /usr/local/bin/.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-4-停止-motion"><a href="#3-4-停止-motion" class="headerlink" title="3.4 停止 motion"></a>3.4 停止 <code>motion</code></h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#如果 motion 還在啟動中，先停掉</span>
<span class="token function">sudo</span> <span class="token function">service</span> motion stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-5-啟動-mjpg-streamer"><a href="#3-5-啟動-mjpg-streamer" class="headerlink" title="3.5 啟動 mjpg-streamer"></a>3.5 啟動 <code>mjpg-streamer</code></h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先打開 pi carmera</span>
<span class="token function">sudo</span> raspi-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-1.png" class="nofancybox  img-center">

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-2.png" class="nofancybox  img-center">

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-3.png" class="nofancybox  img-center">

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-4.png" class="nofancybox  img-center">

<p><strong>須重開機</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source/code/mjpg-streamer
<span class="token function">sudo</span> ./mjpg_streamer -i <span class="token string">"./input_uvc.so -f 10 -r 1024x768 -d /dev/video0 -y -n"</span> -o <span class="token string">"./output_http.so -w ./www -p 8080"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_mjpeg-streamer-5.png" class="nofancybox  img-center">

<blockquote>
<p><code>320x240</code> 也可以修改為 <code>640x480</code>，如果啟動失敗，請再執行下列程序:</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span>  /etc/modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>#加入以下內容 :<br>bcm2835-v412</p>
<p>#重新啟動<br><code>sudo reboot</code></p>
</li>
</ul>
<h3 id="3-6-測試"><a href="#3-6-測試" class="headerlink" title="3.6 測試"></a>3.6 測試</h3><p>  啟動後在 raspberry ip 位置。例如: <code>192.168.62.100:8080/stream.html</code> 中，檢查有沒有看到影像串流。</p>
<p>  <code>http://smarthome.edu.tw:8080/?action=streamer</code></p>
<p>  或<br>  <code>http://smarthome.edu.tw:8080/stream_simple.html</code></p>
<p>  如果要客制化頁面的，可以再在自己的頁面上加上 <code>tag</code><br>  <code>&lt;img src="http://192.168.62.100:8080/?action=stream" /&gt;</code>，就能捉的到串流影像。</p>
<h3 id="3-7-設置登入帳號和密碼"><a href="#3-7-設置登入帳號和密碼" class="headerlink" title="3.7 設置登入帳號和密碼"></a>3.7 設置登入帳號和密碼</h3><ul>
<li><p>關掉服務</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查指定程序 id</span>
pidof mjpg_streamer
<span class="token comment">#刪除指定 id</span>
<span class="token function">kill</span> -9 <span class="token punctuation">[</span>pid of mjpg_streamer<span class="token punctuation">]</span>

<span class="token function">sudo</span> ./mjpg_streamer -i <span class="token string">"./input_uvc.so -f 10 -r 320x240 -d /dev/video0 -y -n"</span> -o <span class="token string">"./output_http.so -w ./www -p 8080 -c userid:password"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-8-開機時自動執行串流伺服器"><a href="#3-8-開機時自動執行串流伺服器" class="headerlink" title="3.8 開機時自動執行串流伺服器"></a>3.8 開機時自動執行串流伺服器</h3><ul>
<li><p>操作步驟如下:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">cd <span class="token operator">~</span><span class="token operator">/</span>source
nano mjpg<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>內容如下:</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">import os
os.system('LD_LIBRARY_PATH=/usr/local/lib mjpg_streamer <span class="token punctuation">-</span>i "input_uvc.so <span class="token punctuation">-</span>y <span class="token punctuation">-</span>r 1024x768 <span class="token punctuation">-</span>n" <span class="token punctuation">-</span>o "output_http.so <span class="token punctuation">-</span>w /home/pi/source/code/mjpg<span class="token punctuation">-</span>streamer/www"')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>#改變屬性(可執行)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> mjpg.py
<span class="token function">sudo</span> <span class="token function">nano</span> /etc/crontab

<span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/sh

<span class="token comment">#0 0 * * * root  python /home/pi/source/mjpg.py</span>
@reboot root python /home/pi/source/mjpg.py <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意: import os 與 os.system() 注意前面不要空行</p>
</blockquote>
</li>
</ul>
<h2 id="4-GPIO-控制"><a href="#4-GPIO-控制" class="headerlink" title="4. GPIO 控制"></a>4. GPIO 控制</h2><h3 id="4-1-說明"><a href="#4-1-說明" class="headerlink" title="4.1 說明"></a>4.1 說明</h3><p>  網頁控制 LED(燈與風扇) Relay Control (GPIO)，現在方法使用國外人寫的一個插件模組<a href="http://wiringpi.com/download-and-install/">wiringPI</a>, 然後在網頁上使用執行 linux shell command 來控制腳位(針腳)用 php 控制．</p>
<blockquote>
<p>可改寫成不用這插件, 直接用 <code>python</code> 來控制腳位</p>
</blockquote>
<h3 id="4-2-腳位控制-GPIO"><a href="#4-2-腳位控制-GPIO" class="headerlink" title="4.2 腳位控制 GPIO"></a>4.2 腳位控制 GPIO</h3><ul>
<li><p>腳位</p>
<table>
<thead>
<tr>
<th>腳位名稱</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>GPIO26</td>
<td>RELAY IN1 For Fan</td>
</tr>
<tr>
<td>GPIO27</td>
<td>RELAY IN2 For LED</td>
</tr>
<tr>
<td>GPIO22</td>
<td>RELAY IN3 For LED</td>
</tr>
<tr>
<td>GPIO23</td>
<td>RELAY IN4 For LED</td>
</tr>
</tbody></table>
</li>
<li><p>安裝模組 <code>wiringPi</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> wiringpi<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>目前 PI 都已內建支援 GPIO，使用命令： <code>pinout</code> 可得知腳位訊息。</p>
</blockquote>
 <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-gpio-pinout.png" class="nofancybox  img-center">

</li>
</ul>
<h3 id="4-3-測試有無-WiringPi-模組"><a href="#4-3-測試有無-WiringPi-模組" class="headerlink" title="4.3 測試有無 WiringPi 模組"></a>4.3 測試有無 <code>WiringPi</code> 模組</h3><ul>
<li><p>檢查 GPIO 版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpio -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>顯示目前所有 GPIO 的輸入或輸出狀態</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gpio readall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_gpio_readall.png" class="nofancybox  img-center">

</li>
</ul>
<h3 id="4-4-測試硬體接線狀態"><a href="#4-4-測試硬體接線狀態" class="headerlink" title="4.4 測試硬體接線狀態"></a>4.4 測試硬體接線狀態</h3><ul>
<li><p>使用下列指令作測試</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpio -g mode <span class="token number">26</span> out
gpio -g <span class="token function">write</span> <span class="token number">26</span> <span class="token number">1</span>
gpio -g <span class="token function">write</span> <span class="token number">26</span> <span class="token number">0</span>

gpio -g mode <span class="token number">27</span> out
gpio -g <span class="token function">write</span> <span class="token number">27</span> <span class="token number">1</span>
gpio -g <span class="token function">write</span> <span class="token number">27</span> <span class="token number">0</span>

gpio -g mode <span class="token number">22</span> out
gpio -g <span class="token function">write</span> <span class="token number">22</span> <span class="token number">1</span>
gpio -g <span class="token function">write</span> <span class="token number">22</span> <span class="token number">0</span>

gpio -g mode <span class="token number">23</span> out
gpio -g <span class="token function">write</span> <span class="token number">23</span> <span class="token number">1</span>
gpio -g <span class="token function">write</span> <span class="token number">23</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><a href="https://www.raspberrypi.org/documentation/configuration/config-txt/gpio.md">GPIO ontrol in config.txt</a></p>
</blockquote>
</li>
</ul>
<h2 id="5-DHT-溫溼度偵測"><a href="#5-DHT-溫溼度偵測" class="headerlink" title="5. DHT 溫溼度偵測"></a>5. DHT 溫溼度偵測</h2><h3 id="5-1-硬體配置"><a href="#5-1-硬體配置" class="headerlink" title="5.1 硬體配置"></a>5.1 硬體配置</h3><p>  首先將 <code>DHTXX</code> 連接到 <code>Raspberry Pi</code> 的 <code>GPIO (general purpose input/output)</code> 上，<code>DHT</code> 上僅有 <code>VCC</code> (使用 3.3V)、<code>OUT</code>、<code>GND</code> 三個接腳，其中 <code>OUT</code> 是資料的輸出，須接在 <code>GPIO</code>(14,15,18,23,24,25,6,7,2,3,4,17,27,22,10,9,11) 中的任一接腳上。</p>
<p>  這裡使用的是 GPIO17。</p>
<ul>
<li><p>範例:<br>參考網頁: <code>https://opendev2016.wordpress.com/2017/04/22/using-raspberry-pi-and-dth11-to-bulid-a-environment-monitor/</code></p>
</li>
<li><p>建立資料庫與資料表</p>
<ol>
<li><p>建立資料庫 <code>raspberry</code> 的資料表 <code>temp</code>。<br>連線進入 <a href="http://smarthome.edu.tw/phpmyadmin">phpmyadmin</a></p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-pi-table-create.png" class="nofancybox">
</li>
<li><p>使用 sql 視窗，建立 table。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--</span>
<span class="token comment">-- 資料表結構 `raspberryPI.temp`</span>
<span class="token comment">--</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>raspberryPI<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">temp</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>rowid<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span><span class="token keyword">datetime</span><span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span>temperature<span class="token punctuation">`</span> <span class="token keyword">FLOAT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span>humidity<span class="token punctuation">`</span> <span class="token keyword">FLOAT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>rowid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_unicode_ci<span class="token punctuation">;</span>
<span class="token comment">--</span>
<span class="token comment">-- 資料表的匯出資料 `temp`</span>
<span class="token comment">--</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">temp</span><span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token keyword">datetime</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>temperature<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>humidity<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-01 09:20:02'</span><span class="token punctuation">,</span> <span class="token number">23.2</span><span class="token punctuation">,</span> <span class="token number">60.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-02 09:20:02'</span><span class="token punctuation">,</span> <span class="token number">20.1</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-03 09:21:03'</span><span class="token punctuation">,</span> <span class="token number">28.3</span><span class="token punctuation">,</span> <span class="token number">88.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-04 09:21:03'</span><span class="token punctuation">,</span> <span class="token number">25.4</span><span class="token punctuation">,</span> <span class="token number">70.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-05 09:25:03'</span><span class="token punctuation">,</span> <span class="token number">26.5</span><span class="token punctuation">,</span> <span class="token number">63.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-06 09:25:03'</span><span class="token punctuation">,</span> <span class="token number">32.1</span><span class="token punctuation">,</span> <span class="token number">74.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-07 09:26:02'</span><span class="token punctuation">,</span> <span class="token number">30.2</span><span class="token punctuation">,</span> <span class="token number">89.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-08 09:26:02'</span><span class="token punctuation">,</span> <span class="token number">22.2</span><span class="token punctuation">,</span> <span class="token number">64.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-09 09:27:03'</span><span class="token punctuation">,</span> <span class="token number">38.3</span><span class="token punctuation">,</span> <span class="token number">62.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-10 09:27:03'</span><span class="token punctuation">,</span> <span class="token number">32.4</span><span class="token punctuation">,</span> <span class="token number">56.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-11 09:28:02'</span><span class="token punctuation">,</span> <span class="token number">24.5</span><span class="token punctuation">,</span> <span class="token number">69.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-12 09:28:02'</span><span class="token punctuation">,</span> <span class="token number">35.6</span><span class="token punctuation">,</span> <span class="token number">51.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-pi-table-create2.png" class="nofancybox  img-center">

</li>
</ol>
</li>
</ul>
<h3 id="5-2-安裝-Adafruit-範例程式"><a href="#5-2-安裝-Adafruit-範例程式" class="headerlink" title="5.2 安裝 Adafruit 範例程式"></a>5.2 安裝 <code>Adafruit</code> 範例程式</h3><h4 id="5-2-1-法一"><a href="#5-2-1-法一" class="headerlink" title="5.2.1. 法一"></a>5.2.1. 法一</h4><ol>
<li><p>先安裝所需套件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新 apt-get</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token comment">#下載套件 Adafruit_Python_DHT 套件</span>
<span class="token builtin class-name">cd</span> ~/source
<span class="token function">git</span> clone https://github.com/adafruit/Adafruit_Python_DHT.git
<span class="token comment">#安裝</span>
<span class="token builtin class-name">cd</span> Adafruit_Python_DHT
<span class="token function">sudo</span> python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>測試:<br>接著就能讀取 <code>DHTXX</code> 了，執行寫好的範例 <code>Python</code> 程式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source/Adafruit_Python_DHT/examples
<span class="token function">cp</span> AdafruitDHT.py ~/source/.
<span class="token builtin class-name">cd</span> ~/source
python /home/pi/source/AdafruitDHT.py <span class="token number">2302</span> <span class="token number">17</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>參數 <code>11</code>   代表 <code>DHT11，17</code>   代表我把它接到 <code>Raspberry Pi</code> 的 <code>GPIO 17</code>。<br>參數 <code>22</code>   代表 <code>DHT22，17</code>   代表我把它接到 <code>Raspberry Pi</code> 的 <code>GPIO 17</code>。<br>參數 <code>2302</code> 代表 <code>DHT2302，17</code> 代表我把它接到 <code>Raspberry Pi</code> 的 <code>GPIO 17</code>。</p>
</li>
<li><p>輸出訊息<br>Temp=27.0*C  Humidity=81.0%</p>
</li>
</ol>
<h4 id="5-2-2-法二"><a href="#5-2-2-法二" class="headerlink" title="5.2.2. 法二"></a>5.2.2. 法二</h4><ol>
<li><p>先安裝所需套件<br><code>$ sudo pip install Adafruit_DHT</code></p>
</li>
<li><p>若要從 python 3 版本執行，請先安裝套件如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-dev python3-pip
<span class="token function">sudo</span> python3 -m pip <span class="token function">install</span> --upgrade pip setuptools wheel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>編輯 python 程式</p>
<p><code>~/source/dht22.py</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> Adafruit_DHT 

DHT_SENSOR <span class="token operator">=</span> Adafruit_DHT<span class="token punctuation">.</span>DHT22 
DHT_PIN <span class="token operator">=</span> <span class="token number">17</span>  

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    humidity<span class="token punctuation">,</span> temperature <span class="token operator">=</span> Adafruit_DHT<span class="token punctuation">.</span>read_retry<span class="token punctuation">(</span>DHT_SENSOR<span class="token punctuation">,</span> DHT_PIN<span class="token punctuation">)</span>
    <span class="token keyword">if</span> humidity <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> temperature <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Temp={0:0.2f}*C  Humidity={1:0.2f}%"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> humidity<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Failed to retrieve data from HDT22 sensor"</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
</ol>
<h3 id="5-3-修改現有程式碼-AdafruitDHT-py"><a href="#5-3-修改現有程式碼-AdafruitDHT-py" class="headerlink" title="5.3 修改現有程式碼 AdafruitDHT.py"></a>5.3 修改現有程式碼 <code>AdafruitDHT.py</code></h3><ul>
<li><p>程式碼</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> /home/pi/source/AdafruitDHT.py

<span class="token comment">#在現有程式碼最前面，引入以下內容</span>
<span class="token function">import</span> urllib
<span class="token function">import</span> urllib2
<span class="token function">import</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-7.png" class="nofancybox  img-center">

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在現有程式碼最後面，加入以下程式碼內容</span>
<span class="token assign-left variable">mydata</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'temperature'</span>,temperature<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token string">'humidity'</span>,humidity<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token assign-left variable">mydata</span><span class="token operator">=</span>urllib.urlencode<span class="token punctuation">(</span>mydata<span class="token punctuation">)</span>
path <span class="token operator">=</span> <span class="token string">'http://127.0.0.1/dht_write_temp.php'</span>
<span class="token assign-left variable">req</span><span class="token operator">=</span>urllib2.Request<span class="token punctuation">(</span>path, mydata<span class="token punctuation">)</span>
req.add_header<span class="token punctuation">(</span><span class="token string">"Content-type"</span>, <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span>
<span class="token assign-left variable">page</span><span class="token operator">=</span>urllib2.urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-1.png" class="nofancybox  img-center">
</li>
<li><p>產生程式碼 <code>dht_write_temp.php</code> 於網頁目錄 smarthome 下:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"connDB.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">date_defult_timezone_set</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Asia/Taipei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$now</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'YmdHis'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'temperature'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$humidity</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'humidity'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Temperature= "</span> <span class="token punctuation">.</span> <span class="token variable">$temp</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"humidity= "</span> <span class="token punctuation">.</span> <span class="token variable">$humidity</span> <span class="token punctuation">.</span>  <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>

    <span class="token variable">$sql</span> <span class="token operator">=</span>  <span class="token double-quoted-string string">"INSERT INTO temp  VALUES (null, <span class="token interpolation"><span class="token variable">$now</span></span>,<span class="token interpolation"><span class="token variable">$temp</span></span>,<span class="token interpolation"><span class="token variable">$humidity</span></span>)"</span><span class="token punctuation">;</span>
    <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"close connection"</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">", Date time="</span> <span class="token punctuation">.</span> <span class="token variable">$now</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">", Temperature="</span> <span class="token punctuation">.</span> <span class="token variable">$temp</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"  Humidity="</span> <span class="token punctuation">.</span> <span class="token variable">$humidity</span><span class="token punctuation">;</span>
  <span class="token delimiter important">?&gt;</span></span>
  ``` 
- 修改後，再用主程式 `AdafruitDHT.py` 測試，執行後，請檢查資料庫上是否有多一筆資料。
  
  `python /home/pi/source/AdafruitDHT.py 2302 17`

  問題: 會找不到 `url`
  解決: 刪除 `/etc/nginx/sites-enabled/default`

  ```bash
  sudo rm /etc/nginx/sites-enabled/default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="5-4-排程"><a href="#5-4-排程" class="headerlink" title="5.4 排程"></a>5.4 排程</h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source

<span class="token comment">#編輯 /home.pi/source/gettemp.sh</span>
<span class="token comment">#如果是  DHT11   加入 sudo python /home/pi/source/AdafruitDHT.py 11 17</span>
<span class="token comment">#如果是  DHT22   加入 sudo python /home/pi/source/AdafruitDHT.py 22 17</span>
<span class="token comment">#如果是  DHT2302 加入 sudo python /home/pi/source/AdafruitDHT.py 2302 17</span>
<span class="token comment">#如果是  LCD     加入 sudo python /home/pi/source/Adafruit_Python_DHT/examples/AdafruitDHT.py 22 17</span>

<span class="token comment">#編輯自動執行程序 gettemp.sh</span>
<span class="token function">nano</span> gettemp.sh

<span class="token comment">#加入以下內容</span>
<span class="token function">sudo</span> python /home/pi/source/AdafruitDHT.py <span class="token number">2302</span> <span class="token number">17</span>
<span class="token comment">#修改執行權限  </span>
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> gettemp.sh
<span class="token comment">#加入排程</span>
<span class="token function">sudo</span> <span class="token function">crontab</span> -e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-2.png" class="nofancybox  img-center">

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#最後面加入以下內容</span>
*/1 * * * * /home/pi/source/gettemp.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-3.png" class="nofancybox  img-center">

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#重新啟動</span>
<span class="token function">sudo</span> <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="5-5-DHT-sensor-讀取值後寫入資料庫-raspberryPI-的資料表-temp"><a href="#5-5-DHT-sensor-讀取值後寫入資料庫-raspberryPI-的資料表-temp" class="headerlink" title="5.5 DHT sensor 讀取值後寫入資料庫: raspberryPI 的資料表 temp"></a>5.5 <code>DHT</code> sensor 讀取值後寫入資料庫: <code>raspberryPI</code> 的資料表 <code>temp</code></h3><ol>
<li><p>主程式: <code>/home/pi/www/smarthome/dht_write_temp.php</code></p>
</li>
<li><p>先使用網址傳參數方式，測試數據可否正常寫入資料庫，如下步驟:<br>使用 <code>get</code> 方式，讀取網址傳入數，如下:</p>
<p><code>dht_write_temp.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"connDB.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//date_defult_timezone_set("Asia/Taipei");</span>

  <span class="token variable">$now</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'YmdHis'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'temperature'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$humidity</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'humidity'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Temperature= "</span> <span class="token punctuation">.</span> <span class="token variable">$temp</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"humidity= "</span> <span class="token punctuation">.</span> <span class="token variable">$humidity</span> <span class="token punctuation">.</span>  <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>

  <span class="token variable">$sql</span> <span class="token operator">=</span>  <span class="token double-quoted-string string">"INSERT INTO temp (`datetime`,`temperature`,`humidity`) VALUES (<span class="token interpolation"><span class="token variable">$now</span></span>,<span class="token interpolation"><span class="token variable">$temp</span></span>,<span class="token interpolation"><span class="token variable">$humidity</span></span>)"</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"close connection"</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">", Date time="</span> <span class="token punctuation">.</span> <span class="token variable">$now</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">", Temperature="</span> <span class="token punctuation">.</span> <span class="token variable">$temp</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"  Humidity="</span> <span class="token punctuation">.</span> <span class="token variable">$humidity</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試步驟</p>
<ul>
<li><p>輸入網址與參數: <code>http://smarthome.edu.tw/dht_write_temp.php?temperature='22'&amp;humidity='60'</code>  </p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-4.png" class="nofancybox  img-center">
</li>
<li><p>打開 <a href="http://smarthome.edu.tw/phpmyadmin">phpmyadmin</a>，查詢 <code>temperature='22'&amp;humidity='60'</code> 數據有無寫入到 <code>raspberryPI.temp</code>。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-5.png" class="nofancybox  img-center">
</li>
</ul>
</li>
<li><p>確認沒問題後，將程式 <code>dht_write_temp.php</code> 的 <code>GET</code> 改成 <code>POST</code> 方法。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  <span class="token builtin class-name">:</span>
<span class="token variable">$temp</span>     <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'temperature'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$humidity</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'humidity'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token builtin class-name">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>觀察 <a href="http://smarthome.edu.tw/phpmyadmin">phpmyadmin</a> 上的資料表 <code>temp</code> 數據，一分鐘有無自動更新一次。</p>
</li>
</ol>
<h3 id="5-6-讀取資料庫的-temp-資料表應用集"><a href="#5-6-讀取資料庫的-temp-資料表應用集" class="headerlink" title="5.6 讀取資料庫的 temp 資料表應用集"></a>5.6 讀取資料庫的 temp 資料表應用集</h3><ol>
<li><p>主程式:   <code>/home/pi/www/smarthome/dht_read_temp.php</code></p>
</li>
<li><p>範例:</p>
<ul>
<li><p>溫溼度資料管理統:     <code>http://smarthome.edu.tw/dht_read_temp.php</code></p>
</li>
<li><p>溫溼度管理系統(傳統分頁): <code>http://smarthome.edu.tw/dht_read_temp_paging.php</code></p>
</li>
<li><p>溫溼度管理系統(使用 Bootstrap 分頁): <code>http://smarthome.edu.tw/dht_read_temp_paging_bootstrap.php</code></p>
</li>
<li><p>溫溼度表管理系統: 使用 <a href="https://plugins.jquery.com/bootpag/">jQuery.bootpag 分頁控件</a></p>
<ul>
<li><code>dht_read_temp_paging_bootpag.php</code></li>
<li><code>tempQuery.php</code></li>
</ul>
</li>
<li><p>溫溼度表:</p>
<ul>
<li><code>http://smarthome.edu.tw/dht_read_temp_ajax.php</code> (前端)</li>
<li><code>http://smarthome.edu.tw/dht_read_temp_ajax_api.php</code> (後端)</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot-dht-8.png" class="nofancybox  img-center">
</li>
<li><p>溫度顯示圖表 (2D): <code>showTemperatureChart.php</code></p>
</li>
<li><p>溫度顯示圖表 (3D): <code>showChart.php</code></p>
</li>
</ul>
</li>
</ol>
<h3 id="5-7-溫、濕度資料寫入-LCD-1502"><a href="#5-7-溫、濕度資料寫入-LCD-1502" class="headerlink" title="5.7 溫、濕度資料寫入 LCD 1502"></a>5.7 溫、濕度資料寫入 LCD 1502</h3><ol>
<li><p>LCD 功能啟用</p>
</li>
<li><p>下載 LCD 驅動程式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> $ <span class="token function">git</span> clone https://github.com/paulbarber/raspi-gpio
 $ <span class="token builtin class-name">cd</span> raspi-gpio
 $ <span class="token function">nano</span>  lcd_display.py
    
<span class="token comment">#修改 ADDRESS 為 0x3f</span>
  <span class="token function">import</span> i2c_lib
  from <span class="token function">time</span> <span class="token function">import</span> <span class="token function">sleep</span>

 <span class="token comment"># LCD Address</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>AdafruitDHT.py</code> 程式碼修改</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span>
<span class="token comment"># Copyright (c) 2014 Adafruit Industries</span>
<span class="token comment"># Author: Tony DiCola</span>

<span class="token comment"># Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<span class="token comment"># of this software and associated documentation files (the "Software"), to deal</span>
<span class="token comment"># in the Software without restriction, including without limitation the rights</span>
<span class="token comment"># to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<span class="token comment"># copies of the Software, and to permit persons to whom the Software is</span>
<span class="token comment"># furnished to do so, subject to the following conditions:</span>

<span class="token comment"># The above copyright notice and this permission notice shall be included in all</span>
<span class="token comment"># copies or substantial portions of the Software.</span>
<span class="token comment"># THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<span class="token comment"># IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<span class="token comment"># FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<span class="token comment"># AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<span class="token comment"># LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<span class="token comment"># OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span>
<span class="token comment"># SOFTWARE.</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> time   
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"/home/pi/source/raspi-gpio"</span><span class="token punctuation">)</span>   
<span class="token keyword">from</span> lcd_display <span class="token keyword">import</span> lcd   
<span class="token keyword">import</span> Adafruit_DHT   
<span class="token keyword">import</span> urllib
<span class="token keyword">import</span> urllib2
<span class="token keyword">import</span> requests   
<span class="token comment"># Parse command line parameters.</span>
sensor_args <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'11'</span><span class="token punctuation">:</span> Adafruit_DHT<span class="token punctuation">.</span>DHT11<span class="token punctuation">,</span>
                <span class="token string">'22'</span><span class="token punctuation">:</span> Adafruit_DHT<span class="token punctuation">.</span>DHT22<span class="token punctuation">,</span>
                <span class="token string">'2302'</span><span class="token punctuation">:</span> Adafruit_DHT<span class="token punctuation">.</span>AM2302 <span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> sensor_args<span class="token punctuation">:</span>
    sensor <span class="token operator">=</span> sensor_args<span class="token punctuation">[</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    pin <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Usage: sudo ./Adafruit_DHT.py [11|22|2302] &lt;GPIO pin number&gt;'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Example: sudo ./Adafruit_DHT.py 2302 4 - Read from an AM2302 connected to GPIO pin #4'</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment"># Try to grab a sensor reading.  Use the read_retry method which will retry up</span>
<span class="token comment"># to 15 times to get a sensor reading (waiting 2 seconds between each retry).</span>
humidity<span class="token punctuation">,</span> temperature <span class="token operator">=</span> Adafruit_DHT<span class="token punctuation">.</span>read_retry<span class="token punctuation">(</span>sensor<span class="token punctuation">,</span> pin<span class="token punctuation">)</span>

<span class="token comment"># Un-comment the line below to convert the temperature to Fahrenheit.</span>
<span class="token comment"># temperature = temperature * 9/5.0 + 32</span>

<span class="token comment"># Note that sometimes you won't get a reading and</span>
<span class="token comment"># the results will be null (because Linux can't</span>
<span class="token comment"># guarantee the timing of calls to read the sensor).</span>
<span class="token comment"># If this happens try again!</span>

<span class="token keyword">if</span> humidity <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> temperature <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    my_lcd <span class="token operator">=</span> lcd<span class="token punctuation">(</span><span class="token punctuation">)</span>
    my_lcd<span class="token punctuation">.</span>display_string<span class="token punctuation">(</span><span class="token string">'T:{:.1f}C'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' H:{:.1f}%'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>humidity<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    my_lcd<span class="token punctuation">.</span>display_string<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y/%m/%d"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Temp={0:0.1f}*  Humidity={1:0.1f}%'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> humidity<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Failed to get reading. Try again!'</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

mydata<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'temperature'</span><span class="token punctuation">,</span>temperature<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'humidity'</span><span class="token punctuation">,</span>humidity<span class="token punctuation">)</span><span class="token punctuation">]</span>
mydata<span class="token operator">=</span>urllib<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>mydata<span class="token punctuation">)</span>
path <span class="token operator">=</span> <span class="token string">'http://127.0.0.1/dht_write_temp.php'</span>
req<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>path<span class="token punctuation">,</span> mydata<span class="token punctuation">)</span>
req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span>
page<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-RFID-Tag"><a href="#6-RFID-Tag" class="headerlink" title="6. RFID Tag"></a>6. RFID Tag</h2></li>
</ol>
<h3 id="6-1-參考文章"><a href="#6-1-參考文章" class="headerlink" title="6.1 參考文章"></a>6.1 參考文章</h3><ul>
<li><code>http://atceiling.blogspot.com/2017/02/raspberry-pi-rfid.html</code></li>
<li><code>https://pimylifeup.com/raspberry-pi-rfid-rc522/</code></li>
</ul>
<h3 id="6-2-更新軟體"><a href="#6-2-更新軟體" class="headerlink" title="6.2 更新軟體"></a>6.2 更新軟體</h3><ol>
<li><p>更新 OS</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token comment"># sudo apt -t stretch update</span>

<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade  
<span class="token comment"># sudo apt -t stretch upgrade</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>更新 RPI OS</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> rpi-update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ol>
<h3 id="6-3-使用-raspi-config-確認已經啟用-SPI-協定功能"><a href="#6-3-使用-raspi-config-確認已經啟用-SPI-協定功能" class="headerlink" title="6.3 使用 raspi-config 確認已經啟用 SPI 協定功能"></a>6.3 使用 <code>raspi-config</code> 確認已經啟用 <code>SPI</code> 協定功能</h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#P4 SPI ENABLED</span>
<span class="token function">sudo</span> raspi-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_1.png" class="nofancybox img-center">
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_2.png" class="nofancybox img-center">
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_3.png" class="nofancybox img-center">
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_4.png" class="nofancybox img-center">
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_5.png" class="nofancybox img-center">

</li>
</ul>
<h3 id="6-4-在-boot-config-txt-最後加入以下內容"><a href="#6-4-在-boot-config-txt-最後加入以下內容" class="headerlink" title="6.4 在 /boot/config.txt 最後加入以下內容"></a>6.4 在 <code>/boot/config.txt</code> 最後加入以下內容</h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /boot/config.txt
<span class="token comment"># 最後加上以下內容</span>
<span class="token comment"># RFID  </span>
<span class="token assign-left variable">dtparam</span><span class="token operator">=</span>spi<span class="token operator">=</span>on
<span class="token assign-left variable">dtoverlay</span><span class="token operator">=</span>spi-bcm2708
<span class="token assign-left variable">dtoverlay</span><span class="token operator">=</span>spi0-hw-cs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="6-5-重開-raspberry-pi"><a href="#6-5-重開-raspberry-pi" class="headerlink" title="6.5 重開 raspberry pi"></a>6.5 重開 <code>raspberry pi</code></h3><ul>
<li><p>步驟</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">reboot</span> now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h3 id="6-6-檢查-spi-模組是否已經成功安裝"><a href="#6-6-檢查-spi-模組是否已經成功安裝" class="headerlink" title="6.6 檢查 spi 模組是否已經成功安裝"></a>6.6 檢查 <code>spi</code> 模組是否已經成功安裝</h3><ul>
<li><p><code>lsmod | grep spi</code></p>
<blockquote>
<p>若出現一下這一行，表示 spi 安裝成功<br>  spi_bcm2835       20480  0</p>
</blockquote>
</li>
<li><p>確認 <code>24pin</code> 腳設定正確</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpio readall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h3 id="6-7-線路圖"><a href="#6-7-線路圖" class="headerlink" title="6.7 線路圖"></a>6.7 線路圖</h3><ol>
<li><p>實體圖</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid.png" class="nofancybox img-center">
</li>
<li><p>PIN 腳對應如下</p>
<table>
<thead>
<tr>
<th>RC522 Pin</th>
<th>Pi pin</th>
<th>PI GPIO signal and function</th>
</tr>
</thead>
<tbody><tr>
<td>SDA(NSS)</td>
<td>24</td>
<td>CS0 – This is the SPI chip select, active low</td>
</tr>
<tr>
<td>SCK</td>
<td>23</td>
<td>SCLK – this is the SPI clock</td>
</tr>
<tr>
<td>MOSI</td>
<td>19</td>
<td>MOSI – data to the RC522</td>
</tr>
<tr>
<td>MISO</td>
<td>21</td>
<td>MISO – data from the RC522</td>
</tr>
<tr>
<td>IRQ</td>
<td></td>
<td>None</td>
</tr>
<tr>
<td>GND</td>
<td>6</td>
<td>GND</td>
</tr>
<tr>
<td>RST</td>
<td>22</td>
<td>GPIO25</td>
</tr>
<tr>
<td>3.3V</td>
<td>1</td>
<td>2.3V</td>
</tr>
</tbody></table>
<blockquote>
<p>SPI匯流排定義四組 logic signals：<br>  • SCLK—Serial Clock（自master輸出）<br>  • MOSI—Master Output, Slave Input（自master輸出）<br>  • MISO—Master Input, Slave Output（自slave輸出）</p>
</blockquote>
</li>
</ol>
<h3 id="6-8-透過已下指令安裝相關需要的工具跟範例程式"><a href="#6-8-透過已下指令安裝相關需要的工具跟範例程式" class="headerlink" title="6.8 透過已下指令安裝相關需要的工具跟範例程式"></a>6.8 透過已下指令安裝相關需要的工具跟範例程式</h3><ol>
<li><p>下載套件與安裝</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">   <span class="token builtin class-name">cd</span> ~/source
   <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y python-dev
   <span class="token comment"># 取得SPI-py程式碼，SPI-py是 python 讀取硬體 SPI 的擴充函式庫：</span>
   <span class="token function">git</span> clone https://github.com/lthiery/SPI-Py.git
   <span class="token comment"># 安裝 SPI 模組</span>
   <span class="token builtin class-name">cd</span> SPI-Py
   <span class="token function">sudo</span> python setup.py <span class="token function">install</span>
   <span class="token builtin class-name">cd</span> ~/source

<span class="token number">2</span>. 安裝 <span class="token variable"><span class="token variable">`</span>MFRC522-python<span class="token variable">`</span></span>

   ```bash
   <span class="token function">git</span> clone https://github.com/mxgxw/MFRC522-python.git
   <span class="token builtin class-name">cd</span> MFRC522-python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python Read.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>出現問題，如下畫面:</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_6.png" class="nofancybox img-center">

<p>問題解決:</p>
<ul>
<li><p><code>python -v</code><br>問題發生於: 執行於 <code>version 2.7.13</code> 上會有問題。</p>
</li>
<li><p>解決: 複製其中的 mfrc522/MFRC522.py 取代下的 /source/MFRC522-python/MFRC522.py</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source
<span class="token function">git</span> clone https://github.com/pimylifeup/MFRC522-python.git  MFRC522
<span class="token function">cp</span> MFRC522/mfrc522/MFRC522.py ~/source/MFRC522-python/MFRC522.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>再執行測試</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source/MFRC522-python
python Read.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/wiot_rfid_test.png" class="nofancybox img-center">
</li>
<li><p>建立資料表 <code>rfid</code></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> <span class="token punctuation">`</span>raspberryPI<span class="token punctuation">`</span><span class="token punctuation">;</span>
<span class="token comment">-- 資料表結構 `rfid`</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>rfid<span class="token punctuation">`</span> <span class="token punctuation">(</span>
  <span class="token punctuation">`</span><span class="token keyword">datetime</span><span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>rfid_data<span class="token punctuation">`</span> <span class="token keyword">mediumtext</span> <span class="token keyword">COLLATE</span> utf8_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_unicode_ci<span class="token punctuation">;</span>
<span class="token comment">-- 資料表的匯出資料 `rfid`</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>rfid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token keyword">datetime</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>rfid_data<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-11 14:23:47'</span><span class="token punctuation">,</span> <span class="token string">'5464521376'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-11 14:29:11'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-11 14:29:11'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-11 14:29:12'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-13 19:18:44'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-13 19:19:13'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-05-13 19:19:21'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:41:52'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:41:55'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:41:57'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:41:59'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:01'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:04'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:06'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:08'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:10'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:14'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:14'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:42:19'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:45:26'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:45:28'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:45:44'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:46:06'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 11:46:12'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:28'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:33'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:35'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:38'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:43'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:45'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:46'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:48'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:49'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:50'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:50'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:50'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:51'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:51'</span><span class="token punctuation">,</span> <span class="token string">'22424124137'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:02:53'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:03:23'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:03:54'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:03:54'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:03:54'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-06-02 14:10:40'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:49:23'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:49:23'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:49:33'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:49:33'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:53:14'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:53:14'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:15'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:15'</span><span class="token punctuation">,</span> <span class="token string">'48165248121'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:19'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:19'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:30'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:30'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:30'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:30'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:30'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:31'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:31'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:31'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:31'</span><span class="token punctuation">,</span> <span class="token string">'240142129122'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:36'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:36'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:36'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">'2017-07-08 14:59:36'</span><span class="token punctuation">,</span> <span class="token string">'5470155187'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修正主程式: <code>Read.py</code></p>
<p>連結 <a href="http://ftp.allen5183.synology.me/Read.py">Read.py</a> 後, 取代原來檔案 <code>Read.py</code>。</p>
</li>
<li><p>產生程式碼 <code>rfid_write_db.php</code> 於 <code>smarthome</code> 目錄下:</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"connDB.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">date_default_timezone_get</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Asia/Taipei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token variable">$date</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Ymdhis'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$rfid_data</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'rfid_data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"INSERT INTO rfid (datetime,rfid_data) VALUES (<span class="token interpolation"><span class="token variable">$date</span></span>, <span class="token interpolation"><span class="token variable">$rfid_data</span></span>)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"powenk.com get it"</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"date time"</span> <span class="token punctuation">.</span> <span class="token variable">$date</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">",rdid date="</span> <span class="token punctuation">.</span> <span class="token variable">$rfid_data</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>執行主程式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python Read.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>刷 <code>RFID</code> 後，檢查是否 <code>tag</code> 資料有寫入資料表 <code>rfid</code>。</p>
</li>
<li><p>應用原理</p>
<p>嗶卡後將 <code>rfid</code> 編碼資料丟入資料庫, 在到資料庫抓取資料記錄的時間, 寫到 rfid 資料表，</p>
<p><code>Read.py</code></p>
<p><code>content,response_code=fetch_thing('http://127.0.0.1/rfid_write_db.php',{'rfid_data':x},'GET')</code></p>
</li>
<li><p>Q&amp;A</p>
<ul>
<li><p>Q: No module named RPI.GPIO<br>A: <code>pip install RPi.GPIO</code></p>
</li>
<li><p>Q: PHP 時間不正確<br>A:</p>
<ul>
<li><p>修正時區</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span>  /etc/php/7.0/fpm/php.ini

date.timezone <span class="token operator">=</span> <span class="token string">"Asia/Taipei"</span>

<span class="token comment">#重啟 `php-fpm` 服務</span>
<span class="token function">sudo</span> <span class="token function">service</span> php7.0-fpm restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>時區修正，安裝  <code>NTP Server</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ntpdate
<span class="token comment">#修改時區</span>
tzselect       <span class="token comment"># 選 4)Asia 再選 43)Taiwan，確認 1)Yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試時間</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">date</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>開機時自動執行 <code>RDID</code> 偵測:</p>
<p>#編輯自動執行程序</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/source
<span class="token function">nano</span> rfid.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>import os<br>os.system(‘python /home/pi/source/MFRC522-python/Read.py’)</p>
<blockquote>
<p>PS: <code>import os</code> 與 <code>os.system()</code> 注意前面不要空行</p>
</blockquote>
<p>#檔案修改成可執行<br><code>chmod 755 rfid.py</code></p>
<p>#加入排程<br><code>sudo nano /etc/crontab</code></p>
<p>最後面<br>#加入以下指令<br>@reboot root python /home/pi/source/rfid.py &amp;</p>
</li>
<li><p>應用</p>
</li>
</ol>
<ul>
<li><p>寫入資料庫<br>讀取 <code>RFID</code> 的 Tag ID 後，再透過 <code>http://smarthome.edu.tw/rfid_write_db.php</code> 寫入 DB。</p>
</li>
<li><p>讀取資料<br><code>RFID</code> 的 Tag ID 從資料庫取得，透過 <code>http://smarthome.edu.tw/rfid_read_db.php</code></p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">require_once</span> <span class="token double-quoted-string string">"connDB.php"</span><span class="token punctuation">;</span>
  <span class="token function">date_default_timezone_get</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Asia/Taipei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"SELECT * FROM rfid ORDER BY datetime DESC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;form align='center' name='form1' method='post' action=''&gt;"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;h1 align=\"center\"&gt;RFID Tag 資料管理系統&lt;/h1&gt;"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;table align=center border='1' style='border-collapse: collapse' cellpadding='4'&gt;

  &lt;tr&gt;
    &lt;th&gt;日期時間&lt;/th&gt;
    &lt;th&gt;Tag Code&lt;/th&gt;
  &lt;/tr&gt;"</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;tr&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'datetime'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;td&gt;"</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'rfid_data'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/tr&gt;"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/table&gt;"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/form&gt;"</span><span class="token punctuation">;</span>
  <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>手動測試:<br><code>http://smarthome.edu.tw/rfid_write_db.php?rfid_data="test"</code></p>
</li>
<li><p>顯示於 LCD 1602</p>
<ol>
<li><p>Raspberry I2C 功能<br>$sudo raspi-config<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210520141632.png" alt="20210520141632"></p>
<br>
![20210520141709](https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210520141709.png)
</li>
<li><p>重新開機<br><code>sudo shutdown -r now</code></p>
</li>
<li><p>安裝 <code>RPLCD</code> 套件<br><code>pip install RPLCD</code></p>
</li>
<li><p>安裝 <code>smbus2</code> 套件<br><code>pip install smbus2</code></p>
</li>
<li><p>確認 <code>RPLCD</code>, <code>smbus2</code> 套件皆已正確安裝<br><code>pip list</code></p>
</li>
<li><p>尋找 I2C 裝置的位址<br><code>i2cdetect -y 1</code></p>
</li>
<li><p>編輯程式碼 <code>i2c_lcd.py</code><br><code>~/source $ nano i2c_lcd.py</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">     <span class="token keyword">import</span> sys
     <span class="token keyword">import</span> time
     <span class="token keyword">import</span> smbus2
     <span class="token comment"># 將 smbus 模組用 smbus2 取代</span>
     sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">'smbus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> smbus2
     <span class="token comment">#引入 smbus2 套件</span>
     <span class="token keyword">from</span> RPLCD<span class="token punctuation">.</span>i2c <span class="token keyword">import</span> CharLCD
     <span class="token comment">#建立一個可透過 I2C 介面來控制 LCD 的 Python 物件。其中 PCF8574 為 I2C 晶片型號，而 address 為我們透過指令 i2cdetect 所找出的裝置位址，而 backlight_enabled=False 則是關閉其背光功能。如果你使用的 I2C 裝置位址與此不同，請記得要加以修改。</span>
     lcd <span class="token operator">=</span> CharLCD<span class="token punctuation">(</span><span class="token string">'PCF8574'</span><span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token number">0x27</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> backlight_enabled<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

     <span class="token keyword">try</span><span class="token punctuation">:</span>
         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'按下 Ctrl-C 可停止程式'</span><span class="token punctuation">)</span>
         <span class="token comment">#將螢幕內容清空</span>
         lcd<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
             <span class="token comment">#將下一次輸出的開始位置設定為  (0, 0)，也就是第一行的第一個字元</span>
             lcd<span class="token punctuation">.</span>cursor_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
             lcd<span class="token punctuation">.</span>write_string<span class="token punctuation">(</span><span class="token string">"Date: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y/%m/%d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             lcd<span class="token punctuation">.</span>cursor_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
             lcd<span class="token punctuation">.</span>write_string<span class="token punctuation">(</span><span class="token string">"Time: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
     <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'關閉程式'</span><span class="token punctuation">)</span>
     <span class="token keyword">finally</span><span class="token punctuation">:</span>
         lcd<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
     ```  
     

<span class="token comment">## 9. 樹梅派控制伺服馬達 SG90 Servo </span>

<span class="token comment">### 硬體介紹</span>

<span class="token number">1</span><span class="token punctuation">.</span> 三隻接腳依序分別為<span class="token punctuation">:</span>
   <span class="token operator">-</span> 控制 <span class="token punctuation">(</span>橘色<span class="token punctuation">)</span>   RPI <span class="token number">11</span> BCM <span class="token number">17</span>
   <span class="token operator">-</span> 電源 <span class="token punctuation">(</span>紅色<span class="token punctuation">)</span>   RPI <span class="token number">2</span>  <span class="token operator">+</span>5V
   <span class="token operator">-</span> 接地 <span class="token punctuation">(</span>棕色 <span class="token punctuation">)</span>  RPI <span class="token number">6</span>  GND
   !<span class="token punctuation">[</span><span class="token number">20210521092755</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span>allen<span class="token operator">-</span><span class="token number">5183</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>allen5183<span class="token punctuation">.</span>synology<span class="token punctuation">.</span>me<span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">20210521092755.</span>png<span class="token punctuation">)</span>

<span class="token number">2</span><span class="token punctuation">.</span> 在 `Raspberry Pi` 使用伺服馬達有一些需要特別注意的地方。
 <span class="token operator">-</span> 首先當然是控制能力。因為 Raspberry Pi 的 PWM 的功能並不算上強大，如果使用的是軟體模擬 PWM，效果更是差強人意。而由於 PWM 是用來控制伺服馬達旋轉角度的機制，所以使得 Raspberry Pi 在控制伺服馬達的角度方面並不是那麼地精準跟穩定。
 <span class="token operator">-</span> 再來則是電壓的問題。一般伺服馬達無法使用 <span class="token operator">+</span><span class="token number">3.</span>3V 加以驅動，所以除非透過外部電源，否則就只能使用 <span class="token operator">+</span>5V 接腳當作供電來源。而 Raspberry Pi 的 <span class="token operator">+</span>5V 電壓直接來自於 USB <span class="token punctuation">(</span>或外接電源<span class="token punctuation">)</span>，並沒有經過整流，所以電源的穩定度較差。
 <span class="token operator">-</span> 最後則是電流的問題。因為 Raspberry Pi 的 <span class="token operator">+</span>5V 電源來自於 USB <span class="token punctuation">(</span>或外接電源<span class="token punctuation">)</span>，其實際上能夠輸出的最大電流受到很多因素的影響，所以可能因為輸出電流不夠而造成伺服馬達運作不正常。此外，伺服馬達啟動時通常會有一瞬間的較大電流，也有可能導致板子的損毀。

   
總結來說，如果想要比較精確地控制伺服馬達，尤其是多個伺服馬達時，可以考慮選用專用的 HAT 或是改用 Arduino 等其他控制板。

<span class="token number">3</span><span class="token punctuation">.</span> `PWM` 與旋轉角度
   脈衝寬度與旋轉角度的關係是<span class="token punctuation">,</span>大多數伺服馬達以 <span class="token number">1</span> ms 的脈衝寬度當作 <span class="token operator">-</span><span class="token number">90</span> 度，而 <span class="token number">2</span> ms 則為 <span class="token operator">+</span><span class="token number">90</span> 度。
   !<span class="token punctuation">[</span><span class="token number">20210521093132</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span>allen<span class="token operator">-</span><span class="token number">5183</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>allen5183<span class="token punctuation">.</span>synology<span class="token punctuation">.</span>me<span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">20210521093132.</span>png<span class="token punctuation">)</span>

   因為我們所使用的 Python 套件必須指定 PWM 的工作週期而非脈衝寬度，所以我們必須先進行轉換。當頻率為 <span class="token number">50</span> Hz 時，則每一個週期為 <span class="token number">1</span><span class="token operator">/</span><span class="token number">50</span> <span class="token operator">=</span> <span class="token number">0.02</span> 秒，也就是 <span class="token number">20</span> 毫秒 <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>。<span class="token number">1</span> ms 的脈衝寬度其工作週期為 <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">20</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">%</span>

   !<span class="token punctuation">[</span><span class="token number">20210521093224</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span>allen<span class="token operator">-</span><span class="token number">5183</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>allen5183<span class="token punctuation">.</span>synology<span class="token punctuation">.</span>me<span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">20210521093224.</span>png<span class="token punctuation">)</span>

   同樣的，<span class="token number">2</span> ms 脈衝寬度的工作週期則為 <span class="token number">10</span><span class="token operator">%</span>。所以我們只要把 PWM 的頻率設定為 <span class="token number">50</span> Hz，然後控制工作週期在 <span class="token number">5</span><span class="token operator">~</span><span class="token number">10</span><span class="token operator">%</span> 之間，就可以從 <span class="token operator">-</span><span class="token number">90</span> 度旋轉到 <span class="token operator">+</span><span class="token number">90</span> 度。不過因為其實轉軸外部並沒有任何記號，所以為了方便我們也可以說是從 <span class="token number">0</span> 度轉到 <span class="token number">180</span> 度 <span class="token punctuation">(</span>逆時針方向<span class="token punctuation">)</span>。換句話說，旋轉角度與工作週期的關係可用下表呈現：


   旋轉角度 <span class="token operator">|</span> 工作週期 <span class="token punctuation">(</span>當頻率為 <span class="token number">50</span> Hz 時<span class="token punctuation">)</span> 
   <span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">|</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
    <span class="token number">0</span> 度  <span class="token operator">|</span>	   <span class="token number">5</span><span class="token operator">%</span>
   <span class="token number">45</span> 度  <span class="token operator">|</span>	<span class="token number">6.25</span><span class="token operator">%</span>
   <span class="token number">90</span> 度  <span class="token operator">|</span>	<span class="token number">7.5</span><span class="token operator">%</span>
   <span class="token number">135</span> 度 <span class="token operator">|</span>	<span class="token number">8.75</span><span class="token operator">%</span>
   <span class="token number">180</span> 度	<span class="token operator">|</span> <span class="token number">10</span><span class="token operator">%</span>

   或者也可以用下列圖形加以說明：
   !<span class="token punctuation">[</span><span class="token number">20210521093347</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span>allen<span class="token operator">-</span><span class="token number">5183</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>allen5183<span class="token punctuation">.</span>synology<span class="token punctuation">.</span>me<span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">20210521093347.</span>png<span class="token punctuation">)</span>

   其實就是一個一元一次函數。根據前面分析的結果，只要把 <span class="token number">5</span><span class="token operator">%</span><span class="token operator">~</span><span class="token number">10</span><span class="token operator">%</span> 之間的差距平分給 <span class="token number">180</span> 個角度，就可以控制伺服馬達的旋轉角度了。也就是
   !<span class="token punctuation">[</span><span class="token number">20210521093438</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span>allen<span class="token operator">-</span><span class="token number">5183</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>allen5183<span class="token punctuation">.</span>synology<span class="token punctuation">.</span>me<span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">20210521093438.</span>png<span class="token punctuation">)</span>

   經過查看 Servo 函式庫的文件後，發現預設 <span class="token number">0</span> 度的脈衝寬度是 <span class="token number">544</span> microsecond，也就是 <span class="token number">0.544</span> ms，而預設 <span class="token number">180</span> 度的脈衝寬度則是 <span class="token number">2400</span> microsecond，也就是 <span class="token number">2.4</span> ms。而在某些文件中可以看到 SG90 的脈衝寬度為 <span class="token number">0.5</span> ms <span class="token operator">~</span> <span class="token number">2.4</span> ms，所以使用 <span class="token number">1</span> ms <span class="token operator">~</span> <span class="token number">2</span> ms 當然就會有很大的偏差。此外，少數資料對 <span class="token number">0.5</span> ms <span class="token operator">~</span> <span class="token number">2.4</span> ms 的解釋是 SG90 可以擁有更大的旋轉角度，但是很顯然實際上並不是這樣。否則根據這句話來看，SG90 已經可以旋轉接近 <span class="token number">360</span> 度了。

   同樣在頻率為 50Hz 的情況下，脈衝寬度為 <span class="token number">0.5</span> ms 時的工作週期為 <span class="token number">2.5</span><span class="token operator">%</span>，而 <span class="token number">2.4</span> ms 的工作週期則為 <span class="token number">12</span><span class="token operator">%</span>，所以針對 SG90 修改公式如下：
   !<span class="token punctuation">[</span><span class="token number">20210521093546</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span>allen<span class="token operator">-</span><span class="token number">5183</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>allen5183<span class="token punctuation">.</span>synology<span class="token punctuation">.</span>me<span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">20210521093546.</span>png<span class="token punctuation">)</span>

   一樣是一個一元一次函數。
   不過在實際撰寫程式時，因為我們希望頻率是可以由程式加以指定，所以需要重新改寫如下：
   !<span class="token punctuation">[</span><span class="token number">20210521093705</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span>allen<span class="token operator">-</span><span class="token number">5183</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>allen5183<span class="token punctuation">.</span>synology<span class="token punctuation">.</span>me<span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">20210521093705.</span>png<span class="token punctuation">)</span>

   !<span class="token punctuation">[</span><span class="token number">20210521093738</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span>allen<span class="token operator">-</span><span class="token number">5183</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>allen5183<span class="token punctuation">.</span>synology<span class="token punctuation">.</span>me<span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">20210521093738.</span>png<span class="token punctuation">)</span>

   此公式即為後面 Python 程式所使用之計算方式。

<span class="token number">4</span><span class="token punctuation">.</span> 線路圖
   !<span class="token punctuation">[</span><span class="token number">20210521093824</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span>allen<span class="token operator">-</span><span class="token number">5183</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>allen5183<span class="token punctuation">.</span>synology<span class="token punctuation">.</span>me<span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">20210521093824.</span>png<span class="token punctuation">)</span>

<span class="token number">5</span><span class="token punctuation">.</span> 說明如下<span class="token punctuation">:</span>

 <span class="token operator">-</span> 在這個範例中我們將使用軟體模擬的 PWM 功能，所以控制接腳 <span class="token punctuation">(</span>橘色<span class="token punctuation">)</span> 可連結至任一可用於輸出的腳位，這個範例中我們使用實體編號 <span class="token number">11</span> 的腳位 <span class="token punctuation">(</span>其 BCM 編號為 <span class="token number">17</span><span class="token punctuation">)</span>。
 <span class="token operator">-</span> SG90 的工作電壓為 <span class="token operator">+</span><span class="token number">4.</span>8V 以上，所以我們必須連結至 Raspberry Pi <span class="token operator">+</span>5V 的腳位，在此我們將 SG90 電源輸入接腳 <span class="token punctuation">(</span>紅色<span class="token punctuation">)</span> 連結至實體編號 <span class="token number">2</span> 的腳位。
 <span class="token operator">-</span> 接地接腳 <span class="token punctuation">(</span>棕色<span class="token punctuation">)</span> 必須接地，所以連結至 Raspberry Pi 的實體編號 <span class="token number">6</span> 的腳位。
 <span class="token operator">-</span> 腳位對應關係整理如下：

   SG90 伺服馬達接腳	<span class="token operator">|</span>Raspberry Pi GPIO 腳位
   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
   橘色 <span class="token punctuation">(</span>控制訊號<span class="token punctuation">)</span>	  <span class="token operator">|</span>實體編號 <span class="token number">11</span> <span class="token punctuation">(</span>BCM 編號 <span class="token number">17</span><span class="token punctuation">)</span>
   紅色 <span class="token punctuation">(</span>電源輸入<span class="token punctuation">)</span>	  <span class="token operator">|</span>實體編號 <span class="token number">2</span> <span class="token punctuation">(</span><span class="token operator">+</span>5V<span class="token punctuation">)</span>
   棕色 <span class="token punctuation">(</span>接地<span class="token punctuation">)</span>	     <span class="token operator">|</span>實體編號 <span class="token number">6</span> <span class="token punctuation">(</span>接地<span class="token punctuation">)</span>
 <span class="token operator">-</span> 如之前所提，伺服馬達的啟動或運作電流可能會過大而造成運作不正常、甚至損毀 Raspberry Pi，因此如果你手邊的伺服馬達並沒有註明型號，也沒有相關規格，請避免直接連結至 Raspberry Pi。

<span class="token number">6</span><span class="token punctuation">.</span> 程式代碼
   
   `nano pwm_sg90<span class="token punctuation">.</span>py`
   
   ```python
   <span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO
   <span class="token keyword">import</span> time
   
   CONTROL_PIN <span class="token operator">=</span> <span class="token number">17</span>
   PWM_FREQ <span class="token operator">=</span> <span class="token number">50</span>
   STEP<span class="token operator">=</span><span class="token number">15</span>
   
   GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>
   GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>CONTROL_PIN<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
   
   pwm <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span>CONTROL_PIN<span class="token punctuation">,</span> PWM_FREQ<span class="token punctuation">)</span>
   pwm<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
   
   <span class="token keyword">def</span> <span class="token function">angle_to_duty_cycle</span><span class="token punctuation">(</span>angle<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
       duty_cycle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.05</span> <span class="token operator">*</span> PWM_FREQ<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0.19</span> <span class="token operator">*</span> PWM_FREQ <span class="token operator">*</span> angle <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span> duty_cycle
   
   <span class="token keyword">try</span><span class="token punctuation">:</span>
       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'按下 Ctrl-C 可停止程式'</span><span class="token punctuation">)</span>
       <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> STEP<span class="token punctuation">)</span><span class="token punctuation">:</span>
           dc <span class="token operator">=</span> angle_to_duty_cycle<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>
           pwm<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>
           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'角度={: &gt;3}, 工作週期={:.2f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>angle<span class="token punctuation">,</span> dc<span class="token punctuation">)</span><span class="token punctuation">)</span>
           time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
       <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>STEP<span class="token punctuation">)</span><span class="token punctuation">:</span>
           dc <span class="token operator">=</span> angle_to_duty_cycle<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>
           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'角度={: &gt;3}, 工作週期={:.2f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>angle<span class="token punctuation">,</span> dc<span class="token punctuation">)</span><span class="token punctuation">)</span>
           pwm<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>dc<span class="token punctuation">)</span>
           time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
       pwm<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>angle_to_duty_cycle<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
           <span class="token builtin">next</span>
   <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'關閉程式'</span><span class="token punctuation">)</span>
   <span class="token keyword">finally</span><span class="token punctuation">:</span>
       pwm<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>
       GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
</ul>
<ol start="7">
<li><p>程式說明如下:</p>
<ul>
<li>第 1 行引入 RPi.GPIO 套件，在這個範例中我們將使用這個套件所提供的 PWM 功能。</li>
<li>第 4 行定義控制接腳所連結之 Raspberry Pi 腳位，我們連結的是實體編號 11 的腳位，其 BCM 編號為 17。</li>
<li>第 5 行定義 PWM 所使用的頻率。</li>
<li>第 6 行定義每次旋轉的角度。</li>
<li>第 8 行使用 BCM 編號方式。</li>
<li>第 9 行將控制腳位設定為輸出。</li>
<li>第 11 行宣告 pwm 控制物件。</li>
<li>第 12 行開始 pwm 功能。</li>
<li>第 14~16 行定義角度與工作週期的對應關係，也就是前述的公式三。</li>
<li>第 20~29 行透過兩個 for 迴圈將 SG90 由 0 度逐次旋轉至 180 度，之後再逐次轉回 0 度。</li>
<li>第 30 行將 SG90 軸心旋轉至 90 度。</li>
<li>第 31~32 行執行無任何功能的迴圈，其目的是讓 SG90 的軸心停在 90 度的位置。</li>
<li>第 36~37 行確定程式停止後 pwm 功能會被關閉，而且程式所使用的腳位會回到預設狀態。</li>
</ul>
<p>程式完成後，輸入下列指令執行程式<br><code>python pwm_sg90.py</code></p>
</li>
</ol>
<h3 id="利用-Raspberry-Pi-硬體式-PWM-功能來控制伺服馬達-SG90"><a href="#利用-Raspberry-Pi-硬體式-PWM-功能來控制伺服馬達-SG90" class="headerlink" title="利用 Raspberry Pi 硬體式 PWM 功能來控制伺服馬達 SG90"></a>利用 Raspberry Pi 硬體式 PWM 功能來控制伺服馬達 SG90</h3><ol>
<li><p>支援硬體 PWM 功能的 <code>pigpio</code> 模組</p>
</li>
<li><p>使用硬體式的 PWM 功能，所以控制接腳 (橘色) 必須連結至支援硬體 PWM 功能的腳位，使用實體編號 12 的腳位 (其 BCM 編號為 18)。</p>
</li>
<li><p>啟用 pigpio 服務<br>sudo service pigpiod start</p>
</li>
<li><p>安裝 pigpio 套件<br>pip install pigpio</p>
</li>
<li><p>確認 pigpio 套件已正確安裝<br>pip list</p>
</li>
<li><p>線路圖<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210521094725.png" alt="20210521094725"></p>
</li>
<li><p>說明如下:</p>
<ul>
<li><p>在這個範例中我們將使用硬體式的 PWM 功能，所以控制接腳 (橘色) 必須連結至支援硬體 PWM 功能的腳位，這個範例中我們使用實體編號 12 的腳位 (其 BCM 編號為 18)。</p>
</li>
<li><p>SG90 的工作電壓為 +4.8V 以上，所以我們必須連結至 Raspberry Pi +5V 的腳位，在此我們將 SG90 電源輸入接腳 (紅色) 連結至實體編號 2 的腳位。</p>
</li>
<li><p>接地接腳 (棕色) 必須接地，所以連結至 Raspberry Pi 的實體編號 6 的腳位。</p>
</li>
<li><p>腳位對應關係整理如下：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>SG90 伺服馬達接腳</th>
<th>Raspberry Pi GPIO 腳位</th>
</tr>
</thead>
<tbody><tr>
<td>橘色 (控制訊號)</td>
<td>實體編號 12 (BCM 編號 18)</td>
</tr>
<tr>
<td>紅色 (電源輸入)</td>
<td>實體編號 6 (接地)</td>
</tr>
<tr>
<td>棕色 (接地)</td>
<td>實體編號 2 (+5V)</td>
</tr>
</tbody></table>
</li>
<li><p>如之前所提，伺服馬達的啟動或運作電流可能會過大而造成運作不正常、甚至損毀 Raspberry Pi，因此如果你手邊的伺服馬達並沒有註明型號，也沒有相關規格，請避免直接連結至 Raspberry Pi。</p>
</li>
<li><p>利用文字編輯器 (如 nano) 新增 Python 程式<br><code>hardware_pwm_sg90.py</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">   <span class="token keyword">import</span> pigpio
   <span class="token keyword">import</span> time
   
   PWM_CONTROL_PIN <span class="token operator">=</span> <span class="token number">18</span>
   PWM_FREQ <span class="token operator">=</span> <span class="token number">50</span>
   STEP <span class="token operator">=</span> <span class="token number">15</span>
   
   pi <span class="token operator">=</span> pigpio<span class="token punctuation">.</span>pi<span class="token punctuation">(</span><span class="token punctuation">)</span>
   
   <span class="token keyword">def</span> <span class="token function">angle_to_duty_cycle</span><span class="token punctuation">(</span>angle<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
       duty_cycle <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> PWM_FREQ <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1900</span> <span class="token operator">*</span> PWM_FREQ <span class="token operator">*</span> angle <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span> duty_cycle
   
   <span class="token keyword">try</span><span class="token punctuation">:</span>
       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'按下 Ctrl-C 可停止程式'</span><span class="token punctuation">)</span>
       <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> STEP<span class="token punctuation">)</span><span class="token punctuation">:</span>
           dc <span class="token operator">=</span> angle_to_duty_cycle<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>
           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'角度={: &gt;3}, 工作週期={: &gt;6}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>angle<span class="token punctuation">,</span> dc<span class="token punctuation">)</span><span class="token punctuation">)</span>
           pi<span class="token punctuation">.</span>hardware_PWM<span class="token punctuation">(</span>PWM_CONTROL_PIN<span class="token punctuation">,</span> PWM_FREQ<span class="token punctuation">,</span> dc<span class="token punctuation">)</span>
           time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
       <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>STEP<span class="token punctuation">)</span><span class="token punctuation">:</span>
           dc <span class="token operator">=</span> angle_to_duty_cycle<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>
           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'角度={: &gt;3}, 工作週期={: &gt;6}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>angle<span class="token punctuation">,</span> dc<span class="token punctuation">)</span><span class="token punctuation">)</span>
           pi<span class="token punctuation">.</span>hardware_PWM<span class="token punctuation">(</span>PWM_CONTROL_PIN<span class="token punctuation">,</span> PWM_FREQ<span class="token punctuation">,</span> dc<span class="token punctuation">)</span>
           time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
       pi<span class="token punctuation">.</span>hardware_PWM<span class="token punctuation">(</span>PWM_CONTROL_PIN<span class="token punctuation">,</span> PWM_FREQ<span class="token punctuation">,</span> angle_to_duty_cycle<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
           <span class="token builtin">next</span>
   <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'關閉程式'</span><span class="token punctuation">)</span>
   <span class="token keyword">finally</span><span class="token punctuation">:</span>
       pi<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span>PWM_CONTROL_PIN<span class="token punctuation">,</span> pigpio<span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>   
   ```  

<span class="token number">10</span><span class="token punctuation">.</span> 程式說明如下<span class="token punctuation">:</span>

<span class="token operator">-</span> 第 <span class="token number">1</span> 行引入 pigpio 套件，在這個範例中我們將透過這個套件使用 Raspberry Pi 的硬體 PWM 功能。
<span class="token operator">-</span> 第 <span class="token number">4</span> 行定義控制接腳所連結之 Raspberry Pi 腳位，我們連結的是實體編號 <span class="token number">12</span> 的腳位，其 BCM 編號為 <span class="token number">18</span>。
<span class="token operator">-</span> 第 <span class="token number">5</span> 行定義 PWM 所使用的頻率。
<span class="token operator">-</span> 第 <span class="token number">6</span> 行定義每次旋轉的角度。
<span class="token operator">-</span> 第 <span class="token number">8</span> 行宣告 pigpio 控制物件。
<span class="token operator">-</span> 第 <span class="token number">10</span><span class="token operator">~</span><span class="token number">12</span> 行定義角度與工作週期的對應關係，也就是這篇文章中的公式三。不過因為 RPi<span class="token punctuation">.</span>GPIO 所使用的工作週期參數範圍為 <span class="token number">0</span> <span class="token operator">~</span> <span class="token number">100</span>，而 pigpio 的 hardware_PWM 函式所使用的工作週期參數範圍為 <span class="token number">0</span> <span class="token operator">~</span> <span class="token number">1000000</span>，所以須將原公式乘以 <span class="token number">10000</span>。
第 <span class="token number">16</span><span class="token operator">~</span><span class="token number">25</span> 行透過兩個 <span class="token keyword">for</span> 迴圈將 SG90 由 <span class="token number">0</span> 度逐次旋轉至 <span class="token number">180</span> 度，之後再逐次轉回 <span class="token number">0</span> 度。
<span class="token operator">-</span> 第 <span class="token number">26</span> 行將 SG90 軸心旋轉至 <span class="token number">90</span> 度。
<span class="token operator">-</span> 第 <span class="token number">27</span><span class="token operator">~</span><span class="token number">28</span> 行執行無任何功能的迴圈，其目的是讓 SG90 的軸心停在 <span class="token number">90</span> 度的位置。
<span class="token operator">-</span> 第 <span class="token number">32</span> 行確定程式結束後程式中所使用的腳位會回到預設狀態。

<span class="token number">11</span><span class="token punctuation">.</span> 程式完成後，輸入下列指令執行程式

    ```Shell
    python hardware_pwm_sg90<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>






</li>
</ol>
<h2 id="10-開機自動執行-shell-程式"><a href="#10-開機自動執行-shell-程式" class="headerlink" title="10. 開機自動執行 shell 程式"></a>10. 開機自動執行 <code>shell</code> 程式</h2><ol>
<li><p>目的：樹莓派開機時自動執行某些腳本，不用手動設置，減少麻煩。</p>
</li>
<li><p>思路：新建一個自動啟動 <code>pigpio</code> 服務的腳本 pigpio.sh，然後添加執行命令到 /etc/rc.local文件中</p>
</li>
<li><p>實現步驟<br>3.1. 新建一個 bash shell 腳本</p>
<pre><code> `touch /home/pi/source/pigpio.sh` </code></pre>
<p>3.2. 往 <code>pigpio.sh</code> 腳本添加如下內容</p>
   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/home/pi/source"</span>

<span class="token function">sudo</span> <span class="token function">service</span> pigpiod start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>3.3. 給予腳本 <code>pigpiod.sh</code> 許可權並執行，查看是否能正常執行</p>
   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /home/pi/source
$ <span class="token function">chmod</span> +x pigpiod.sh
$ <span class="token function">bash</span> ./pigpiod.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>3.4. 在 <code>/etc/rc.local</code> 檔中添加執行指令碼命令</p>
   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">:</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$_IP</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
 <span class="token builtin class-name">printf</span> <span class="token string">"My IP address is %s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"<span class="token variable">$_IP</span>"</span>
<span class="token keyword">fi</span>

<span class="token function">bash</span>  ./home/pi/source/pigpiod.sh <span class="token comment">#添加這條命令，路徑是絕對路徑</span>
<span class="token builtin class-name">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="11-開機自動執行-python-程式"><a href="#11-開機自動執行-python-程式" class="headerlink" title="11. 開機自動執行 python 程式"></a>11. 開機自動執行 <code>python</code> 程式</h2><h3 id="步驟摘要如下"><a href="#步驟摘要如下" class="headerlink" title="步驟摘要如下 :"></a>步驟摘要如下 :</h3><ol>
<li><code>Python</code> 程式第一行要放 #!/usr/bin/python3 指定執行之解譯器版本</li>
<li>用 chmod 指令將此 Python 程式改為可執行 (+x), 例如 :<br><code>chmod +x /home/pi/test.py</code> </li>
<li>建立 bash shell 程式 <code>mypython</code>, <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/bash</span>
<span class="token comment">### BEGIN INIT INFO</span>
<span class="token comment"># Provides:          mypython</span>
<span class="token comment"># Required-Start:    $syslog $network</span>
<span class="token comment"># Required-Stop:     $syslog $network</span>
<span class="token comment"># Default-Start:     2 3 4 5</span>
<span class="token comment"># Default-Stop:      0 1 6</span>
<span class="token comment"># Short-Description: starts the mypython</span>
<span class="token comment"># Description:       starts mypython using start-stop-daemon</span>
<span class="token comment">### END INIT INFO</span>

<span class="token comment"># /etc/init.d/mypython</span>
<span class="token comment"># 1.新增檔案權限：可以執行</span>
<span class="token comment">#   sudo chmod +x /etc/init.d/mypython</span>
<span class="token comment"># 2.設定開機啟動</span>
<span class="token comment">#   sudo update-rc.d mypython defaults 95</span>
<span class="token comment">#   (如果要移除開機啟動：sudo update-rc.d mypython remove)</span>
<span class="token comment">#   ( mypython 有修改的話，要執行 systemctl daemon-reload )</span>
<span class="token comment"># 3.使用指令碼啟動、停止服務</span>
<span class="token comment">#   sudo service mypython start</span>
<span class="token comment">#   sudo service mypython stop</span>

case <span class="token string">"$1"</span> <span class="token keyword">in</span>
    start<span class="token punctuation">)</span>
        echo <span class="token operator">-</span>n <span class="token string">"Starting python: "</span>
        echo <span class="token string">"---------------------------------------------------------------------------------"</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        date <span class="token operator">+</span><span class="token string">"! %Y/%m/%d %a %T : Starting python ."</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        echo start
        <span class="token comment">#cd /home/pi/inv/</span>
        <span class="token comment">#./mqtt-ledv4-test.py &gt;&gt; /var/log/inv.log &amp;</span>
        cd <span class="token operator">/</span>home<span class="token operator">/</span>pi<span class="token operator">/</span>source<span class="token operator">/</span>
        <span class="token punctuation">.</span><span class="token operator">/</span>test<span class="token punctuation">.</span>py <span class="token operator">&amp;</span>
        echo <span class="token string">"Done."</span>
        echo <span class="token string">""</span>
        date <span class="token operator">+</span><span class="token string">"! %Y/%m/%d %a %T : Finished."</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        echo <span class="token string">"---------------------------------------------------------------------------------"</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        touch <span class="token operator">/</span>var<span class="token operator">/</span>lock<span class="token operator">/</span>subsys<span class="token operator">/</span>python
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    stop<span class="token punctuation">)</span>
        echo <span class="token operator">-</span>n <span class="token string">"Shutting Down python Listeners: "</span>
        echo <span class="token string">"---------------------------------------------------------------------------------"</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        date <span class="token operator">+</span><span class="token string">"! %Y/%m/%d %a %T : Shutting Down python."</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        echo <span class="token string">"python"</span>
        <span class="token comment">#killall -9 mqtt-ledv4-test.py</span>
        killall <span class="token operator">-</span><span class="token number">9</span> test<span class="token punctuation">.</span>py
        echo <span class="token string">"Done."</span>
        rm <span class="token operator">-</span>f <span class="token operator">/</span>var<span class="token operator">/</span>lock<span class="token operator">/</span>subsys<span class="token operator">/</span>python
        echo <span class="token string">"Done."</span>
        date <span class="token operator">+</span><span class="token string">"! %Y/%m/%d %a %T : Finished."</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        echo <span class="token string">"---------------------------------------------------------------------------------"</span> <span class="token operator">&gt;&gt;</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mypython
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">)</span>
        echo <span class="token string">"Usage: mypython { start | stop | restart }"</span>
        exit <span class="token number">1</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
esac
exit <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>修改其中第 38 行與第 51 行的 Python 程式檔名為自己要執行之 Python 程式檔名, 例如 test.py, 然後將此 <code>mypython</code> 程式放在 /etc/init.d/ 目錄下, 用 chmod 指令將其權限改為可執行 :<br><code>sudo chmod +x /etc/init.d/mypython</code> </li>
<li>設定 <code>mypython</code> 開機自動執行 :<br><code>sudo update-rc.d mypython defaults 95</code></li>
<li>啟動服務 :<br><code>sudo service mypython start</code></li>
<li>重開機檢查 Python 程式是否有在執行<br><code>ps -ax|grep mypython</code></li>
</ol>
<h3 id="取消自動執行程序"><a href="#取消自動執行程序" class="headerlink" title="取消自動執行程序 :"></a>取消自動執行程序 :</h3><ol>
<li>移除開機啟動設定：<br><code>sudo update-rc.d mypython remove</code></li>
<li>停止服務 :<br><code>sudo service mypython stop</code></li>
<li>刪除 mypython :<br><code>sudo rm /etc/init.d/mypython</code></li>
</ol>
<h2 id="Azure-IoT-Edge-Azure-Custom-Vision-在-RPi"><a href="#Azure-IoT-Edge-Azure-Custom-Vision-在-RPi" class="headerlink" title="Azure IoT Edge + Azure Custom Vision 在 RPi"></a>Azure IoT Edge + Azure Custom Vision 在 RPi</h2><p>Raspberry Pi Web 模擬器</p>
<h3 id="Raspberry-Pi-周邊硬體"><a href="#Raspberry-Pi-周邊硬體" class="headerlink" title="Raspberry Pi 周邊硬體"></a>Raspberry Pi 周邊硬體</h3><ol>
<li><a href="https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/">Pi 3 Model B+</a></li>
<li><a href="https://www.raspberrypi.org/products/pi-noir-camera-v2/">(NoIR) Camera V2</a></li>
<li></li>
</ol>
<p><a href="https://customvision.ai/">Azure Custom Vision</a></p>
<p>目前在 Azure Custom Vision 的匯出功能上，匯出到 Azure IoT Edge 的內容是以 x86 的環境來設計（可以選擇 Windows/Linux），不過還好它內容物包含了標籤 (labels.txt) 以及模型 (model.pb) 的檔案（下載的模型是 TensorFlow 的格式），所以有這兩個檔案還是可以自行撰寫 edge module。</p>
<p>所需套件</p>
<ol>
<li>Python<br><code>pillow</code>，<code>numpy</code>以及 <code>flask</code>，因為這個模組啟動的 <code>web service</code> 就是以 <code>Flask</code> 來運作的。</li>
</ol>
<p>使用 Pi Camera(而不是用 USB Cam)，若把相機位置設定成 /dev/video0，需在 <code>Raspbian</code> 上多做下列步驟:</p>
<ul>
<li>執行 <code>sudo rpi-update</code> 更新 <code>RPi</code> 的 <code>firmware</code>，重新啟動。</li>
<li>執行 <code>sudo modprobe bcm2835-v4l2</code>，注意 <code>l</code> 是小寫的 <code>L</code> 而不是數字 <code>1</code>。</li>
<li>在 <code>/etc/modules-load.d/modules.conf</code> 檔案中加入一行 <code>bcm2835-v4l2</code> ，存檔後重開機。</li>
<li>啟用 <code>Camera</code> 模組</li>
</ul>
<h2 id="微軟-Azure-上線樹莓派模擬器"><a href="#微軟-Azure-上線樹莓派模擬器" class="headerlink" title="微軟 Azure 上線樹莓派模擬器"></a>微軟 Azure 上線樹莓派模擬器</h2><p><a href="https://docs.microsoft.com/zh-tw/azure/iot-hub/iot-hub-raspberry-pi-kit-node-get-started">https://docs.microsoft.com/zh-tw/azure/iot-hub/iot-hub-raspberry-pi-kit-node-get-started</a></p>
<h3 id="1-使用-Raspberry-Pi-Web-模擬器"><a href="#1-使用-Raspberry-Pi-Web-模擬器" class="headerlink" title="1. 使用 Raspberry Pi Web 模擬器"></a>1. 使用 Raspberry Pi Web 模擬器</h3><p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602071120.png" alt="20210602071120"></p>
<p><a href="https://azure-samples.github.io/raspberry-pi-web-simulator/#getstarted">開始 Raspberry Pi Web 模擬器</a></p>
<p>Web 模擬器中有三個區域。</p>
<ol>
<li><p>組件區域 - 預設線路是 Pi 與 BME280 感應器和 LED 連線。 此區域已在預覽版本中鎖定，所以您目前無法進行自訂。</p>
</li>
<li><p>編碼區域 - 可供您使用 Raspberry Pi 編碼的線上程式碼編輯器。 預設範例應用程式有助於從 BME280 感應器收集感應器資料，並傳送至您的 Azure IoT 中樞。 應用程式與實際 Pi 裝置完全相容。</p>
</li>
<li><p>整合式主控台視窗 - 它會顯示您的程式碼輸出。 在這個視窗頂端，有三個按鈕。</p>
<ul>
<li>執行 - 在編碼區域中執行應用程式。</li>
<li>重設 - 將編碼區域重設為預設範例應用程式。</li>
<li>摺疊/展開 - 右邊有一個可供您摺疊/展開主控台視窗的按鈕。</li>
</ul>
<blockquote>
<p>預覽版本現在提供 Raspberry Pi Web 模擬器。 我們想要在 <a href="https://gitter.im/Microsoft/raspberry-pi-web-simulator">Gitter 聊天室</a>中傾聽您的心聲。 原始程式碼公開於 <a href="https://github.com/Azure-Samples/raspberry-pi-web-simulator">GitHub</a>。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602074651.png" alt="20210602074651"></p>
</li>
</ol>
<h3 id="2-使用實體-Raspberry-Pi"><a href="#2-使用實體-Raspberry-Pi" class="headerlink" title="2. 使用實體 Raspberry Pi"></a>2. 使用實體 Raspberry Pi</h3><h4 id="2-1-創建-IoT-中心"><a href="#2-1-創建-IoT-中心" class="headerlink" title="2.1. 創建 IoT 中心"></a>2.1. 創建 IoT 中心</h4><ol>
<li><p>要把樹莓派等設備連接到 Azure 服務，首先需要連接到 Azure IoT 中樞。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602051626.png" alt="20210602051626"></p>
</li>
<li><p>然後為該設備創建一個 Azure 設備 ID。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602052600.png" alt="20210602052600"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602052700.png" alt="20210602052700"></p>
<blockquote>
<p>IoT Hub 目前有四種不同定價，功能上並沒有差異，只是允許的每天/單位/消息數量的差別。用於測試的話，選擇免費的F1沒啥不好的。</p>
</blockquote>
</li>
<li><p>確認之後 <code>Azure</code> 就會部署新建的 <code>IoT</code> 中心，等到部署完畢，就可以查看和配置有關參數。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602053709.png" alt="20210602053709"></p>
</li>
<li><p>創建 IoT 中心後，請在儀錶板中單擊它。 記下「主機名稱」，然後單擊「共用存取原則」<br>主機名稱: pi3B-IoT.azure-devices.net</p>
</li>
<li><p>在「共用存取原則」窗格中單擊「iothubowner」策略，然後複製並記下 IoT 中心的連接字符串。 有關詳細信息，請參閱控制對 IoT 中心的訪問。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602063949.png" alt="20210602063949"></p>
<p>Primary connection string:<br>HostName=pi3B-IoT.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=cNVK+uDR8e3Psgh3dgM1nIDhC0Osiaji9PWmD8GuQPo=</p>
<p>Secondary connection string<br>HostName=pi3B-IoT.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=TAj8ES46YzxxU30VL9wyyzCkG6+LkX+Ja15XJO5fNJg=</p>
</li>
</ol>
<h4 id="2-2-在-IoT-中心內為設備-Pi-註冊"><a href="#2-2-在-IoT-中心內為設備-Pi-註冊" class="headerlink" title="2.2. 在 IoT 中心內為設備 Pi 註冊"></a>2.2. 在 IoT 中心內為設備 <code>Pi</code> 註冊</h4><ol>
<li><p>在 Azure Portal 中打開 IoT 中樞。</p>
</li>
<li><p>單擊「自動裝置管理」中的 IoT Edge，單擊「新增IoT Edge 裝置」將設備添加到你的 IoT 中心。 然後執行以下操作：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602065122.png" alt="20210602065122"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602065735.png" alt="20210602065735"></p>
<p>裝置識別碼：輸入新裝置的 ID。 裝置 ID 區分大小寫。 (pi3-b827eb446bbc)<br>驗證類型：選擇「對稱密鑰」。<br>自動生成密鑰：勾選此選框。<br>將這個裝置連接到 IoT 中樞：單擊「啟用」。</p>
<blockquote>
<p>重要：<br> 收集的日誌中可能會顯示裝置 ID 用於客戶支持和故障排除，因此，在為日誌命名時，請務必避免包含任何敏感信息。</p>
</blockquote>
</li>
<li><p>單擊「儲存」 。</p>
</li>
<li><p>創建裝置後，在「自動裝置管理」窗格的項目 「IoT Edge」 中打開裝置。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602070230.png" alt="20210602070230"></p>
</li>
<li><p>記下連接字符串的主密鑰。</p>
<ul>
<li>主要連接字串<br>HostName=pi3B-IoT.azure-devices.net;DeviceId=pi3-b827eb446bbc;SharedAccessKey=FqIUSyBgBzsywYJGGhJaNCBu9RqF7bcB8i6YcMvF6wk=</li>
<li>次要連接字串<br>HostName=pi3B-IoT.azure-devices.net;DeviceId=pi3-b827eb446bbc;SharedAccessKey=QbmqytxmXl+botyyJKdVtGgfZCXFC/auLqfkgFY9cTU=</li>
</ul>
</li>
</ol>
<h4 id="2-3-設定-Raspberry-Pi"><a href="#2-3-設定-Raspberry-Pi" class="headerlink" title="2.3. 設定 Raspberry Pi"></a>2.3. 設定 Raspberry Pi</h4><ol>
<li><p>安裝 Pi 的 Raspbian 作業系統</p>
</li>
<li><p>啟用 SSH 和 I2C</p>
</li>
<li><p>將溫溼度感應器連接至 Pi<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602072141.png" alt="20210602072141"></p>
<p>感應器可以收集溫度和溼度資料。 當裝置將訊息傳送至雲端時，LED 會閃爍。</p>
<table>
<thead>
<tr>
<th>啟動(感應器和 LED)</th>
<th>結束(電路板)</th>
<th>纜線顏色</th>
</tr>
</thead>
<tbody><tr>
<td>VDD(針腳 5G)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>GND(針腳 7G)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>LED VDD(針腳 18F)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>LED GND(針腳 17F)</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
</ol>
<ol start="4">
<li>將 Pi 連線到網路</li>
</ol>
<h4 id="2-4-在-Pi-上執行範例應用程式，將感應器資料傳送至-IoT-中樞"><a href="#2-4-在-Pi-上執行範例應用程式，將感應器資料傳送至-IoT-中樞" class="headerlink" title="2.4. 在 Pi 上執行範例應用程式，將感應器資料傳送至 IoT 中樞"></a>2.4. 在 Pi 上執行範例應用程式，將感應器資料傳送至 IoT 中樞</h4><p>透過 micro USB 纜線和電源供應器來開啟 Pi。 使用乙太網路纜線將 Pi 連接到有線網路，或遵循來自 Raspberry Pi Foundation 的指示，將 Pi 連接到無線網路。 在 Pi 成功連線到網路之後，您需要記下 Pi 的 IP 位址。</p>
<blockquote>
<p>請確定 Pi 是連接到與您電腦相同的網路。 例如，如果您的電腦連線到無線網路，而 Pi 連線到有線網路，您可能不會在 devdisco 輸出中看到 IP 位址。</p>
</blockquote>
<h3 id="在-Pi-Web-模擬器上運行示例應用程式"><a href="#在-Pi-Web-模擬器上運行示例應用程式" class="headerlink" title="在 Pi Web 模擬器上運行示例應用程式"></a>在 Pi Web 模擬器上運行示例應用程式</h3><ol>
<li><p>製範例應用程式並安裝必要條件套件</p>
<ul>
<li><p>請先檢查您的 Node.js 版本。<br><code>node  -v</code></p>
<blockquote>
<p>如果版本低於2.x，或您的 Pi 上沒有 Node.js，請安裝最新版本。</p>
</blockquote>
</li>
<li><p>node<br><code>curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash</code><br><code>sudo apt-get -y install nodejs</code></p>
</li>
<li><p>複製範例應用程式<br><code>git clone https://github.com/Azure-Samples/azure-iot-samples-node.git</code></p>
</li>
<li><p>安裝該範例的所有套件。 此安裝包含 Azure IoT 裝置 SDK、BME280 感應器程式庫及 Wiring Pi 程式庫</p>
<p><code>cd azure-iot-samples-node/iot-hub/Tutorials/RaspberryPiApp</code><br><code>npm install</code> </p>
</li>
</ul>
</li>
<li><p>設定範例應用程式</p>
<ul>
<li><p>執行下列命令以開啟組態檔：<br><code>nano config.json</code></p>
<p>此檔案中有兩個您可以設定的項目。 第一個是 interval，這定義傳送至雲端之訊息間的時間間隔 (以毫秒為單位)。 第二個是 simulatedData，這是指出是否要使用模擬感應器資料的布林值。</p>
<blockquote>
<p>如果 <strong>沒有感應器</strong>，請將 simulatedData 值設定為 true，使範例應用程式建立和使用模擬感應器資料。</p>
</blockquote>
</li>
<li><p>輸入 Control-O &gt; 按 Enter 鍵 &gt; Control-X 來儲存並結束。  </p>
</li>
</ul>
</li>
<li><p>執行範例應用程式<br><code>sudo node index.js '&lt;YOUR AZURE IOT HUB DEVICE CONNECTION STRING&gt;'</code></p>
<blockquote>
<p>確定複製裝置連接字串，並貼到單引號中。</p>
</blockquote>
<p>您應該會看見下列輸出，顯示傳送至 IoT 中樞的感應器資料和訊息。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602074015.png" alt="20210602074015"></p>
</li>
</ol>
<ol start="4">
<li><p>讀取中樞所接收的訊息<br>若要從您的裝置監視 IoT 中樞所收到的訊息，其中一種方式是<a href="https://docs.microsoft.com/zh-tw/azure/iot-hub/iot-hub-vscode-iot-toolkit-cloud-device-messaging">使用 Visual Studio Code 的 Azure IoT Tools。 若要深入瞭解，請參閱 使用 Azure IoT Tools Visual Studio Code，以在您的裝置與 IoT 中樞之間傳送和接收訊息</a>。</p>
<p>如需更多處理裝置所傳送資料的方式，請繼續下一節。</p>
</li>
</ol>
<p>微軟 <code>Azure</code> 上線樹莓派模擬器</p>
<p><a href="https://zh.codeprj.com/blog/7a66c91.html">https://zh.codeprj.com/blog/7a66c91.html</a></p>
<ol>
<li><p>更新系統<br>sudo apt update &amp;&amp; sudo apt full-upgrade -y</p>
</li>
<li><p>檢查 python 與 pip 版本<br>python –version &amp;&amp; pip –version</p>
<blockquote>
<p>若無 python 或 pip 可以使用一下方式安裝<br> sudo apt install python-pip -y</p>
</blockquote>
<p>更新工具  </p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">sudo pip install <span class="token operator">-</span><span class="token operator">-</span>upgrade setuptools pip
sudo apt install python2<span class="token punctuation">.</span><span class="token number">7</span><span class="token operator">-</span>dev libffi<span class="token operator">-</span>dev libssl<span class="token operator">-</span>dev <span class="token operator">-</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>安裝 Docker<br><code>curl -sSL https://get.docker.com | sudo -E sh</code></p>
<p>安裝完成之后，為當前用戶（pi）添加運行 Docker 的權限，<br><code>sudo usermod -aG docker pi</code></p>
<p>重啟樹莓派<br><code>sudo reboot</code></p>
<p>測試 <code>Docker</code> 運行狀態<br><code>docker run hello-world</code><br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210602061722.png" alt="20210602061722"></p>
<p>現在，我們需要通過 Docker 將 <code>IoTedge Agent</code> 和 <code>IoTedge Hub</code> 這兩個模塊 <code>Pull</code> 到本地，分別運行：</p>
<p><code>docker pull microsoft/azureiotedge-agent:1.0-preview</code><br><code>docker pull microsoft/azureiotedge-hub:1.0-preview</code></p>
</li>
<li><p>IoT Edge Device的創建<br>這部分可以參考《Azure IoT Edge on Windows 10 IoT Core》一文中的第4部分，在IoT Edge中創建一個名為Raspberry的IoT Edge Device，並獲得其連接字符串Connection String。</p>
</li>
<li><p>IoT Edge Runtime的部署與配置<br>首先，使用如下命令安裝IoT Edge control腳本：</p>
<p>sudo pip install -U azure-iot-edge-runtime-ctl</p>
<p>之后，通過執行如下指令來配置IoT Edge Runtime：</p>
<p>iotedgectl setup –connection-string “{device connection string}” –auto-cert-gen-force-no-passwords</p>
<p>其中的”{device connection string}”由上面第4步中保存的Connection String來代替。</p>
</li>
</ol>
<h2 id="人臉辨識"><a href="#人臉辨識" class="headerlink" title="人臉辨識"></a>人臉辨識</h2><p><a href="https://ericsk.medium.com/azure-iot-edge-azure-custom-vision-raspberry-pi-3-%E5%AF%A6%E7%8F%BE%E9%82%8A%E7%B7%A3%E9%81%8B%E7%AE%97-edge-computing-%E4%B8%8A%E7%9A%84%E9%9B%A2%E7%B7%9A%E9%9B%BB%E8%85%A6%E8%A6%96%E8%A6%BA%E6%87%89%E7%94%A8-94d6bde2b244">https://ericsk.medium.com/azure-iot-edge-azure-custom-vision-raspberry-pi-3-%E5%AF%A6%E7%8F%BE%E9%82%8A%E7%B7%A3%E9%81%8B%E7%AE%97-edge-computing-%E4%B8%8A%E7%9A%84%E9%9B%A2%E7%B7%9A%E9%9B%BB%E8%85%A6%E8%A6%96%E8%A6%BA%E6%87%89%E7%94%A8-94d6bde2b244</a></p>
<ol>
<li><p>流程</p>
<p>抓取人臉        使用 opencv 庫內建 face track 抓取臉部特徵來達成辨識臉部的目的，並標示區域</p>
<pre><code>            由於電腦使用普通色彩去判斷人臉會花較多資源且會使訓練過程變得很複雜，所以要先將彩色圖片轉為灰度圖，，這可使圖片的對比度增高、去除雜訊與降低圖片資料。

            獲取圖片 -&gt; 圖片轉灰白 -&gt; 進行面部追蹤 -&gt; 抓取面部圖片 -&gt; 圖片上傳至雲端 -&gt; Azure 進行辨識</code></pre>
</li>
</ol>
<p>#擷取攝影機畫面<br>frame = ipcam.getframe()<br>output = ipcam.getframe()<br>#ret, frame = video_capture.read()<br>#ret, output = video_capture.read()<br>#轉灰階<br>try:<br>   gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)<br>   faced = faceCascade.detectMultiScale(<br>       gray,<br>       scaleFactor=1.1,<br>       minNeighbors=5,<br>       minSize=(30, 30)<br>   )<br>except:<br>    print(“轉換錯誤，切換模式”)<br>    faces = faceCascade.detectMultiScale(<br>       frame,<br>       scalefactor=1.1,<br>       minNeighbors=5,<br>       minSize=(30, 30)<br>    )</p>
<ol start="2">
<li><p>上傳人臉        使用 imggur 服務上傳人臉</p>
</li>
<li><p>辨識表情        上傳至 Azure 後，獲取臉部辨識報告</p>
</li>
<li><p>顯示結果        </p>
</li>
</ol>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>wiot</category>
      </categories>
      <tags>
        <tag>iot</tag>
        <tag>wiot</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript</title>
    <url>/javascript/20210122-javascript/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol>
<li><p><strong>前身</strong>:<br>Netscape 網景公司, LiveScript 文稿語言, 網景與昇陽(Sun Microsystem co.) 共推 WWW 文稿語言的標準,最後改名 JavaSript。</p>
<ul>
<li><p>腳本(Script): 一種直譯語言，直譯程式是一個指令一個動作，一列一列的執行腳本程式碼。</p>
</li>
<li><p>JavaScript 這類腳本語言不需要編譯，所以撰寫和除錯十分容易，而且一經更改馬上就可以執行，看到執行結果。</p>
</li>
<li><p>直譯的腳本語言有一些缺點，在執行效率上比不上編譯的程式語言，對於一些大型應用程式來說，程式執行效率的差異就會更加明顯，而且腳本語言不能單獨執行，需要直譯程式才能執行，例如：HTML網頁中的 JavaScript 程式需要瀏覽器支援才能執行。</p>
</li>
<li><p>補充 HTML 及 JAVA 的不足.</p>
<escape>
<table>
   <tbody><tr>
      <th></th>
      <th>JavaScritp</th>
      <th>Jave</th>
   </tr>
   <tr>
   <td>語言</td>
      <td>Object Type<br>
          Interpreted<br>
          物件基礎(Object-based), 無類別繼承</td>
      <td>Object Type<br>
          Compiled<br>
          物件導向(Object-Oriented), 類別繼承</td>
   </tr>
   <tr>
   <td>資料型態</td>
   <td>loose</td><td>strong</td>
   </tr>
   <tr>
     <td>與 HTML 關聯</td>
     <td>嵌入式</td>
     <td>獨立於 HTML 文件外(用<applet>呼叫)</applet></td>
   </tr>
</tbody></table>  
</escape>
</li>
<li><p>鬆散的資料型態</p>
<ol>
<li>宣告變數時，無須宣告資料型態。</li>
<li>程式執行時自動轉換。</li>
</ol>
</li>
</ul>
</li>
<li><p>JS 的歷史:<br>JavaScript 的版本有 2 種講法:<br><strong>數字</strong>或<strong>年代</strong><br>例: ECMAScript 6(ES6)/ECMAScript(ES2015): 指 ECMAScript 的第六版修訂，於 2015 年完成標準化。<br>例: ECMAScript 2016: 預計的第七版 ECMAScript 修訂。</p>
<blockquote>
<p>因新版本尚未穩定，瀏覽器也未都支援，所以這裡用較新且較穩定 ES6 或  ES7 版本。</p>
</blockquote>
</li>
<li><p>JS 的寫法:撰寫格式</p>
<ul>
<li><p>利用專用標籤 <code>&lt;script&gt;&lt;/script&gt;</code></p>
<ul>
<li><p>格式一: HTML 一載入時即執行 Script。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Script<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span> document物件用於將目前的文件資訊輸出至使用者螢幕 <span class="token operator">--</span><span class="token operator">&gt;</span>
 document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"JavaScript程式一"</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Script<span class="token operator">&gt;</span>
   <span class="token operator">:</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>document.write()方法會在網頁元件載入之後清空所有內容，再將括號()內的資料顯示在網頁，單純測試可以，但正式寫網頁，應使用 HTML 元件將資料顯示於網頁，例如:<code>&lt;div&gt;顯示的資料&lt;/div&gt;</code></p>
</blockquote>
</li>
<li><p>格式二: 指定使用語言。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Script language<span class="token operator">=</span><span class="token string">"JavaScript"</span><span class="token operator">&gt;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"JavaScript程式二"</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>常用 Script 有 <code>VBScript</code> 與 <code>JavaScript</code> 兩種。</p>
</blockquote>
</li>
<li><p>格式三: 包含於說明標籤之中。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"JavaScript程式三"</span><span class="token punctuation">)</span> <span class="token comment">// --&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>noscript<span class="token operator">&gt;</span>
   你的瀏覽器不支援 Javascript<span class="token operator">!</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>noscript<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>註: 支援當碰到瀏覽器不支援時,置於文件說明標籤之中的程式碼，將被視為一般說明文字，不至於發生錯誤訊息。</p>
</blockquote>
</li>
<li><p>格式四: 宣告成外部檔案。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Script src<span class="token operator">=</span><span class="token string">"sayHello.js"</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Script<span class="token operator">&gt;</span>  <span class="token comment">//標籤中並不包含任何程式碼，而是將程式寫在另一個檔案中，利用 SRC 將該外部程式檔案指出，呼叫並執行之。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>利用HTML標籤</p>
<ul>
<li><p>放在 Anchor(錨) 當中。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span> <span class="token attr-name">HREF</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:alert(<span class="token punctuation">'</span>這樣也可以<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 按我吧！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>A</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>透過 event handler(事件處理程序)。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">//並不是所有Javascript的程式碼都會放在 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SCRIPT</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">… </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SCRIPT</span><span class="token punctuation">&gt;</span></span>標籤組當中
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> 按我吧 <span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert(<span class="token punctuation">'</span>很簡單吧！<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>JS 的執行環境</p>
<ul>
<li><p>文字編輯器:</p>
<ul>
<li><a href="https://www.editplus.com/">Edit Plus</a></li>
<li><a href="https://goo.gl/21zz3w">UltraEdit</a></li>
<li><a href="https://www.sublimetext.com/">Sumlime Text</a></li>
<li><a href="https://notepad-plus-plus.org/">Notepad++</a></li>
</ul>
</li>
<li><p>IDE 工具</p>
<ul>
<li><a href="https://code.visualstudio.com/">Visula Studio Code</a></li>
<li><a href="https://www.jetbrains.com/webstorm/">WebStorm</a></li>
<li><a href="https://www.eclipse.org/">Eclipse</a></li>
</ul>
</li>
<li><p>線上編輯器:</p>
<ul>
<li><a href="https://jsfiddle.net/">JSFiddle</a></li>
<li><a href="https://codepen.io/">CodePen</a></li>
<li><a href="https://jsbin.com/?html,js,output">JS-Bin</a></li>
<li><a href="https://plnkr.co/">Plunker</a></li>
</ul>
</li>
<li><p>使用 Node.Js 來執行 Js:</p>
<ul>
<li><p>環境安裝:<br>(a). 從 <a href="https://nodejs.org/en/download/">Node.js 官網</a>，下載檔案之後自行編譯安裝。或是下載已經編譯好的安裝包。<br>即直接按下頁面中 “Windows Installer” 的 LTS(Long Term Service) 版本, 下載後,點擊該軟體開始安裝.</p>
<pre><code> 可以根據不同平台系統選擇你需要的 [Node.js](https://nodejs.orgdist/) 安裝包。</code></pre>
   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$node <span class="token operator">--</span>version <span class="token comment">//檢查已安裝的 nodejs 版本.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>(b) 使用 NVM(Node Version manager) 安裝與管理。</p>
<ul>
<li>至 <a href="https://github.com/coreybutler/nvm-windows">Node Version Manager (nvm) for Windows</a>下載，ZIP檔後解壓縮</li>
<li>進入解壓縮出來的資料夾，執行 <code>nvm-setup</code></li>
<li>前面接受授權後都 Next 即可， 在 [ Select Destinatiom Location ] 的項目中可先行記下程式安裝的存放位置，再來持續 Next 至完成安裝即可</li>
<li>開啟 我的電腦 ，在位置列上打上前面所述要記下的安裝存放位置</li>
<li>進到 nvm 的資料夾中，在 install 指令檔上，右鍵使用 以系統管理員執行</li>
<li>進到命令提示字元中，按 ENTER 鍵出現如下圖後即可關閉相關視窗</li>
<li>開啟命令提示字元，或開始在搜尋欄上打上 cmd</li>
<li>在命令提示字元中，打上 nvm 出現如下圖表示 nvm 安裝成功</li>
</ul>
<p>(c) 指令說明</p>
   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm version           //查看 nvm 安裝的版本
nvm list：查看 Node.js //已安裝的版本
nvm list available    //查看提供哪些 Node 版本
nvm <span class="token function">install</span> 版本號     //<span class="token punctuation">(</span>不能有含v<span class="token punctuation">)</span>：安裝指定的 Node 版本
nvm use <span class="token operator">&lt;</span>版本號<span class="token operator">&gt;</span>       //指定使用 Node 版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>測試:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~
<span class="token function">mkdir</span> nodejs     // 建立專案資料夾
<span class="token builtin class-name">cd</span> nodejs        // <span class="token builtin class-name">cd</span> 專案目錄
<span class="token function">touch</span> test.js    // 建立一文字檔, 取名稱為 test.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 Nodejs 官網找到 「About」-&gt; 範例 -&gt; 複製 -&gt; 貼上 test.js 內。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> hostname <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">;</span>  <span class="token comment">// 指定伺服器主機名稱</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>             <span class="token comment">// 指定伺服器 Port</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 產生 Web Service</span>
  res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//回應 html 中的標頭給需求端其中包含狀態碼200請求成功</span>
  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//標頭內容類型為文字檔 </span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Hello World\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 表示header,body 結束,建議每一回應都要作結束</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//監聽伺服器端印出訊息</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Server running at http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hostname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node test.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Server running at <a href="http://127.0.0.1:3000/">http://127.0.0.1:3000/</a></p>
<p>修改 test.js 如下:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'text/plain' 需改成 'text/html' 否則回應的是一般文字</span>
   res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Hello My &lt; u&gt; My First Program. &lt; /u&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//伺服器將訊息回傳到前端來顯示， Ctrl + C 終止執行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>瀏覽器支援度查尋工具</p>
<ul>
<li><a href="https://kangax.github.io/compat-table/es6/">ECMAScript6 compatibility table</a></li>
<li><a href="https://caniuse.com/">Can I use… Support tables</a></li>
</ul>
</li>
<li><p>關於瀏覽器的快取(catche)功能<br>瀏覽器每次瀏覽網頁，會將網頁上的靜態資源(外部 CSS、JS 檔、圖檔)等作暫存，當使用者再次瀏覽同一份網頁時，這些外部資源就不會重新被載入，優點:加快網頁載入速度，同時減少伺服器負擔。缺點:當你修改這些靜態資源之後，如果快取時間還未到期，瀏覽器就只會顯示暫存的舊資料，除非使用者清除快取或是使用Ctrl+F5鍵強制重新載入。</p>
</li>
</ol>
<p>為了避免使用者瀏覽舊資料，建議可以在修改 CSS 檔、CSS 檔、JS 檔或圖檔之後，將連接的外部檔名稱加上問號? 以及隨意字串，例如: <code>&lt;script src="test.js?v001"&gt;</code> 如此一來，瀏覽器就會認為網址不同，而向伺器要求重新載入。</p>
<blockquote>
<p>隨意字串可以是英文字母或是數字，可以自訂版本號碼或是日期，只要不與舊版本重複就可以，例如:</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">test<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token number">20200906</span>
test<span class="token punctuation">.</span>js<span class="token operator">?</span>al<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="JavaScript-的用途"><a href="#JavaScript-的用途" class="headerlink" title="JavaScript 的用途"></a>JavaScript 的用途</h3><ol>
<li><p>操作 HTML DOM</p>
</li>
<li><p>網頁遊戲<br>HTML5 具備跨平台特性以及提供完整的 WebGL API, 使用 JavaScript 與 HTML5 Canvas<br>元素能在網頁瀏覽器展現高品質的 2D 和 3D 圖形，執行效率與影音動畫效果一點都不輸給APP,<br>在不須下載額外的軟件下，只要使用手機瀏覽器開起頁面就可以開始玩。</p>
<blockquote>
<p><strong>WebGL (Web Graphics Library)</strong><br>是基於 OpenGL ES 的 JavaScript API， OpenGL ES 是嵌入式加速 3D<br>圖形標準。能快速完成需要大量計算的複雜渲染著色(render)，透過 JavaScript 就能設定與使用 WebGL API,<br>讓瀏覽器能夠在不使用外掛程式的情況下呈現高效率及高品質的圖形。</p>
</blockquote>
<p>以下兩款 HTML5 遊戲:<br>(1) <a href="https://sumonhtml5.ludei.com/">Sumon</a><br>(2) <a href="http://operasoftware.github.io/Emberwind/">Emberwind</a></p>
</li>
<li><p>操作 HTML5 前端資料儲存<br>HTML5 提供新功能 Web Storage, 包括 sessionStorage 以及 localStogare，<br>可以暫時將資料儲存於網頁瀏覽器，不需要及時存取後端資料庫，等到網路連線時再與後端資料庫同步，如此一來，就能解決<br>Web APP 離線使用的問題。</p>
<p>localStorage: 以 key-value 方式儲存資料，使用者關閉瀏覽器 localStorage 的資料仍然會存在。</p>
<p><strong>例子:</strong><br>下面程式指定 localStorage 的 key 值為  count, 用來記錄瀏覽次數，第一次進入網頁 localStorage.count<br>值指定為 1, 之後更新頁面就會將 localStorgae.count 值 +1。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  localStorage<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token function">Number</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"瀏覽次數:"</span> <span class="token operator">+</span> localStorage<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token string">"次 ."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>Node.js 後端平台<br>Node.js 是一個網站應用程式開發平台，採用 Google 的 V8 引擎，主要使用在 Web 程式開發， Node.js<br>具備內建核心模組並提供模組管理工具 NPM, 安裝  Node.js 時 NPM 也會<br>一併安裝，使用 NPM 指令能下載各種第三方模組來使用，擴充容易。</p>
</li>
<li><p>Console 瀏覽器主控台</p>
<ul>
<li><p><code>console.log();</code><br><strong>例子</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"顯示 5+7"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>F12 進入除錯模式後，直接在 console 下執行指令與 JS 運算。</p>
<img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/javascript-1.png" class="nofancybox img-center">
</li>
<li><p><code>assert(assertiojn, 錯誤訊息);</code><br> assertion 是一種邏輯判斷式，結果只有 True、false，如果是假，則輸出錯誤訊息。<br><strong>例子</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">x <span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"沒有大於10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><code>error(訊息);</code><br>error() 方法只會輸出錯訊息到主控台，刮號內可為字串、物件。</p>
<p><strong>例子</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myObj <span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"aby"</span><span class="token punctuation">,</span> tel<span class="token operator">:</span> <span class="token string">"07-7112345"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><code>clear();</code><br>語法:<br>console.clear();</p>
<p>用來清除主控台上的訊息。執行之後主控台輸出 『Console was cleared』。</p>
</li>
<li><p><code>count();</code><br>語法:<br>console.count(label);</p>
<p>Count() 是顯示呼叫次數，括號內可放要辨識的標籤，不加標籤則以 default 顯示。</p>
<p>例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//輸出  default: 1</span>
console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//輸出  A: 1</span>
console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//輸出  A: 2</span>
console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//輸出  B: 1</span>
console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//輸出  default: 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>group()</code> 與 <code>groupEnd()</code><br>語法:<br>console.group(label); //開始分組<br>console.groupEnd();   //結束分組</p>
<p>Group() 方法主要用來建立分組訊息的開示位置，之後的訊息都會歸類於這一個分組，直到 groupEnd()<br>方法來結束分組。</p>
<p>例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// Hi</span>
console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"A組"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// A組</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Hello</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"這是A組的訊息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 這是A組的訊息</span>
console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"離開分組"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//  離開分組</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>time()</code> 與 <code>timeEnd()</code><br>語法:<br>console.time(label);      //開始計時<br>console.timeEnd(label);   //結束計時</p>
<p>time() 方法主要用來計算計算程式執行的時間長度，單位是毫秒(ms),如果有多個程式需要計時，可以在<br>括號內加上標籤。</p>
<p>例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"for loop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 開始計時</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"for loop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 結束計時</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
</li>
</ol>
<h2 id="JavaScript-基礎語法"><a href="#JavaScript-基礎語法" class="headerlink" title="JavaScript 基礎語法"></a>JavaScript 基礎語法</h2><h3 id="註解符號"><a href="#註解符號" class="headerlink" title="註解符號"></a>註解符號</h3><ol>
<li>單行註解用 (<strong>//</strong>)</li>
<li>多行註解用 (/<em>..註解..</em>/)</li>
</ol>
<h3 id="變數宣告與資料型別"><a href="#變數宣告與資料型別" class="headerlink" title="變數宣告與資料型別"></a>變數宣告與資料型別</h3><h4 id="資料型別"><a href="#資料型別" class="headerlink" title="資料型別"></a>資料型別</h4><ul>
<li><p>number(數值)<br>整數或帶有小數點的浮點數，JavaScript 採用 IEEE 754 雙精確度(64位元) 格式來儲存，IEEE 754<br>標準的浮點數並不能精確的表示小數，所以在做小數點運算時必須小心，例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述的值並不會等於 0.3, 而是 0.30000000000000004。<br>所有使用 IEEE 754 標準實作浮點數，都會有此問題，因為電腦只認識 0 跟 1,再將十進位轉成二進位制計算時產生的精確度誤差，大多數的程式語言都已經針對精確度問題做處理，但JS則必須手動排除這問題，下面有兩方法解決:</p>
<ol>
<li><p>將數值比例放大，變成浮點數，運算之後再除以放大的倍數。<br>例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>使用內建的 toFixed() 函數，強制取道小數點的指定位數。<br>例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
<li><p>string(字串)</p>
<ul>
<li><p>字串由0個或0個義上的字元結合而成，用一對雙引號或單引號框住字元，字串內可不輸入字元，稱為空字串。</p>
</li>
<li><p>字串屬原生型別，原生型別不是物件，所以沒有任的屬性，為了方便使用，可以把原生型別當物件使用，JS<br>引擎會自動轉型成對應的物件型別，這樣就可以使用物件的屬性(null、undefine 除外)。例如:</p>
</li>
<li><p>JS 不支援單一字元的函數，例如: VB 或 C++ 語言的 ‘chr()’ 函數，只能使用單一字元的字串，例如 “J”、’c’，若連一個字元都沒有, “” 就是空字串。</p>
</li>
<li><p>length 是字串物件的屬性，用來得知字串的長度。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> mystring <span class="token operator">=</span> <span class="token string">"Hello, !"</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>mystring<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>逸出字元:</p>
<table>
<thead>
<tr>
<th>Escape 逸出字元</th>
<th align="left">說明</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td>\b</td>
<td align="left">Backspace</td>
<td align="left">倒退</td>
</tr>
<tr>
<td>\f</td>
<td align="left">FF</td>
<td align="left">Form Feed(換頁)</td>
</tr>
<tr>
<td>\n</td>
<td align="left">LF</td>
<td align="left">Line Feed(換行)</td>
</tr>
<tr>
<td>\r</td>
<td align="left">CR</td>
<td align="left">Enter鍵，游標回行首</td>
</tr>
<tr>
<td>\t</td>
<td align="left">Tab 鍵</td>
<td align="left">水平定位</td>
</tr>
<tr>
<td>'</td>
<td align="left">「’」符號</td>
<td align="left">單引號</td>
</tr>
<tr>
<td>"</td>
<td align="left">「”」符號</td>
<td align="left">雙引號</td>
</tr>
<tr>
<td>\</td>
<td align="left">「\」符號</td>
<td align="left">反斜線</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>boolean(布林)<br>只有兩種值，true(1) 跟 false(0)。 任何值都可以被轉換成不林值。</p>
<ol>
<li><p>false、0、空字串、NaN、null、undefined 都會轉成 false。</p>
</li>
<li><p>其他的值都會成為 true。</p>
</li>
<li><p>可以用 Boolean() 函數來將值轉換成布林值，例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
<li><p>object(物件)<br>除了原型型別(number、string、boolean、undefined)，其他可以歸類到物件型別(Object)，像是<br>function、Object、Array、Date等。例如:<br>{age: ‘17’}  物件<br>[1,2,3]      陣列<br>function(){} 函數<br>new Data()   日期</p>
</li>
<li><p>array(陣列)</p>
</li>
<li><p>null(空值)<br>若想要將某個變數的值清除，就可以指定該變數的值為 null。 例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
x <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>關於 undefined、null、NaN、infinity</strong></p>
<ol>
<li><p>null 與 undefined 同屬原生型別，使用 typeof() 來查詢型別時:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 得到 Object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>是用運算子(==)  比較 null 與 undefined 會得到 true。<br>但是用運算子(===) 比較 null 與 undefined 會得到 false。</p>
<p>其實 null 不是 object(物件)，ECMAScript 曾想修護該 Bug,但考慮程式兼容，typeof(null) 仍會是 Object。</p>
</li>
<li><p>NaN 表示無效的數字，會傳回 NaN 的兩狀況:</p>
<ul>
<li><p>進行運算時的運算元資料型別無法轉換為數字，如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>Number() 是將物件轉為數值的函數，由於 x 是字串，無法轉為數字，因此印出y時就會顯示 NaN。</p>
</li>
<li><p>無意義的運算，如: 0/0</p>
<p>可以利用 isNan() 函數來檢查是否為 NaN，例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>Infinity 是數學的無限大，非 0 的數字除上0, 結果都是 infinity，例如:<br>1/0 會傳會 Infinity、 -1/0 會傳回 -Infinity。<br>利用 isFinity() 可以檢查是否為有限數字，例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>JavaScipt 數值資料型態擁有一些特殊值的字串，通常是出現在數值資料型態發生錯誤:</p>
<table>
<thead>
<tr>
<th align="left">數值的特殊值字串</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">NaN</td>
<td align="left">Not a number,當算術運算式的運算結果是不正確資料時，如: 字串或 Undefined</td>
</tr>
<tr>
<td align="left">Positive Infinity</td>
<td align="left">數值太大超過正數值的範圍</td>
</tr>
<tr>
<td align="left">Negative Infinity</td>
<td align="left">數值太大超過負數值的範圍</td>
</tr>
<tr>
<td align="left">Positive and Negative 0</td>
<td align="left">JavaScript用來區分+0和-0</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
<li><p>Undifined(未定義)<br>指變數沒有宣告，或者是有宣告變數，但尚未指定變數的值。例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>可以使用 typeof 關鍵字來判斷變數型態是否為 undefined。 例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>三個等號(===) 是嚴格相等，用來比較兩邊是否相等。</p>
</blockquote>
</li>
<li><p>Symbol(符號)<br>Symbol 是 ES6(ECMAScript 6) 新定義的原生資料型態，Symbol 類型的值透過 Symbol() 函數來產生，Symbol() 函數有一個 description 屬性，用來定義 Symbol 的名稱，傳回的值是唯一的識別值。例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>x<span class="token operator">===</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>由於 Symbol() 每次傳回的符號值都是唯一的，因此 x 與 y 比較是否相等就會傳回 false(否)。</p>
</blockquote>
</li>
</ul>
<h4 id="變數宣告"><a href="#變數宣告" class="headerlink" title="變數宣告"></a>變數宣告</h4><p>JavaScript 會在變數宣告與使用動態配置記憶體，並且具有回收記憶體的機制(garbage collection, 簡稱GC)，但GC 機制無法由JavaScript 程式來控制，而是一段時間自動尋找不需要的物件，釋放記憶體。以變數來說，當記憶體的作用範圍結束，就不需要使用了，這時GC 就會將記憶體釋放。</p>
<h5 id="變數宣告的方式"><a href="#變數宣告的方式" class="headerlink" title="變數宣告的方式"></a>變數宣告的方式</h5><ul>
<li><p>宣告變數</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>宣告多個變數</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name<span class="token punctuation">,</span> score<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>宣告變數並初始化</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">"Eileen"</span><span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> flag<span class="token operator">=</span><span class="token string">"true"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>變數宣告時並不需要加上型別，JavaScript 會視需求自動轉換變數型態，例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> thisValue<span class="token punctuation">;</span>
thisValue <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment">//變數 thisValue 的內容為數值 123</span>
thisValue <span class="token operator">=</span><span class="token string">"Hello"</span><span class="token punctuation">;</span> <span class="token comment">//變數 thisValue 的內容為字串 Hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>底下幾種數值與字串轉換的情況，需特別注意:<br>(1). JavaScript 允許字串相加，當字串內容為數值時，使用 + 號相連接，運算結果，仍然為字串。<br>(2). 當字串內容為數值，使用減、乘、除號相連接，運算結果為數值。<br>(3). null 乘以任何數值皆為零。</p>
</blockquote>
<p>範例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">var</span> x<span class="token operator">=</span><span class="token string">"5"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"3"</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">,</span> w<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token operator">+</span>z<span class="token punctuation">;</span>  <span class="token comment">//字串內容為數值時，相加仍是字串。 531</span>
b<span class="token operator">=</span>x<span class="token operator">-</span>y<span class="token operator">-</span>z<span class="token punctuation">;</span>    <span class="token comment">//字串內容為數值時，相減為數值。  1</span>
c <span class="token operator">=</span> w <span class="token operator">*</span> <span class="token number">55</span><span class="token punctuation">;</span> <span class="token comment">//變數值為null,乘以任何數值為零。 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x+y+z="</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x-y-z="</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"w*55"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 var、let(ES6 新增)、const(ES6 新增) 定義變數。</p>
</li>
</ul>
<h5 id="變數名稱的限制"><a href="#變數名稱的限制" class="headerlink" title="變數名稱的限制"></a>變數名稱的限制</h5><p>JavaScript 雖然是較寬鬆的語法，不過變數名稱還是有些規則是必須遵守的:</p>
<ol>
<li><p>第一個字母須是字母(大小寫均可)或是底線，之後的字元可以是數字、字母或底線。</p>
</li>
<li><p>區分大小寫，<code>var ABC</code> 並不等於 <code>var abc</code>。</p>
</li>
<li><p>變數名稱不能用  javaScript<br>的保留字，所謂保留字是指程式開發時已定義好的詞庫，每一識別字都有特別的意義，所以程式設計者不可以重複賦予不同的用途。</p>
<table>
<thead>
<tr>
<th>abstract</th>
<th align="center">boolean</th>
<th align="right">break</th>
<th align="center">bye</th>
<th align="center">case</th>
</tr>
</thead>
<tbody><tr>
<td>catch</td>
<td align="center">char</td>
<td align="right">class</td>
<td align="center">const</td>
<td align="center">continue</td>
</tr>
<tr>
<td>default</td>
<td align="center">do</td>
<td align="right">double</td>
<td align="center">else</td>
<td align="center">extends</td>
</tr>
<tr>
<td>false</td>
<td align="center">final</td>
<td align="right">finally</td>
<td align="center">float</td>
<td align="center">for</td>
</tr>
<tr>
<td>function</td>
<td align="center">goto</td>
<td align="right">if</td>
<td align="center">implements</td>
<td align="center">import</td>
</tr>
<tr>
<td>in</td>
<td align="center">instanceof</td>
<td align="right">int</td>
<td align="center">interface</td>
<td align="center">long</td>
</tr>
<tr>
<td>native</td>
<td align="center">new</td>
<td align="right">null</td>
<td align="center">package</td>
<td align="center">private</td>
</tr>
<tr>
<td>protected</td>
<td align="center">public</td>
<td align="right">return</td>
<td align="center">short</td>
<td align="center">static</td>
</tr>
<tr>
<td>super</td>
<td align="center">switch</td>
<td align="right">synchronized</td>
<td align="center">this</td>
<td align="center">throw</td>
</tr>
<tr>
<td>throws</td>
<td align="center">transient</td>
<td align="right">true</td>
<td align="center">try</td>
<td align="center">var</td>
</tr>
<tr>
<td>void</td>
<td align="center">while</td>
<td align="right">with</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="資料型態的轉換"><a href="#資料型態的轉換" class="headerlink" title="資料型態的轉換"></a>資料型態的轉換</h3><h4 id="資料型態強制轉換"><a href="#資料型態強制轉換" class="headerlink" title="資料型態強制轉換"></a>資料型態強制轉換</h4><ul>
<li><p>因為 JavaScript 是一種鬆散型態的程式語言，所謂變數的資料型態是指變數值的資料型態。</p>
</li>
<li><p>JavaScript 具有自動轉換資料型別的特性，是優點(撰寫程式更靈活有彈性)也是缺點(造成困惱)，例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> y<span class="token operator">=</span><span class="token string">'5'</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> z <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x+y="</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 35</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>依照前面所提， 上式 JS 相加為兩變數做相串，可以判斷得到 z = “35”。</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">billing</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> z <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
  <span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">billing</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>結果</strong>: 35<br>上述 <code>billing(x,y)</code> 乃一計費的程式，若沒注意輸入資料型別，得到的值將很離譜。例如: <code>billing(3,'5')</code>。</p>
<blockquote>
<p>為避免諸如此類問題，可以先檢查傳入的引數是否為數字，例如:</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">billing</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"number"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> z <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
    <span class="token keyword">return</span> z<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token function">billing</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="資料型態的轉換函式-內建強制轉換型別"><a href="#資料型態的轉換函式-內建強制轉換型別" class="headerlink" title="資料型態的轉換函式(內建強制轉換型別)"></a>資料型態的轉換函式(內建強制轉換型別)</h4><ul>
<li><p>parseInt(): 將字串轉為整數</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//  a = 32</span>
b <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"55.87"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//  a = 55</span>
c <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"3天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//  c = 3</span>
d <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"page 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  d = NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>parseFloat: 將字串轉為浮點數</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"35.345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 35.345</span>
b <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"55.87"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// b = 55.87</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>Number(): 將物件或字串轉為數值</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"10a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//  a=NaN</span>
b <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"11.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//  b = 11.5</span>
c <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//  c = 1</span>
d <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//  d = 1553671784021(傳回1970/1/1至今的毫秒數)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><font color="red">Date 物件</font>是以世界標準時間(UTC)1970年1月1日的毫秒數值來儲存時間，因此使用<br> Number()將  Date 物件轉換為數值就會得到 1970年1月1日到程式執行當下的時間。</p>
</blockquote>
</li>
<li><p>eval()<br>將運算式的字串參數當作運算式，函數可以傳回運算式的計算結果。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"20 + 4 * 5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//  40   算數運算式</span>
  <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"intBalance = 1000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  1000 指定敘述</span>
  <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"5&gt;4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//  true 邏輯或比較運算式</span>

#### 變數作用範圍

變數依照<span class="token operator">**</span>作用範圍<span class="token operator">**</span>分為全域變數與區域變數。
區域變數乃指變數只能存活在一個特定區域範圍，像是一個函數，該變數只能在函數內使用，但全域變數是存活在整個程式，

<span class="token number">1.</span> 使用 <span class="token keyword">var</span> 宣告變數<span class="token operator">:</span> <span class="token function">變數的可用範圍</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span> 以<span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">'red'</span><span class="token operator">&gt;</span>函式區塊<span class="token operator">&lt;</span><span class="token operator">/</span>font<span class="token operator">&gt;</span>為分界線，及函數外用 <span class="token keyword">var</span> 宣告的變數都是全域變數。

   舉例<span class="token operator">:</span>

   <span class="token operator">-</span> Case1<span class="token operator">:</span> 沒有函數，所以全部範圍都屬於同一個 scope，<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 外面與裡面的i 指同一個i。

     <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`javascript
     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//印出 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>Case2: for() 裡面的 i 在函式內，整個函式是一個scope，外面部分的 console.log(i) 又屬於另一個 scope。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;font color='red'&gt;錯誤，找不到變數 i &lt;/font&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p>使用 <code>let</code> 宣告變數: 變數的可用範圍(scope) <font color="red">以程式區塊(即大括號)</font>為分界線。</p>
<blockquote>
<p>for ()<font color="red">{}</font>,與 if ()<font color="red">{}</font>、 function test<font color="red">{}</font> 都算。</p>
</blockquote>
<ul>
<li><p>Case1: or(){} 是一個 scope，外面的 console.log(i) 又是另一個 scope。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//錯誤，找不到變數i</span>
  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  

- Case2: </span><span class="token template-punctuation string">`</span></span><span class="token keyword">let</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 是一個更嚴格 scope 的概念，包括 </span><span class="token template-punctuation string">`</span></span><span class="token keyword">function</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">、</span><span class="token template-punctuation string">`</span></span><span class="token keyword">for</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">、</span><span class="token template-punctuation string">`</span></span><span class="token keyword">if</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 都是一個獨立的 scope。

  </span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>javascript
  <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//錯誤，找不到變數i</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>使用 <code>const</code> 宣告常數: 常數的資料 <font color="red">不能變動</font>。</p>
<p>例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> v<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
v <span class="token operator">=</span> <span class="token string">"Hello World "</span><span class="token punctuation">;</span> <span class="token comment">// 變數中的資料可變動</span>

<span class="token keyword">let</span> i<span class="token punctuation">;</span>              <span class="token comment">//宣告變數，可以暫時不給資料</span>
i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment">//變數中的資料可變動</span>

<span class="token keyword">const</span> x<span class="token punctuation">;</span>            <span class="token comment">//錯誤:常數宣告時，一定要給資料</span>

<span class="token keyword">const</span> c<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment">//正確，宣告常數，同時給定資料</span>
c<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span>               <span class="token comment">//錯誤:不能更動常數中的資料</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h4 id="變數存在與否"><a href="#變數存在與否" class="headerlink" title="變數存在與否"></a>變數存在與否</h4><ul>
<li><p>使用 if(變數名稱) 判斷變數存在與否。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>strName<span class="token punctuation">)</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'strName 存在'</span> <span class="token operator">+</span> <span class="token string">"&lt;br /&gt;"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'strName 不存在'</span> <span class="token operator">+</span> <span class="token string">"&lt;br /&gt;"</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用 windows 物件的屬性。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>strName<span class="token punctuation">)</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'strName 存在'</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>strName <span class="token operator">+</span> <span class="token string">"&lt;br /&gt;"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'strName 不存在'</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>strName <span class="token operator">+</span> <span class="token string">"&lt;br /&gt;"</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>範例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 變數宣告</span>
<span class="token keyword">var</span> strName <span class="token operator">=</span> <span class="token string">"陳會安"</span><span class="token punctuation">;</span>
<span class="token comment">// 檢查變數是否存在</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>strName<span class="token punctuation">)</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"strName存在:"</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>strName <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"strName不存在:"</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>strName <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 一個不存在的變數</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>intBalance<span class="token punctuation">)</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"intBalance存在:"</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>intBalance <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"intBalance不存在:"</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>intBalance <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<blockquote>
<p>上述 if 條件不論變數是否宣告，都可以檢查變數是否存在，不過，此 if 條件的程式碼並不適用<strong>布林資料</strong>型態的變數檢查。</p>
</blockquote>
<h3 id="運算式與運算子"><a href="#運算式與運算子" class="headerlink" title="運算式與運算子"></a>運算式與運算子</h3><h4 id="運算式"><a href="#運算式" class="headerlink" title="運算式"></a>運算式</h4><p>運算子和運算元的組合稱為運算式。例如: 1+2=3, 其中的『+』 是運算子，1和2是運算元。</p>
<p><strong>JavaScript 運算式分四種如下</strong>:</p>
<ul>
<li><p>指定運算式<br>如: =、+=、-=、*=、/=、%=..等。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>算術運算式<br>由常數、變數、函式、括號、運算子(+、-、*、/、)所組成的式子。例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token operator">+</span>b<span class="token punctuation">;</span>
a<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
a<span class="token operator">-</span><span class="token number">8</span><span class="token operator">*</span>b<span class="token operator">/</span>c<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>字串運算式<br>兩個以上的字串利用『+』號可以組合成一個新的字串，例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"Hello!!"</span> <span class="token operator">+</span> <span class="token string">"World "</span><span class="token punctuation">;</span> <span class="token comment">//輸出結果: "Hello!!World"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>若運算式中同時含有數值與字串，則數值會自動轉換為字串。例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token string">"我今年"</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">" 歲"</span><span class="token punctuation">;</span> 
d<span class="token operator">=</span> a<span class="token operator">+</span> b <span class="token operator">+</span>c<span class="token punctuation">;</span> <span class="token comment">//輸出結果 d= 我今年18 歲</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>布林運算式<br>布林運算式通常搭配邏輯運算子(&amp;&amp;)來比較兩個運算式(expression)，寫法如下:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">x<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
y<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>x<span class="token operator">&gt;</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y<span class="token operator">&gt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//輸出結果: false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="運算子"><a href="#運算子" class="headerlink" title="運算子"></a>運算子</h4><ul>
<li><p>指定運算子<br>將指定運算子右方的值指定給左方的變數，最常用的就是等號(=)。</p>
<table>
<thead>
<tr>
<th align="left">指定運算子</th>
<th align="left">範例</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">=</td>
<td align="left">a=b</td>
<td align="left">將 b 的值指定給 a</td>
</tr>
<tr>
<td align="left">+=</td>
<td align="left">a+=b</td>
<td align="left">a = a+b</td>
</tr>
<tr>
<td align="left">-=</td>
<td align="left">a-=b</td>
<td align="left">a = a-b</td>
</tr>
<tr>
<td align="left">*=</td>
<td align="left">a*=b</td>
<td align="left">a = a*b</td>
</tr>
<tr>
<td align="left">/=</td>
<td align="left">a/=b</td>
<td align="left">a = a/b</td>
</tr>
<tr>
<td align="left">%=</td>
<td align="left">a%=b</td>
<td align="left">a = a%b  (% 為取餘數)</td>
</tr>
</tbody></table>
</li>
<li><p>算術運算子<br>算術運算子就是一些基本的四則運匴，包括加、減、乘、除、以及取餘數等等。為了讓運算式更精簡，運算常用到的增量運算，例如:<br>a=a+1； 可以用 a++ 來表示，下表為常用的算術運算子:</p>
<table>
<thead>
<tr>
<th align="left">算術運算子</th>
<th align="left">範例</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">+</td>
<td align="left">a=b+c</td>
<td align="left">加</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">a=b-c</td>
<td align="left">減</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">a=b*c</td>
<td align="left">乘</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">a=b/c</td>
<td align="left">除</td>
</tr>
<tr>
<td align="left">%</td>
<td align="left">a=b%c</td>
<td align="left">取餘數</td>
</tr>
<tr>
<td align="left">++</td>
<td align="left">a++</td>
<td align="left">相當於 a=a+1</td>
</tr>
<tr>
<td align="left">–</td>
<td align="left">a–</td>
<td align="left">相當於 a=a-1</td>
</tr>
<tr>
<td align="left">++a</td>
<td align="left"></td>
<td align="left">運算前增量</td>
</tr>
<tr>
<td align="left">a++</td>
<td align="left"></td>
<td align="left">運算後增量</td>
</tr>
<tr>
<td align="left">–a</td>
<td align="left"></td>
<td align="left">運算前減量</td>
</tr>
<tr>
<td align="left">a–</td>
<td align="left"></td>
<td align="left">運算後減量</td>
</tr>
</tbody></table>
</li>
<li><p>比較運算子<br>比較運算子通常用於比較兩個運算元或運算式之間的大小關係，當關係成立時結果為true(1)，關係不成立時則未false(0)，下表詳列常用的比較運算子。</p>
<table>
<thead>
<tr>
<th align="left">比較運算子</th>
<th align="left">範例</th>
<th align="left">結果a=5</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">==</td>
<td align="left">a == 10</td>
<td align="left">false</td>
<td align="left">等於</td>
</tr>
<tr>
<td align="left">!=</td>
<td align="left">a != 10</td>
<td align="left">false</td>
<td align="left">不等於</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">a  &gt; 10</td>
<td align="left">false</td>
<td align="left">大於</td>
</tr>
<tr>
<td align="left">&gt;=</td>
<td align="left">a &gt;= 10</td>
<td align="left">false</td>
<td align="left">大於或等於</td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">a &lt;  10</td>
<td align="left">true</td>
<td align="left">小於</td>
</tr>
<tr>
<td align="left">&lt;=</td>
<td align="left">a &lt;= 10</td>
<td align="left">false</td>
<td align="left">小於或等於</td>
</tr>
</tbody></table>
</li>
<li><p>邏輯運算子<br>邏輯運算子多數用來檢查條件是否符合，下表詳列常用的邏輯運算子。</p>
<table>
<thead>
<tr>
<th align="left">邏輯運算子</th>
<th align="left">範例</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;&amp;</td>
<td align="left">a &amp;&amp; b</td>
<td align="left">and(只有a與b兩方都為真，結果才為真)</td>
</tr>
<tr>
<td align="left">||</td>
<td align="left">a || b</td>
<td align="left">or(只要a與b一方為真，結果就為真)</td>
</tr>
<tr>
<td align="left">!</td>
<td align="left">!a</td>
<td align="left">Not(只要不符合a者，皆為真)</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="運算子優先順序"><a href="#運算子優先順序" class="headerlink" title="運算子優先順序"></a>運算子優先順序</h4><ul>
<li><p>當程式執行時，擁有較高優先順序的運算子會在擁有較低的運算子之前執行。例如，乘法會比加法先被執行。</p>
<p>下表列出 JavaScript 運算子的優先順序，由高優先順位排到最低順位。</p>
<table>
<thead>
<tr>
<th align="left">功能</th>
<th align="left">運算子</th>
</tr>
</thead>
<tbody><tr>
<td align="left">刮號</td>
<td align="left">[]、()</td>
</tr>
<tr>
<td align="left">變數、增量、減量</td>
<td align="left">++、–、~</td>
</tr>
<tr>
<td align="left">乘除法</td>
<td align="left">*、/、%</td>
</tr>
<tr>
<td align="left">加減法</td>
<td align="left">+、-</td>
</tr>
<tr>
<td align="left">位移</td>
<td align="left">&lt;&lt;、&gt;&gt;</td>
</tr>
<tr>
<td align="left">比較</td>
<td align="left">&lt;、&lt;=、&gt;、&gt;=</td>
</tr>
<tr>
<td align="left">等值、不等值</td>
<td align="left">==、!=</td>
</tr>
<tr>
<td align="left">位元邏輯</td>
<td align="left">&amp;</td>
</tr>
<tr>
<td align="left">位元互斥邏輯</td>
<td align="left">^</td>
</tr>
<tr>
<td align="left">位元邏輯</td>
<td align="left">|</td>
</tr>
<tr>
<td align="left">且</td>
<td align="left">&amp;&amp;</td>
</tr>
<tr>
<td align="left">或</td>
<td align="left">||</td>
</tr>
<tr>
<td align="left">三項運算子</td>
<td align="left">?:</td>
</tr>
<tr>
<td align="left">算數</td>
<td align="left">=</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="程式控制結構"><a href="#程式控制結構" class="headerlink" title="程式控制結構"></a>程式控制結構</h2><p>結構化程式設計一定包含循序、選擇、重覆三種結構，分別敘述如下:</p>
<h3 id="1-循序"><a href="#1-循序" class="headerlink" title="1. 循序"></a>1. 循序</h3><p>程式循序的，由上至下執行。</p>
<h3 id="2-選擇"><a href="#2-選擇" class="headerlink" title="2. 選擇"></a>2. 選擇</h3><h4 id="2-1-單選"><a href="#2-1-單選" class="headerlink" title="2.1 單選"></a>2.1 單選</h4><ul>
<li><p>if(條件式) else</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span> score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'及格'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h4 id="2-2-複選"><a href="#2-2-複選" class="headerlink" title="2.2 複選"></a>2.2 複選</h4><ul>
<li><p>if(條件式)…else</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span> score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'及格'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不及格'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h4 id="2-3-多選"><a href="#2-3-多選" class="headerlink" title="2.3 多選"></a>2.3 多選</h4><ul>
<li><p>if(條件式)…else if(條件式)…else if(條件式)…else</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"input a number: 1 - 100"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
<span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span>                                              
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"優等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span>                               
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"甲等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;=</span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span>                               
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"乙等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> <span class="token number">70</span><span class="token punctuation">)</span>                               
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"丙等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  
<span class="token keyword">else</span>                                                      
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>2 個以上條件以上，須注意:<br>  比大於時，順序要  大 → 小。<br>  比小於時，順序要  小 → 大。</p>
</blockquote>
</li>
<li><p>switch…case</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">       
<span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"input a number: 1 - 100"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token punctuation">(</span>z <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token operator">:</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"優等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token punctuation">(</span>z <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> z <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token operator">:</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"甲等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token punctuation">(</span>z <span class="token operator">&gt;=</span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> z <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token operator">:</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"乙等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token punctuation">(</span>z <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> z <span class="token operator">&lt;</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token operator">:</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"丙等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>針對某一值的處理用  SWITCH(),  比大小通常用 if 來判斷處理。</p>
</blockquote>
</li>
</ul>
<h3 id="3-重覆"><a href="#3-重覆" class="headerlink" title="3. 重覆"></a>3. 重覆</h3><ul>
<li><p>for</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">let</span> i<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"整數: "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    intSum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token keyword">for</span><span class="token operator">/</span><span class="token keyword">in</span>    主要是在顯示物件的所有屬性

  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">js  
  for (prop in objAddress) {
    document.write("屬性: " + prop + "=" + objAddress[prop] + "&lt;br/&gt;");
  }

- while(條件){敘述 ...}       **前測迴圈**

  </span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>js
  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"整數: "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    intSum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token keyword">do</span><span class="token punctuation">{</span> 敘述 <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>條件<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">**</span>後測迴圈<span class="token operator">**</span>

<span class="token operator">-</span> <span class="token keyword">break</span> <span class="token operator">&amp;</span> <span class="token keyword">continue</span>
  <span class="token operator">-</span> <span class="token keyword">break</span>
    當某些條件成立時，強迫終止迴圈的執行，如同 <span class="token keyword">switch</span> 條件使用 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">break</span><span class="token template-punctuation string">`</span></span> 關鍵字跳出程式區塊。

    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`js
    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> number <span class="token operator">==</span> target<span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>continue<br>可以馬上繼續下一次迴圈的執行，不過，它並不會執行程式區塊中位在 <code>continue</code> 關鍵字之後的程式碼，如果使用 for 或 for/in 迴圈，一樣也會自動更新計數器變數。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">"太小&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">continue</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>範例</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 變數宣告</span>
<span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 無窮迴圈</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
    number <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"輸入數字"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 離開無窮迴圈</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> number <span class="token operator">==</span> target<span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// 判斷是太大或太小</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">"太大!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        times<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">"太小!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            times<span class="token operator">++</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>          
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"不猜了! 答案為: "</span> <span class="token operator">+</span> target <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"猜對了! 答案為: "</span> <span class="token operator">+</span> target <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"共猜了: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>times<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"次&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
</li>
</ul>
<h3 id="4-JavaScript-的雀狀迴圈"><a href="#4-JavaScript-的雀狀迴圈" class="headerlink" title="4. JavaScript 的雀狀迴圈"></a>4. JavaScript 的雀狀迴圈</h3><ul>
<li><p>指迴圈中在擁有其它迴圈。例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
  j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span>
    j<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>範例</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;table border='1'&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 變數宣告</span>
<span class="token keyword">var</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
<span class="token comment">// 表格的標題列</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;tr&gt;&lt;td&gt;&lt;/td&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;td&gt;&lt;b&gt;"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"&lt;/b&gt;&lt;/td&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;tr&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 巢狀迴圈</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;tr&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;td&gt;&lt;b&gt;"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"&lt;/b&gt;&lt;/td&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 內層迴圈</span>
     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;td&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/td&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     j<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/tr&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/table&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="JavaScript-函數與物件"><a href="#JavaScript-函數與物件" class="headerlink" title="JavaScript 函數與物件"></a>JavaScript 函數與物件</h2><h3 id="1-JavaScript-的函數"><a href="#1-JavaScript-的函數" class="headerlink" title="1. JavaScript 的函數"></a>1. JavaScript 的函數</h3><ul>
<li>事實上，JavaScript 資料型態都是一種物件，函數也是，而且函數可以視為一種 JavaScript 的「全域方法」。</li>
<li>函式無傳回值時, 稱為 「程序」。</li>
<li>「函數呼叫」: 指 JS 中執行函數。</li>
</ul>
<h4 id="1-1-JavaScript-的內建函數"><a href="#1-1-JavaScript-的內建函數" class="headerlink" title="1.1 JavaScript 的內建函數"></a>1.1 JavaScript 的內建函數</h4><ul>
<li><p>escape()</p>
<ul>
<li>使用 URL 編碼傳入的參數字串，可以傳回加碼後的字串。</li>
<li>字串編碼, 返回以 ISO Latin 字元集來表示參數的16進制編碼。</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">strMsg <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span>
strURLcode <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>strMsg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>unescape()</p>
<ul>
<li>解碼參數的 URL 編碼字串，可以傳回還原成編碼前的原始字串。</li>
<li>字串解碼, 把指定的16進制編碼值返回一個ASCII 字串。</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">strOriginal  <span class="token operator">=</span> <span class="token function">unescape</span><span class="token punctuation">(</span>strURLcode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p>範例</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 變數宣告</span>
<span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"JavaScript+jQuery+Node.js網頁設計"</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> strURLcode<span class="token punctuation">,</span> strOriginal<span class="token punctuation">;</span>
strURLcode <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>strMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 進行加碼</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"原始字串 : "</span> <span class="token operator">+</span> strMsg <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"URL編碼 : "</span> <span class="token operator">+</span> strURLcode <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
strOriginal <span class="token operator">=</span> <span class="token function">unescape</span><span class="token punctuation">(</span>strURLcode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 還原字串</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"還原的字串 : "</span> <span class="token operator">+</span> strOriginal <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>isNaN()<br>檢查其參數是否是非數值, 若為非數字回傳 true。</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h4 id="1-2-JavaScript-的自訂函數"><a href="#1-2-JavaScript-的自訂函數" class="headerlink" title="1.2 JavaScript 的自訂函數"></a>1.2 JavaScript 的自訂函數</h4><p>JavaScript 函數是由 function 關鍵字、函數名稱和程式區塊組成，</p>
<h5 id="1-2-1-沒有參數的-JavaScript"><a href="#1-2-1-沒有參數的-JavaScript" class="headerlink" title="1.2.1 沒有參數的 JavaScript"></a>1.2.1 沒有參數的 JavaScript</h5><ul>
<li><p>格式  </p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函數名稱</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  JavaScript 敘述
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>範例</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
 <span class="token keyword">function</span> <span class="token function">writeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"歡迎使用JavaScript!&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>使用函數顯示文件內容<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
 <span class="token comment">// 呼叫函數</span>
 <span class="token function">writeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h5 id="1-2-2-有參數的-JavaScript"><a href="#1-2-2-有參數的-JavaScript" class="headerlink" title="1.2.2 有參數的 JavaScript"></a>1.2.2 有參數的 JavaScript</h5><ul>
<li><p>格式  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函數名稱</span><span class="token punctuation">(</span><span class="token parameter">傳入參數<span class="token number">1</span><span class="token punctuation">,</span> 傳入參數<span class="token number">2</span><span class="token punctuation">,</span> …</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  JavaScript 敘述
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>範例</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
 <span class="token keyword">function</span> <span class="token function">writeNString</span><span class="token punctuation">(</span><span class="token parameter">strMsg<span class="token punctuation">,</span> intnumber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>intnumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>strMsg <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>使用函數參數顯示網頁內容<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 呼叫函數</span>
<span class="token function">writeNString</span><span class="token punctuation">(</span><span class="token string">"JavaScript網頁程式設計"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h5 id="1-2-3-JavaScript-函數的傳回值"><a href="#1-2-3-JavaScript-函數的傳回值" class="headerlink" title="1.2.3 JavaScript 函數的傳回值"></a>1.2.3 JavaScript 函數的傳回值</h5><ul>
<li><p>格式  </p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函數名稱</span><span class="token punctuation">(</span><span class="token parameter">傳入參數<span class="token number">1</span><span class="token punctuation">,</span> 傳入參數<span class="token number">2</span><span class="token punctuation">,</span> …</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  JavaScript 敘述
  <span class="token keyword">return</span> 傳回值
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>範例</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
 <span class="token comment">// 加到N的總和</span>
 <span class="token keyword">function</span> <span class="token function">sumToN</span><span class="token punctuation">(</span><span class="token parameter">intNumber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> intSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>intNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    intSum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> intSum<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>函數的傳回值<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
 <span class="token keyword">var</span> intSum <span class="token operator">=</span> <span class="token function">sumToN</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"1加到10的值 : "</span> <span class="token operator">+</span> intSum <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h5 id="1-2-4-JavaScript-函數的傳值或傳址參數"><a href="#1-2-4-JavaScript-函數的傳值或傳址參數" class="headerlink" title="1.2.4 JavaScript 函數的傳值或傳址參數"></a>1.2.4 JavaScript 函數的傳值或傳址參數</h5><ul>
<li><p>傳值: 將變數值傳入函數，函數會另外配置記憶體空間來儲存參數值，所以不會變更原始的變數值</p>
</li>
<li><p>傳址: 將變數實際儲存的記憶體位址傳入，如果在函數中變更參數值，也會同時變動原始的變數值</p>
<br>
依據不同資料型態擁有不同的預設傳遞方式（比較操作指的是2個不同資料型態變數之間的比較）

<table>
<thead>
<tr>
<th align="left">資料型態</th>
<th align="left">方式</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">數值, 字串和布林</td>
<td align="left">傳值</td>
<td align="left">參數傳遞和比較操作都是使用傳值方式</td>
</tr>
<tr>
<td align="left">物件, 陣列和函數</td>
<td align="left">傳址</td>
<td align="left">參數傳遞和比較操作都是使用傳址方式</td>
</tr>
<tr>
<td align="left">字串物件</td>
<td align="left">傳址</td>
<td align="left">參數傳遞和比較操作都是使用傳址方式</td>
</tr>
</tbody></table>
<blockquote>
<p>注意! 上表的<strong>字串資料型態</strong>和<strong>字串物件</strong>不同，字串資料型態是宣告變數且指定變數值為字串，如下所示:</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"張振三"</span><span class="token punctuation">;</span>  <span class="token comment">//字串</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>若是字串物件需要使用 new 運算子建立物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obja <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"張振三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//字串物件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>兩個字串物件 obja 進行比較時，使用的是<strong>傳址</strong>方式，如下所示: 雖然字串物件的內容相同，但是其比較結果仍能然為 false。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> objb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"張振三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字串物件</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obja <span class="token operator">==</span> objb<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br /&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 比較結果為 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果比較時任一變數為<strong>字串資料型態</strong>，使用的就是<strong>傳值</strong>方式，如下所示: 其比較結果為 true。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">==</span>obja<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br /&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 比較結果為 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼比較前面的字串變數 a 和 obja, 其中變數 a 為字串變數，使用的是傳值，因為字串內容相同，所以比較結果為 true。</p>
<br>

<p>如果 2 個 Array 物件進行比較，就算兩個陣列都擁有相同的元素，也永遠不會相等，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arra <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建立陣列 a</span>
<span class="token keyword">var</span> arrb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建立陣列 b</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arra<span class="token operator">==</span>arrb<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br.&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 結果為 false</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arra<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> arrb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br.&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 結果為 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>比較兩陣列使用傳址方式，所以結果為 false, 如果需要檢查兩個陣列元素內容是否相同，請使用 toString() 方法，此時的結果為 true。</p>
<p>如果將物件和陣列傳入函數，雖然使用的是傳址方式，但是在函數中的程式碼只能更改物件屬性和陣列元素，並不能更改物件或陣列本身。</p>
</li>
<li><p>範例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// number和boolean參數為傳值</span>
<span class="token keyword">function</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   c<span class="token operator">++</span><span class="token punctuation">;</span>
   b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"在funcA為 :"</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// object為傳址和字串參數為傳值</span>
<span class="token keyword">function</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token parameter">objA<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   objA<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"江小魚"</span><span class="token punctuation">;</span>
   a <span class="token operator">=</span> <span class="token string">"陳允傑"</span><span class="token punctuation">;</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"在funcB為 : "</span><span class="token operator">+</span>objA<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>測試傳值和傳址的函數呼叫<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 宣告變數</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 數值</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token comment">// 布林</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"樟山"</span><span class="token punctuation">;</span>            <span class="token comment">// 字串</span>
<span class="token keyword">var</span> objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 建立物件實例</span>
objA<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"樟山"</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"呼叫funcA前 : "</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">funcA</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 呼叫函數</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"呼叫funcA後 : "</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"呼叫funcB前 : "</span><span class="token operator">+</span>objA<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">funcB</span><span class="token punctuation">(</span>objA<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 呼叫函數</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"呼叫funcB後 : "</span><span class="token operator">+</span>objA<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h5 id="1-2-5-JavaScript-函數的參數陣列"><a href="#1-2-5-JavaScript-函數的參數陣列" class="headerlink" title="1.2.5 JavaScript 函數的參數陣列"></a>1.2.5 JavaScript 函數的參數陣列</h5><p>JavaScript 函數都擁有一個「參數陣列」物件，叫做 <code>arguments</code> 物件(即其他程式語言的不定長度參數列)。<br>當呼叫函數傳入參數時，函數就算沒有指明參數名稱，一樣可以使用參數陣列的物件取得參數個數和個別參數值，例如: 函數 <code>sumInt()</code> 沒有任何參數，如下所示:</p>
<ul>
<li><p>例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sumInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>上述函數 <code>sumInt()</code> 雖沒有任何參數，不過還是可以在呼叫時傳遞參數，如下所示:</p>
<ul>
<li><p>例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">sumInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">567</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼在呼叫 <code>sumInt()</code> 函數時共傳入 4 個參數，在函數中可以使用 <code>arguments</code> 物件的 <code>length</code> 屬性<br>取得傳遞多少個參數，如下所示:</p>
</li>
<li><p>例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sumInt<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">//取出參數陣列長度</span>
sumInt<span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//取值</span>
sumInt<span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//取值</span>
sumInt<span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//取值</span>
sumInt<span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//取值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>範例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 使用參數陣列取得傳遞的參數</span>
<span class="token keyword">function</span> <span class="token function">sumInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token comment">// 取得傳遞的所有參數</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>sumInt<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     sum <span class="token operator">+=</span> sumInt<span class="token punctuation">.</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>函數的參數陣列<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 宣告變數</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
sum <span class="token operator">=</span> <span class="token function">sumInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">567</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"函數sumInt(100,45,567,234): "</span><span class="token operator">+</span>sum<span class="token operator">+</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="2-JavaScript-函數的變數範圍"><a href="#2-JavaScript-函數的變數範圍" class="headerlink" title="2. JavaScript 函數的變數範圍"></a>2. JavaScript 函數的變數範圍</h3><p>JavaScript 變數範圍會影響程式碼的變數存取，在 JS 擁有兩種變數範圍:</p>
<ul>
<li><p>區域變數(Local Variable)<br>在函數內宣告的變數，變數只能在函數程式區塊知終使用，函數之外的程式碼並無法存取此變數。</p>
</li>
<li><p>全域變數(Global Variable)<br>如果變數是在函式外宣告，整個 JavaScript 程式檔的函數和程式碼都可以存取此變數。</p>
<blockquote>
<p>JavaScript 不支援<strong>區塊函數</strong>範圍，也就是說在條件或迴圈程式區塊中宣告的變數，在宣告之後的程式區塊之外也可以存取此變數，並不是只有在程式區塊中才能存取此變數，如下範例。</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 宣告全域變數</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// 函數A</span>
<span class="token keyword">function</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 宣告區域變數</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 設定區域變數</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token comment">// 設定區域變數</span>
<span class="token punctuation">}</span>
<span class="token comment">// 函數B</span>
<span class="token keyword">function</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// 設定全域變數</span>
  b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment">// 設定全域變數</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>測試程序函數的變數範圍<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
全域變數 a<span class="token punctuation">,</span> b<span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
funcA宣告區域變數 a<span class="token punctuation">,</span> b<span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
funcB沒有宣告任何的區域變數<span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;table border='1'&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;tr&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;td&gt;執行過程&lt;/td&gt;&lt;td&gt;全域變數a值&lt;/td&gt;&lt;td&gt;全域變數b值&lt;/td&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/tr&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;tr&gt;&lt;td&gt;初始值&lt;/td&gt;&lt;td&gt;"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"&lt;/td&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;td&gt;"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"&lt;/td&gt;&lt;/tr&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 呼叫funcA</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;tr&gt;&lt;td&gt;呼叫funcA後&lt;/td&gt;&lt;td&gt;"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"&lt;/td&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;td&gt;"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"&lt;/td&gt;&lt;/tr&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">funcB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 呼叫funcB</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;tr&gt;&lt;td&gt;呼叫funcB後&lt;/td&gt;&lt;td&gt;"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"&lt;/td&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;td&gt;"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"&lt;/td&gt;&lt;/tr&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/table&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="3-JavaScript-的物件"><a href="#3-JavaScript-的物件" class="headerlink" title="3 JavaScript 的物件"></a>3 JavaScript 的物件</h3><p>JavaScript 是一種原型基礎的物件導向程式語言，支援三種特性。</p>
<h4 id="3-1-物件導向"><a href="#3-1-物件導向" class="headerlink" title="3.1 物件導向"></a>3.1 物件導向</h4><ul>
<li><p>封裝(Encapsulation)<br>將資料和函數建立成物件，簡單說，物件是資料和處理資料函數(方法)組合成的黑盒子。</p>
<p>物件導向程式語言中定義物件是使用「類別」，及建立一個抽象資料型態，但 JS 無類別，可以使用建構函數來建立物件。</p>
</li>
<li><p>繼承(inheritance)<br>繼承是物件再利用，當定義一個類別後，其他類別可以繼承此類別的屬性和方法，並且新增或取代繼承物件的屬性和方法來擴充其功能，  JavaScript 使用 <code>Prototype</code> 物件來實作繼承。</p>
</li>
<li><p>多型(Polymorphism)<br>乃最複查特性，類別如果需要處理各種不同資料型態，我們並不需要針對不同資料型態建立多個類別，只需繼承基礎資料型態的類別，擴充此類別建立同名方法來處理各種不同資料型態，因為方法的名稱相同，只是參數和程式碼不同，所以也稱<strong>同名異式</strong>。</p>
</li>
</ul>
<h4 id="3-2-物件、屬性、方法"><a href="#3-2-物件、屬性、方法" class="headerlink" title="3.2 物件、屬性、方法"></a>3.2 物件、屬性、方法</h4><ul>
<li><p>物件(Object)<br>是<code>資料</code>和<code>處理資料函數</code>的綜合體，不用考慮物件內部的處理方式，只需將它視為一個黑盒子，知道物件提供<br>那些屬性(資料)和方法(處理資料的函數)，和如何使用這些屬性和方法即可。</p>
<p>事實上，JavaScript 物件只是名稱和值成對的集合，即『物件文字值』(Object Literals),可以使用一對大括號包圍成對屬性名稱和屬性值來建立物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> objStudent <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">'張深'</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">5</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>JavaScript 也可以使用 new 運算子加上建構函數來建立物件，相當於其他物件導向程式語言的「實例」(Instance)，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> objCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述 Object() 為 JavaScript 內建的物件建構函數，或稱為類別的建構子，當然也可以自行建立物件的建構函數，但它不是類別。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">objCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  敘述式<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

objCard Card <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">objCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>屬性(Properties)<br>物件屬性可以存取物件儲存的資料，例如: String 物件的 String.lengt 屬性，可以取得字串長度。<br>存取物件屬性式使用 「.」運算子，基本語法如下:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">objName<span class="token punctuation">.</span>propertyName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>方法(Method)<br>Javacript 物件的方法是用來處理儲存資料的函數，例如: String 物件擁有 String.sustr() 方法，其處理<br>的就是字串物件的內容。物件方法的基本語法，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">objName<span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h4 id="3-3-支援的物件"><a href="#3-3-支援的物件" class="headerlink" title="3.3 支援的物件"></a>3.3 支援的物件</h4><ul>
<li><p>內建物件(Intrinsic)<br>11 種內建物件 Array、Boolean、Date、Function、Global、Math、Number、Object、RegExp、Error、String 物件。</p>
</li>
<li><p>自訂物件(Custome Objects)</p>
<p>JavaScript 能夠建立使用者自訂的物件，擴充 JavaScript 的功能。</p>
</li>
<li><p>宿主物件(Host Objects)<br>宿主物件是指 JavaScript 執行環境提供的物件，以瀏覽器的執行環境來說，就是 DOM(Document Object Model),這是一個階層架構的物件模型。</p>
</li>
</ul>
<h3 id="4-自訂-JavaScript-的物件"><a href="#4-自訂-JavaScript-的物件" class="headerlink" title="4 自訂 JavaScript 的物件"></a>4 自訂 JavaScript 的物件</h3><p>JavaScript 能夠自訂物件來擴充 JavaScript 的功能，不只如此，JavaScript 還能提供擴充 JavaScript 內建物件，新增內建物件的屬性或方法。</p>
<h4 id="4-1-使用-Object-物件建立自訂物件"><a href="#4-1-使用-Object-物件建立自訂物件" class="headerlink" title="4.1 使用 Object 物件建立自訂物件"></a>4.1 使用 Object 物件建立自訂物件</h4><p>在 JavaScript 可以直接建立 Object 後，新增所需的屬性和方法，如下所示:</p>
<ul>
<li><p>例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用 new Object 建立新物件</span>
<span class="token keyword">var</span> objCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//新增物件的屬性</span>
objCard<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"張三"</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token string">"02-2222222"</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">"nchysan@ms2.hinet.net"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼的物件屬性名稱是自行定義，自訂物件 objCard 擁有屬性 name、age、phone、email。也可以使用<br>物件文字值(Object Literal) 來建立物件，如下:</p>
</li>
<li><p>例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> objCard <span class="token operator">=</span> <span class="token punctuation">{</span>
 name <span class="token operator">:</span> <span class="token string">"張三"</span><span class="token punctuation">;</span>
 age  <span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">;</span>
 phone <span class="token operator">:</span> <span class="token string">"02-2222222"</span><span class="token punctuation">;</span>
 email <span class="token operator">:</span> <span class="token string">"nchysan@ms2.hinet.net"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述大括號中是屬性名稱和值(即鍵和值)的集合。</p>
</li>
<li><p>範例:</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>使用Object物件建立自訂物件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>
// 建立自訂物件
var objCard = new Object();
// 新增物件屬性
objCard.name = "陳會安";
objCard.age = 42;
objCard.phone = "02-22222222";
objCard.email = "hueyan@ms2.hinet.net";
// 顯示物件屬性
document.write("姓名 : " + objCard.name + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>");
document.write("年齡 : " + objCard.age + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>");
document.write("電話 : " + objCard.phone + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>");
document.write("郵件 : " + objCard.email + "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="4-2-with-程式區塊"><a href="#4-2-with-程式區塊" class="headerlink" title="4.2 with 程式區塊"></a>4.2 with 程式區塊</h4><p>javascript 提供物件處理的相關程式敘述:<code>for/in</code> 和 <code>with</code></p>
<ul>
<li><p><code>for/in</code> 走訪和顯示物件的所有屬性。</p>
</li>
<li><p><code>with</code>   針對物件建立程式區塊，在程式區塊的程式碼不需要指名物件名稱，即可新增屬性和顯示屬性內容:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">with</span><span class="token punctuation">(</span>objCard<span class="token punctuation">)</span><span class="token punctuation">{</span>
  name <span class="token operator">=</span> <span class="token string">"陳會安"</span><span class="token punctuation">;</span>
  age <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
  phone <span class="token operator">=</span> <span class="token string">"02-22222222"</span><span class="token punctuation">;</span>
  email <span class="token operator">=</span> <span class="token string">"hueyan@ms2.hinet.net"</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"姓名 : "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"&lt;br /&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"年齡 : "</span> <span class="token operator">+</span> age  <span class="token operator">+</span> <span class="token string">"&lt;br /&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼是針對物件 <code>objCard</code> 運作，因為 <code>with</code> 程式區塊已經將 <code>objCard</code> 視為預設物件，所以在括號之中的程式碼就不用指出物件名稱，存取屬性也是直接使用屬性名稱即可。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token keyword">with</span>程式區塊<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 建立自訂物件</span>
<span class="token keyword">var</span> objCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">with</span><span class="token punctuation">(</span>objCard<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 新增屬性</span>
   name <span class="token operator">=</span> <span class="token string">"陳安"</span><span class="token punctuation">;</span>
   age <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
   phone <span class="token operator">=</span> <span class="token string">"02-22222222"</span><span class="token punctuation">;</span>
   email <span class="token operator">=</span> <span class="token string">"hueyan@ms2.hinet.net"</span><span class="token punctuation">;</span>
   <span class="token comment">// 顯示物件屬性</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"姓名 : "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"年齡 : "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"電話 : "</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"郵件 : "</span> <span class="token operator">+</span> email <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="4-3-使用建構函數來建立物件"><a href="#4-3-使用建構函數來建立物件" class="headerlink" title="4.3 使用建構函數來建立物件"></a>4.3 使用建構函數來建立物件</h4><p>「建構函數」是一個函數，能夠定義物件的屬性和方法，使用建構函數建立物件有兩個步驟:</p>
<ul>
<li><p>步驟一  使用建構函式宣告物件<br>建構函數的語法是一個 JavaScript 函數，在建構函數可以定義物件屬性和方法，可以視為一個物件宣告(但它並不是類別)，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone<span class="token punctuation">,</span>email</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age  <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述建構函數 nameCard() 擁有數個參數可以建立屬性值，<code>this</code> 關鍵字指的是建立的物件本身，上述函數定義物件擁有屬性 name、age、phone、email。</p>
<p>this 關鍵字在建構函數中可以參考到物件本身，也就是建構函數準備建立的自訂物件，因為函數參數和屬性同名，所以使用 this 關鍵字表示是指定物件的屬性值，而不是函數的參數。</p>
</li>
<li><p>步驟二  使用 new 運算子建立物件<br>在定義宣告物件的建構函數後，就可以使用 new 運算子建立物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">objCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nameCard</span><span class="token punctuation">(</span><span class="token string">"陳安"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"02-2222222"</span><span class="token punctuation">,</span> <span class="token string">"chena@ms2.hinet.net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼使用 new 運算子建立物件時，建構函數 nameCard() 傳入的參數就是物件的屬性值，如果在建立<br>物件時沒有指定屬性值，一樣可以在建立後再指定物件的屬性值，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">objCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nameCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"樟山"</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>age <span class="token operator">=</span><span class="token number">35</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token string">"02-2222222"</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">"chensan@ms2.hinet.net"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>範例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 物件的建構函數</span>
<span class="token keyword">function</span> <span class="token function">nameCard</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone<span class="token punctuation">,</span>email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>使用建構函數建立物件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 建立自訂物件</span>
<span class="token keyword">var</span> objMyCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nameCard</span><span class="token punctuation">(</span><span class="token string">"陳會安"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> 
              <span class="token string">"02-22222222"</span><span class="token punctuation">,</span><span class="token string">"hueyan@ms2.hinet.net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> objCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nameCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 建立物件</span>
<span class="token comment">// 設定屬性</span>
objCard<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"江小魚"</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token string">"03-33333333"</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">"hueyan@yahoo.com.tw"</span><span class="token punctuation">;</span>
<span class="token comment">// 顯示objMyCard物件屬性</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"姓名 : "</span> <span class="token operator">+</span> objMyCard<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"年齡 : "</span> <span class="token operator">+</span> objMyCard<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"電話 : "</span> <span class="token operator">+</span> objMyCard<span class="token punctuation">.</span>phone <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"郵件 : "</span> <span class="token operator">+</span> objMyCard<span class="token punctuation">.</span>email <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;&lt;hr/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 顯示objCard物件屬性</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"姓名 : "</span> <span class="token operator">+</span> objCard<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"年齡 : "</span> <span class="token operator">+</span> objCard<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"電話 : "</span> <span class="token operator">+</span> objCard<span class="token punctuation">.</span>phone <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"郵件 : "</span> <span class="token operator">+</span> objCard<span class="token punctuation">.</span>email <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="4-4-物件的階層架構"><a href="#4-4-物件的階層架構" class="headerlink" title="4.4 物件的階層架構"></a>4.4 物件的階層架構</h4><p>javaScript 物件可以建立「物件階層架構」，因為物件屬性可以是另一個子物件，可以讓我們建立階層關係的物件架構，例如: nameCard 物件擁有子物件 phoneList, 這個子物件是用來儲存住家電話和手機電話號碼，如下所示:</p>
<ul>
<li><p>範例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">nameCard</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone<span class="token punctuation">,</span>email</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">phoneList</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> <span class="token string">"N/A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token operator">=</span>email<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述建構函數 nameCard() 的 phone 屬性建立另一個物件，它是使用 phone.List() 建構函數，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">phoneList</span><span class="token punctuation">(</span><span class="token parameter">homephpne<span class="token punctuation">,</span> cellphone</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>homephone <span class="token operator">=</span> homephone<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>cellphone <span class="token operator">=</span> cellphone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述建構函數 phoneList() 擁有2個參數 homephone 和 callphone，在 nameCard() 參數只傳遞一個 phone 參數設定 homepage 屬性, cellphone 屬性值為 N/A, 如果需要設定手機電話號碼，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">objMyCard<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>cellphone <span class="token operator">=</span> <span class="token string">"0901-66666"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼的 objMyCard 物件是使用 nameCard() 建構函數建立的物件，然後在 phone 物件的 cellphone 屬性指定手機電話號碼，很明顯的! 可以看出 cellphone 是 phone 子物件的屬性。</p>
<p>換句話說，如果某一個人擁有2隻手機，雖然可以重新修改建構函數新增一個屬性，物件屬性能夠在 JavaScript 程式碼動態的新增，稱為「實例擴充」(Instance Extension)，不同於使用 <code>Prototype</code> 物件的「類別擴充」(Class Extension)。</p>
<p>換句話說。只需替 objCard 物件新增一個屬性來儲存額外手機的電話號碼即可，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">objCard<span class="token punctuation">.</span>cellphone <span class="token operator">=</span> <span class="token string">""</span><span class="token number">0900</span><span class="token operator">-</span><span class="token number">77777</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼的 objCard 物件為 nameCard() 建立的物件，替這個物件新增 cellphone 屬性，它是專屬於 objCard 物件, 另一個物件 objMyCard 並沒有此屬性。</p>
<p>此時 objCard 物件可以存取2個 callphone 屬性，一個是新增的 cellphone 屬性，另一個是存取子物件 phone 的 objCard.phone.cellphone 屬性。</p>
</li>
<li><p>範例:<br>在 JavaScript 程式建立 2 個建構函數 nameCard() 和 phoneList(), 然後建立階層關係的自訂物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 物件的建構函數</span>
<span class="token keyword">function</span> <span class="token function">nameCard</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone<span class="token punctuation">,</span>email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">phoneList</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> <span class="token string">"N/A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 物件的建構函數</span>
<span class="token keyword">function</span> <span class="token function">phoneList</span><span class="token punctuation">(</span><span class="token parameter">homephone<span class="token punctuation">,</span>cellphone</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>homephone <span class="token operator">=</span> homephone<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>cellphone <span class="token operator">=</span> cellphone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>新增物件的子物件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 建立自訂物件</span>
<span class="token keyword">var</span> objMyCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nameCard</span><span class="token punctuation">(</span><span class="token string">"陳會安"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span>
                <span class="token string">"02-22222222"</span><span class="token punctuation">,</span><span class="token string">"hueyan@ms2.hinet.net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 設定手機電話號碼</span>
objMyCard<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>cellphone <span class="token operator">=</span> <span class="token string">"0901-666666"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> objCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nameCard</span><span class="token punctuation">(</span><span class="token string">"江小魚"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token string">"03-33333333"</span> <span class="token punctuation">,</span>
                         <span class="token string">"hueyan@yahoo.com.tw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 新增另一隻手機的屬性</span>
objCard<span class="token punctuation">.</span>cellphone <span class="token operator">=</span> <span class="token string">"0900-777777"</span><span class="token punctuation">;</span>
<span class="token comment">// 顯示objMyCard物件屬性</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"姓名 : "</span> <span class="token operator">+</span> objMyCard<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"電話 : "</span> <span class="token operator">+</span> objMyCard<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>homephone <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"手機1 : "</span> <span class="token operator">+</span> objMyCard<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>cellphone <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"手機2 : "</span> <span class="token operator">+</span> objMyCard<span class="token punctuation">.</span>cellphone <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;&lt;hr/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 顯示objCard物件屬性</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"姓名 : "</span> <span class="token operator">+</span> objCard<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"電話 : "</span> <span class="token operator">+</span> objCard<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>homephone <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"手機1 : "</span> <span class="token operator">+</span> objCard<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>cellphone <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"手機2 : "</span> <span class="token operator">+</span> objCard<span class="token punctuation">.</span>cellphone <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述結果依序顯示物件 objMyCard(上面)和 objCard(下面)的所有屬性值，電話和手機1是 phone 子物件的屬性 homepohne 和 cellphone  。</p>
<p>手機2為 objCard 物件新增的 cellphone 屬性，此方法只能新增個別物件的專屬屬性，所以另一個 objMyCard 物件並沒有此屬性，顯示的值為 undefined。</p>
</li>
</ul>
<h4 id="4-5-新增物件的方法"><a href="#4-5-新增物件的方法" class="headerlink" title="4.5 新增物件的方法"></a>4.5 新增物件的方法</h4><ul>
<li><p>範例:<br>之前顯示物件的屬性值，都是用 document.write() 方法，現在換另一種方式，可以新增 print() 方法顯示名片資料，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">nameCard</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone<span class="token punctuation">,</span>email</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>phone<span class="token operator">=</span>phone<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token operator">=</span>email<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>print<span class="token operator">=</span>printCard<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述建構函數 nameCard() 最後的 print 是一個方法，值 printCard 指向參考的 printCard() 函數，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">printCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"姓名 : "</span> <span class="token operator">+</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"年齡 : "</span> <span class="token operator">+</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"電話 : "</span> <span class="token operator">+</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"郵件 : "</span> <span class="token operator">+</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"姓名 : "</span> <span class="token operator">+</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述函數是 nameCard 物件的方法，在函數中使用 this 關鍵字取得物件的屬性值。</p>
</li>
<li><p>範例:<br>nameCard 物件新增 print() 方法，這個方法可以顯示物件屬性的名片資料:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 物件的建構函數</span>
<span class="token keyword">function</span> <span class="token function">nameCard</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone<span class="token punctuation">,</span>email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>print <span class="token operator">=</span> printCard<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 物件方法</span>
<span class="token keyword">function</span> <span class="token function">printCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"姓名 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"年齡 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"電話 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"郵件 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;&lt;hr/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>新增物件方法<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 建立自訂物件</span>
<span class="token keyword">var</span> objMyCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nameCard</span><span class="token punctuation">(</span><span class="token string">"陳會安"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span>
                <span class="token string">"02-22222222"</span><span class="token punctuation">,</span><span class="token string">"hueyan@ms2.hinet.net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> objCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nameCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 建立物件</span>
<span class="token comment">// 設定屬性</span>
objCard<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小魚"</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token string">"03-33333333"</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">"hueyan@yahoo.com.tw"</span><span class="token punctuation">;</span>
<span class="token comment">// 顯示objMyCard物件屬性</span>
objMyCard<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 顯示objCard物件屬性</span>
objCard<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><strong>JavaScript 的靜態屬性和方法</strong><br> JavaScript 也可以建立其他物件導向程式語言的<strong>靜態屬性</strong>和<strong>方法</strong>(即類別屬性和方法)，因為建構函數相當於是類別，且 JavaScript 函數就是物件，可以直接在建構函數新增靜態屬性，如下所示:</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">nameCard<span class="token punctuation">.</span>belong <span class="token operator">=</span> <span class="token string">"王捷"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼是在 nameCard() 建構函數新增屬性，同樣的可以新增靜態方法:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">nameCard<span class="token punctuation">.</span><span class="token function-variable function">now</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼新增 now() 方法傳回來現在的日期/時間。 因為是靜態屬性和方法，使用 nameCard() 物件名稱來存取此屬性和呼叫方法，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"名片簿屬於: "</span> <span class="token operator">+</span> nameCard<span class="token punctuation">.</span>belong <span class="token operator">+</span> <span class="token string">"&lt;/br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"現在日期/時間: "</span> <span class="token operator">+</span> nameCard<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>完整範例:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 物件的建構函數</span>
<span class="token keyword">function</span> <span class="token function">nameCard</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone<span class="token punctuation">,</span>email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>print <span class="token operator">=</span> printCard<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 物件方法</span>
<span class="token keyword">function</span> <span class="token function">printCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"姓名 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"年齡 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"電話 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"郵件 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;&lt;hr/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 新增靜態屬性</span>
nameCard<span class="token punctuation">.</span>belong <span class="token operator">=</span> <span class="token string">"陳允傑"</span><span class="token punctuation">;</span>
<span class="token comment">// 新增靜態方法</span>
nameCard<span class="token punctuation">.</span><span class="token function-variable function">now</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>新增物件方法<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 建立自訂物件</span>
<span class="token keyword">var</span> objMyCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nameCard</span><span class="token punctuation">(</span><span class="token string">"陳會安"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span>
                <span class="token string">"02-22222222"</span><span class="token punctuation">,</span><span class="token string">"hueyan@ms2.hinet.net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> objCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nameCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 建立物件</span>
<span class="token comment">// 設定屬性</span>
objCard<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"江小魚"</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token string">"03-33333333"</span><span class="token punctuation">;</span>
objCard<span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">"hueyan@yahoo.com.tw"</span><span class="token punctuation">;</span>
<span class="token comment">// 顯示objMyCard物件屬性</span>
objMyCard<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 顯示objCard物件屬性</span>
objCard<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"名片簿屬於: "</span> <span class="token operator">+</span> nameCard<span class="token punctuation">.</span>belong <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"現在日期/時間: "</span> <span class="token operator">+</span> nameCard<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="5-Prototype-物件"><a href="#5-Prototype-物件" class="headerlink" title="5 Prototype 物件"></a>5 Prototype 物件</h3><p>JavaScript 支援 Prototype 物件，能夠新增物件的屬性或方法，讓我們實作 Prototype 物件的繼承。</p>
<h4 id="5-1-類別基礎和原型基礎程式語言"><a href="#5-1-類別基礎和原型基礎程式語言" class="headerlink" title="5.1 類別基礎和原型基礎程式語言"></a>5.1 類別基礎和原型基礎程式語言</h4><p>JavaScript 是一種「原型基礎」(Prototype-based) 程式語言，有別於 C++、Java 或 C# 的「類別基礎」(Class-based)程式語言。</p>
<ul>
<li><p>類別基礎和原型基礎語言<br>類別基礎程式語言的類別(Class)是一種抽象資料型態，它和物件實例(Instance)是不同的，��用類別的藍圖來建立物件實例；在<strong>原型基礎</strong>程式語言的類別和物件之�����，其分野並不明顯，類別事實上就是物件。</p>
<br>

<p>物件在原型基礎程式語言屬於一個實際的實體，可以使用現成的物件作為原型(Prototype)來建立其他物件，這個物件可以分享原型物件的屬性和方法，換句話說，就是使用 <code>Prototype</code> 物件來繼承其他物件。</p>
</li>
<li><p>物件的 prototype 屬性<br>JavaScript 的每一個物件都擁有 prototype 屬性，這個屬性是一個 Prototype 物件，Prototype 物件的屬性會被所有物件所繼承，使用prototype 屬性的優點，如下:</p>
<ul>
<li>使用 prototype 屬性擴充物件可以大量減少物件使用的記憶體空間。</li>
<li>不論是否已經建立物件，都可以使用 prototype 屬性來擴充物件的屬性和方法。</li>
</ul>
</li>
</ul>
<h4 id="5-2-新增-Prototype-物件的屬性"><a href="#5-2-新增-Prototype-物件的屬性" class="headerlink" title="5.2 新增 Prototype 物件的屬性"></a>5.2 新增 Prototype 物件的屬性</h4><ul>
<li><p>JavaScript 的 prototype 屬性能夠擴充 JavaScript 內建物件或自訂物件的屬性，例如:在自訂物件circle 建立 PI 屬性，如下列所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">circle<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<p>不同於原型 function 中只能針對指定物件新增屬性，prototype 屬性在所有建立的物件都會新增 PI 屬性。</p>
<blockquote>
<p>注意: JavaScript 只允許使用 new 運算子建立的物件使用 prototype 屬性，例如: String、Date 或 Array, 並不能使用在字串資料型態。</p>
</blockquote>
<ul>
<li><p>範例:<br>建立 circle() 建構函數，然後使用 prototype 屬性新增 PI 屬性，如下所示:</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 物件的建構函數</span>
<span class="token keyword">function</span> <span class="token function">circle</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>display <span class="token operator">=</span> showCircle<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 物件方法</span>
<span class="token keyword">function</span> <span class="token function">showCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"半徑 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"色彩 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"圓周率 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;&lt;hr/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>新增Prototype物件的屬性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 建立自訂物件</span>
<span class="token keyword">var</span> objCircle1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">circle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> objCircle2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">circle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 新增Prototype物件的屬性</span>
circle<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>  
<span class="token comment">// 執行物件方法</span>
objCircle1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 執行物件方法</span>
objCircle2<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="5-3-新增-Prototype-物件的方法"><a href="#5-3-新增-Prototype-物件的方法" class="headerlink" title="5.3 新增 Prototype 物件的方法"></a>5.3 新增 Prototype 物件的方法</h4><ul>
<li><p>使用 prototype 屬性在上述範例新增 area() 方法，這個方法就是計算圓面積的 getArea() 函數，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">gerArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"圓面積 : "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"&lt;br /&gt;&lt;hr /&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述函數是物件 circle 的方法，不過，這並不是在建構函數定義的方法，而是使用 prototype 屬性新增的方法，如下所示:</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">circle<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>area <span class="token operator">=</span> getArea<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>範例:<br>擴充上述 <code>circle</code> 物件，使用 <code>prototype</code> 屬性新增 <code>area()</code> 方法，如下所示:</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 物件的建構函數</span>
<span class="token keyword">function</span> <span class="token function">circle</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>display <span class="token operator">=</span> showCircle<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 物件方法</span>
<span class="token keyword">function</span> <span class="token function">showCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"半徑 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"色彩 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"圓周率 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;&lt;hr/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 新增Prototype物件方法</span>
<span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"圓面積 : "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;&lt;hr/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>新增Prototype物件的方法<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 建立自訂物件</span>
<span class="token keyword">var</span> objCircle1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">circle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> objCircle2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">circle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 新增Prototype物件的屬性</span>
circle<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>
<span class="token comment">//新增Prototype物件的方法</span>
circle<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>area <span class="token operator">=</span> getArea<span class="token punctuation">;</span>  
<span class="token comment">// 執行物件方法</span>
objCircle1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
objCircle1<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 執行Prototype方法</span>
<span class="token comment">// 執行物件方法</span>
objCircle2<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
objCircle2<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 執行Prototype方法</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上圖例顯示的圓面積是執行物件的 <code>area()</code> 方法，可以看到所有物件都可以執行 <code>prototype</code> 屬性新增的方法。</p>
</li>
</ul>
<h4 id="5-4-擴充-JavaScript-內建物件的方法"><a href="#5-4-擴充-JavaScript-內建物件的方法" class="headerlink" title="5.4 擴充 JavaScript 內建物件的方法"></a>5.4 擴充 JavaScript 內建物件的方法</h4><ul>
<li><p>JavaScript 物件的 prototype 屬性不只可以新增自訂物件的方法，對於 JavaScript 內建物件，一樣可以使用 Prototype 物件新增物件的方法，例如:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> objMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"JavaScript 程式設計"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述 String 物件使用 new 運算子建立物件，只需使用 prototype 屬性就可以新增 String 物件的方法，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>reverse <span class="token operator">=</span> reverse_string<span class="token punctuation">;</span>
String<span class="token punctuation">.</span>protptype<span class="token punctuation">.</span>even <span class="token operator">=</span> even_string<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上述程式碼新增 String 物件的 reverse() 和 even() 方法，使用的函數是反向顯示的 reverse_string(), 和只顯示字串中偶數字元的 even_string() 函數。</p>
</li>
<li><p>範例<br>使用 prototype 屬性新增內建物件 String 的兩個 reverse() 和 even() 方法，這些方法是在建立物件前使用 Prototype 物件新增的物件方法，如下:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 新增的物件方法</span>
<span class="token keyword">function</span> <span class="token function">reverse_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 新增的物件方法</span>
<span class="token keyword">function</span> <span class="token function">even_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> output <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>
    output <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> output<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 擴充物件方法</span>
<span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>reverse <span class="token operator">=</span> reverse_string<span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>even <span class="token operator">=</span> even_string<span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>擴充JavaScript內建物件的方法<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token comment">// 建立內建物件String</span>
  <span class="token keyword">var</span> objMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"JavaScript網頁程式設計"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"原始字串: "</span> <span class="token operator">+</span> objMessage <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 執行物件方法</span>
  objMessage<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  strOutput <span class="token operator">=</span> objMessage<span class="token punctuation">.</span><span class="token function">even</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 執行物件方法</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>strOutput <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="5-5-Prototype-物件的繼承"><a href="#5-5-Prototype-物件的繼承" class="headerlink" title="5.5 Prototype 物件的繼承"></a>5.5 Prototype 物件的繼承</h4><ul>
<li><p>JavaScript 物件的繼承可以將一個物件擴充成其他物件，換句話說，不但可以使用物件作為原型來建立其他物件，還可以擴充物件的屬性和方法，例如: position 物件的建構函數，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">position</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述 <code>position()</code> 建構函數定義圖形的基本資料，包含位置 x、y 和色彩 color 屬性，接著建立  <code>circle</code> 物件繼承 <code>position</code> 物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">circle</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span>r<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> showCircleInfo<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">showCircleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">3.1415926</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"半徑 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r  <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"X 座標 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x  <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Y 座標 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y  <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"圓形色彩 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color  <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"圓面積 : "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述函數是 circle 物件的建構函數，可以看到新增屬性 r 和方法 info，函數 ShowCircleInfo() 就是方法 info (JavaScript 的函數中可以定義另一個函數)，內含 position 物件的屬性，現在可以在 circle 物件使用 prototype 屬性繼承 position 物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">circle<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼使用 new 運算子建立 position 物件，此時的 circle 物件就可以繼承 position 物件的屬性和方法。</p>
</li>
<li><p>範例<br>建立建構函數的物件宣告，然後在 circle 物件使用 prototype 屬性繼承 position 物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 基礎物件的建構函數</span>
<span class="token keyword">function</span> <span class="token function">position</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 繼承物件circle的建構函數</span>
<span class="token keyword">function</span> <span class="token function">circle</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> showCircleInfo<span class="token punctuation">;</span>
  <span class="token comment">// 物件circle()的方法</span>
  <span class="token keyword">function</span> <span class="token function">showCircleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">3.1415926</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>
     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"半徑 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"X座標 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Y座標 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"圖形色彩 : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"圓面積 : "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prototype物件的繼承</span>
circle<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>Prototype物件的繼承<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 建立自訂物件</span>
<span class="token keyword">var</span> objCircle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">circle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 設定物件屬性</span>
<span class="token keyword">with</span><span class="token punctuation">(</span>objCircle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
   y <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
   color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token comment">// 執行物件方法info</span>
objCircle<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述圖例顯示 circle 物件的屬性，部分屬性是使用 prototype 屬性繼承自 position 物件。</p>
</li>
</ul>
<hr>
<h2 id="JavaScript-內建物件"><a href="#JavaScript-內建物件" class="headerlink" title="JavaScript 內建物件"></a>JavaScript 內建物件</h2><h3 id="1-JavaScript-內建物件"><a href="#1-JavaScript-內建物件" class="headerlink" title="1. JavaScript 內建物件"></a>1. JavaScript 內建物件</h3><p>JavaScript 擁有內建物件和自訂物件。事實上，各種資料型態的變數都是物件，變數在宣告和指定值後馬上就擁有對應的方法和屬性。</p>
<h4 id="1-1-JavaScript-內建物件的種類"><a href="#1-1-JavaScript-內建物件的種類" class="headerlink" title="1.1 JavaScript 內建物件的種類"></a>1.1 JavaScript 內建物件的種類</h4><p>JavaScript 物件依照建立方式的不同可以分為使用變數宣告的<strong>隱性物件</strong>，和使用 new 運算子建立物件的<strong>顯性物件</strong>。</p>
<ul>
<li><p>隱性物件(Implicit objects)<br>JavaScript 的各種資料型態變數，在宣告和指定值後就是一個物件，例如: 數值、字串和布林資料型態的變數等，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"JavaScript 程式設計"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼宣告變數 str 是一個隱性 String 物件，雖然可以使用 String 物件的方法，不過隱形物件不支援 prototype 屬性，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">str<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>count<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼會導致 JavaScript 程式執行錯誤，而且，隱形物件也無法隨意擴充物件的屬性。</p>
</li>
<li><p>顯性物件(Explicit objects)<br>JavaScript 物件如果是使用 new 運算子建立物件，這個物件就是一個顯性物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"JavaScript 程式設計"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼建立的也是一個字串變數，不過，這是一個 String 物件，顯性物件支援新增屬性和 Prototype 屬性。</p>
</li>
</ul>
<h4 id="1-2-javaScript-內建物件"><a href="#1-2-javaScript-內建物件" class="headerlink" title="1.2 javaScript 內建物件"></a>1.2 javaScript 內建物件</h4><p>JavaScript 提供十一種內建物件，常用內建物件如下:</p>
<ul>
<li><p>Boolean 物件<br>Boolean 物件是一種資料型態，提供建構函數可以建立布林資料型態的物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">objBoolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼使用 new 運算子建立布林物件，括號參數如為 false、0、null、NaN或空字串的布林值為 fasle;否則為 true。<br>當使用 var 宣告布林變數且指定值後，布林變數將自動轉換成 Boolean 物件。</p>
</li>
<li><p>Function 物件<br>JavaScript 函數就是一個 Function 物件，建立方式，如下所示</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上述程式區塊是一個餘數函數，也可以使用 new 運算子建立函數的 Function 物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> mod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"return(x%y)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼建立 mod() 函數，不論使用哪一種方法建立函數，都可以使用相同程式碼旯呼叫它，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">value <span class="token operator">=</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Function 物件是函數，如果函數擁有參數，這些傳入參數是 arguments 物件。</p>
</li>
<li><p>Global 物件<br>Global 物件不能使用 new 運算子建立，在腳本語言引擎初始後就會自動建立此物件。在 Global 物件擁有2個屬性，如下表所示:</p>
<table>
<thead>
<tr>
<th align="left">屬性</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Infinity</td>
<td align="left">取得 Number.POSITIVE_INFINITY 的初始值</td>
</tr>
<tr>
<td align="left">NaN</td>
<td align="left">取得 Number.NaN 的初始值</td>
</tr>
</tbody></table>
<p>Global 物件的屬性不用指名  Global 物件, 直接使用屬性名稱即可，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">Infinity</span>
<span class="token number">NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>Number 物件<br>Number 物件類似 Boolean 物件可以建立數值資料型態的變數，如下列所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">objNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼使用 new 運算子建立 Number 物件，參數 value 為數值變數的值，通常使用 Number 物件的目的是為了使用 toString()方法將數值資料轉換成字串。</p>
<p>Number 物件屬性的語法為: <code>Number.propertyname;</code>,  其常用屬性的說明，如下表所示:</p>
<table>
<thead>
<tr>
<th align="left">屬性</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">MAX_VALUE</td>
<td align="left">傳回 JavaScript數值的最大值，約1.79E+308</td>
</tr>
<tr>
<td align="left">MIN_VALUE</td>
<td align="left">傳回 JavaScript最接近0的值，約 5.00E-324</td>
</tr>
<tr>
<td align="left">NaN</td>
<td align="left">一種特殊值，表示運算式或變數值不是數值</td>
</tr>
<tr>
<td align="left">NEGATIVE_INFINITY</td>
<td align="left">傳回比 -Number.MAX_VALUE 更大的負值</td>
</tr>
<tr>
<td align="left">POSITIVE_INFINITY</td>
<td align="left">傳回比 Number.MAX_VALUE 更大的正值</td>
</tr>
</tbody></table>
</li>
<li><p>Object 物件<br>Object 物件可以建立 JavaScript 支援的物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Objobject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼使用 new 運算子建立 Object 物件，參數 value 如果是 String,它是一個字串物件，Boolean 是 Boolean 物件等。</p>
</li>
<li><p>RegExp 物件<br>RegExp 物件是 JavaScript 「正規表達式」(Regular Expression)物件。</p>
</li>
</ul>
<h3 id="2-JavaScript-的-String-物件"><a href="#2-JavaScript-的-String-物件" class="headerlink" title="2. JavaScript 的 String 物件"></a>2. JavaScript 的 String 物件</h3><p>字串屬於 JavaScript 的基本資料型態，字串變數本身就是一種 String 物件。</p>
<h4 id="2-1-建立-String-物件"><a href="#2-1-建立-String-物件" class="headerlink" title="2.1 建立 String 物件"></a>2.1 建立 String 物件</h4><p>String 物件的方法可以格式化字串或進行子字串操作，簡單說，就是處理字串變數的資料，可以直接宣告字串變數或使用 new 運算子建立 String 物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> objstr1 <span class="token operator">=</span> <span class="token string">""</span>JavaScript<span class="token punctuation">;</span>
<span class="token keyword">var</span> objstr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"網頁程式設計"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上述程式碼都可以建立 String 物件，不論使用哪一種方法建立 String 物件，都可以使用以下方法來處理字串內容。</p>
<ul>
<li><p>HTML 標籤的格式編排<br>String 物件提供一系列格式編排方法，可以將String 物件的字串內容輸出成對應的HTML標籤，相關的方法(下表 string 代表 String 物件的字串內容)，如下表所示:</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">anchor()</td>
<td align="left">傳回<a>string</a>標籤字串</td>
</tr>
<tr>
<td align="left">big()</td>
<td align="left">傳回<big>string</big>標籤字串</td>
</tr>
<tr>
<td align="left">blink()</td>
<td align="left">傳回<blink>string</blink>標籤字串</td>
</tr>
<tr>
<td align="left">bold()</td>
<td align="left">傳回<b>string</b>標籤字串</td>
</tr>
<tr>
<td align="left">fixed</td>
<td align="left">傳回<tt>string</tt> 標籤字串</td>
</tr>
<tr>
<td align="left">fontcolot(color)</td>
<td align="left">傳回<font color="color">string</font> 標籤字串</td>
</tr>
<tr>
<td align="left">fontsize(size)</td>
<td align="left">傳回<font size="size">string</font> 標籤字串</td>
</tr>
<tr>
<td align="left">italics()</td>
<td align="left">傳回<i>string</i>標籤字串</td>
</tr>
<tr>
<td align="left">link(url)</td>
<td align="left">傳回<a href="url">string</a>標籤字串</td>
</tr>
<tr>
<td align="left">small()</td>
<td align="left">傳回<small>string</small>標籤字串</td>
</tr>
<tr>
<td align="left">strike()</td>
<td align="left">傳回<strike>string</strike>標籤字串</td>
</tr>
<tr>
<td align="left">sub()</td>
<td align="left">傳回<sub>string</sub>標籤字串</td>
</tr>
<tr>
<td align="left">sup()</td>
<td align="left">傳回<sup>string</sup>標籤字串</td>
</tr>
</tbody></table>
<p>JavaScript 程式使用 String 物件的方法，可以將字串使用 HTML 標籤的格式編排來輸出內容:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token comment">// 測試字串</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"JavaScript網頁程式設計"</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"anchor(): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">anchor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"big(): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">big</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"blink(): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">blink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"bold(): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"fixed(): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">fixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"fontcolor('red'): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">fontcolor</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"fontsize(5): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">fontsize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"italics(): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">italics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"link('URL'): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token string">"http://www.hinet.net"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"small(): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">small</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"strike(): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">strike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"sub(): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"sup(): "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">sup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如上所顯示 String 物件格式編排方法的結果，這些輸出都可以對應到 HTML 標籤的編排效果。</p>
</li>
</ul>
<h4 id="2-2-字串長度與大小寫"><a href="#2-2-字串長度與大小寫" class="headerlink" title="2.2 字串長度與大小寫"></a>2.2 字串長度與大小寫</h4><ul>
<li><p>物件提供方法和屬性可以取得字串長度和英文字串的大小寫轉換，相關屬性說明，如下所示:</p>
<table>
<thead>
<tr>
<th align="left">屬性</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">length</td>
<td align="left">取得字串的長度</td>
</tr>
</tbody></table>
<p>相關 String 物件的方法，如下所示:</p>
<table>
<thead>
<tr>
<th align="left">屬性</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">toLowerCase()</td>
<td align="left">將字串的英文字母都轉換成小寫字母</td>
</tr>
<tr>
<td align="left">toUpperCase()</td>
<td align="left">將字串的英文字母都轉換成大寫字母</td>
</tr>
</tbody></table>
</li>
<li><p>範例<br>使用 String 物件的方法來取得字串長度和進行英文字母的大小寫轉換。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>字串長度與大小寫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 測試字串</span>
<span class="token keyword">var</span> str1<span class="token operator">=</span><span class="token string">"JavaScript"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"網頁程式設計"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"測試的英文字串: \""</span> <span class="token operator">+</span> str1 <span class="token operator">+</span> <span class="token string">"\"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"測試的中文字串: \""</span> <span class="token operator">+</span> str2 <span class="token operator">+</span> <span class="token string">"\"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"英文字串長度: "</span> <span class="token operator">+</span> str1<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"中文字串長度: "</span> <span class="token operator">+</span> str2<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"全部小寫: "</span> <span class="token operator">+</span> str1<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"全部大寫: "</span> <span class="token operator">+</span> str1<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在上述最上方的2個字串為測試的中英文字串，接著中英文字串的長度，最後是英文字串的大小寫轉換。</p>
</li>
</ul>
<h4 id="2-3-取得字串的指定字元"><a href="#2-3-取得字串的指定字元" class="headerlink" title="2.3 取得字串的指定字元"></a>2.3 取得字串的指定字元</h4><ul>
<li><p>在字串處理時如果需要取得字串指定位置的字元，String 物件提供兩種方法來取得指定位置的字元，相關方法說明，如下所示:</p>
<table>
<thead>
<tr>
<th align="left">屬性</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">charAt(index)</td>
<td align="left">取得參數index位置的字元，索引值是從0開始</td>
</tr>
<tr>
<td align="left">charCodeAt(index)</td>
<td align="left">取得參數index位置的Unicode統一字碼</td>
</tr>
</tbody></table>
<blockquote>
<p>上述2種方法傳入參數index都是以0開始，第1個字元為0,第2個字元為1,依序類推。</p>
</blockquote>
</li>
<li><p>範例<br>使用 String 物件的方法取得指定位置的字元和 Unicode 內碼。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>取得字串的字元<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 測試字串</span>
  <span class="token keyword">var</span> str1<span class="token operator">=</span><span class="token string">"JavaScript"</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> str2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"網頁程式設計"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"測試的英文字串: \""</span> <span class="token operator">+</span> str1 <span class="token operator">+</span> <span class="token string">"\"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"測試的中文字串: \""</span> <span class="token operator">+</span> str2 <span class="token operator">+</span> <span class="token string">"\"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"英文字元charAt(4): "</span> <span class="token operator">+</span> str1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"中文字串charAt(4): "</span> <span class="token operator">+</span> str2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"英文字元charCodeAt(4): "</span> <span class="token operator">+</span> str1<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  ```  

  上述結果上方為中英文原始的測試字串，接著取得位置索引值為4的中英文字元，即第5個字元，最後取得英文字元S的 Unicode 字碼為 83。

#### 2.4 子字串的搜尋

- String 物件提供功能強大的子字串搜尋方法，可以輕鬆在字串中搜尋所需的子字串，相關方法的說明，如下所示。

  |          方法         | 說明                             |
  |:---------------------|:---------------------------------|  
  |indexOf(string, index)|傳回第1次搜尋到字串的索引位置，沒有找到傳回-1,傳入參數是搜尋字串，index為開始搜尋的索引位置|
  |lastIndexOf(string)   |如同indexOf()方法，不過是從尾搜尋到頭的反向搜尋|
  |math(string)          |如同indexOf()和lastIndexOf(),不過傳回的為找到的字串，沒有找到傳回null|
  |search(string)        |與 indexOf() 的功能相似|

- 範例
  使用 String 物件的相關方法來搜尋指定的子字串。

  ```html
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>字串搜尋<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 測試字串</span>
  <span class="token keyword">var</span> str1<span class="token operator">=</span><span class="token string">"JavaScript"</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> str2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"網頁程式設計"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"測試的英文字串: \""</span> <span class="token operator">+</span> str1 <span class="token operator">+</span> <span class="token string">"\"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"測試的中文字串: \""</span> <span class="token operator">+</span> str2 <span class="token operator">+</span> <span class="token string">"\"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"英文字元indexOf('a'): "</span> <span class="token operator">+</span> str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"英文字元indexOf('a', 2): "</span> <span class="token operator">+</span> str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"中文字串indexOf('程式'): "</span> <span class="token operator">+</span> str2<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'程式'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"英文字元lastIndexOf('a'): "</span> <span class="token operator">+</span> str1<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"英文字元match('Script'): "</span> <span class="token operator">+</span> str1<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'Script'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"中文字串match('程式'): "</span> <span class="token operator">+</span> str2<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'程式'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"英文字元search('Script'): "</span> <span class="token operator">+</span> str1<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">'Script'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"中文字串search('學習'): "</span> <span class="token operator">+</span> str2<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">'學習'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述結果為由上而下分別顯示原始測試字串和測試各種方法的字串搜尋結果。</p>
</li>
</ul>
<h4 id="2-4-子字串的處理"><a href="#2-4-子字串的處理" class="headerlink" title="2.4 子字串的處理"></a>2.4 子字串的處理</h4><ul>
<li><p>String 物件提供方法可以取代、分割和取出字串中所需的子字串，相關方法的說明(string1 和  string2 為子字串)，如下所示。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">replace(string1, string2)</td>
<td align="left">將找到的 string1 子字串取代成 string2</td>
</tr>
<tr>
<td align="left">split(string)</td>
<td align="left">傳回 Array 物件，使用參數 string 作為分割字串，可以將字串轉換成 Array 物件</td>
</tr>
<tr>
<td align="left">substr(index,length)</td>
<td align="left">從 index 開始取出 length 個字元</td>
</tr>
<tr>
<td align="left">substring(index1, index2)</td>
<td align="left">取出 index1 到  index2 之間的子字串</td>
</tr>
<tr>
<td align="left">concat(string)</td>
<td align="left">將 string 字串新增到 String 物件的字串後</td>
</tr>
</tbody></table>
<p>上述 concat() 方法的呼叫需要使用指定敘述，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">str3 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼相當於 str3=str1+str2。</p>
</li>
<li><p>範例<br>使用 String 物件的方法取出字串中的子字串，並且使用 concat() 方法連接2個字串。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>子字串處理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 測試字串</span>
<span class="token keyword">var</span> str1<span class="token operator">=</span><span class="token string">"JavaScript"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"網頁程式設計"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"測試的英文字串: \""</span> <span class="token operator">+</span> str1 <span class="token operator">+</span> <span class="token string">"\"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"測試的中文字串: \""</span> <span class="token operator">+</span> str2 <span class="token operator">+</span> <span class="token string">"\"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"英文replace('Java','VB'): "</span><span class="token operator">+</span>str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'Java'</span><span class="token punctuation">,</span><span class="token string">'VB'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"中文split('程式'): "</span> <span class="token operator">+</span> str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'程式'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"英文substr(2,4): "</span> <span class="token operator">+</span> str1<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"中文substring(2,5): "</span> <span class="token operator">+</span> str2<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 連接2個字串</span>
str3 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"連接字串str1.concat(str2): "</span> <span class="token operator">+</span> str3 <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述結果為前二列是中英文測試的原始字串，下方是各種子字串處理的執行結果，最後將中英文字串接合成一個字串。</p>
</li>
</ul>
<h3 id="3-JavaScript-的-Array-物件"><a href="#3-JavaScript-的-Array-物件" class="headerlink" title="3. JavaScript 的 Array 物件"></a>3. JavaScript 的 Array 物件</h3><p>JavaScript 資料型態並沒有陣列，而是使用 Array 物件建立陣列，每一個陣列元素事實上就是 Array 物件的屬性。</p>
<h4 id="3-1-JavaScript-的一維陣列"><a href="#3-1-JavaScript-的一維陣列" class="headerlink" title="3.1 JavaScript 的一維陣列"></a>3.1 JavaScript 的一維陣列</h4><p>基本上 JavaScript 陣列和物件的分野並不明顯，陣列擁有陣列元素如同物件擁有屬性，JavaScript 陣列事實上就是一個特殊物件。</p>
<ul>
<li><p>建立一維陣列<br>如同 C/C++、C#、Java或 Visual Basic 語言的陣列元素是使用數值的索引值來存取元素，JavaScript 陣列的索引值是從0 開始，JavaScript 宣告陣列的方法就是建立 Array 物件，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> userename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼使用 new 運算子建立 Array 物件，參數 5 表示有5個元素，索引值是從0開始，因為只有一個索引，所以是建立一維陣列。然後可以使用索引值來指定陣列的元素值，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">username<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Joe"</span><span class="token punctuation">;</span>
username<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Jone"</span><span class="token punctuation">;</span>
  <span class="token operator">:</span>
username<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Merry"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼指定陣列元素的內容，也可以在建立 Array 物件時，直接在參數指定陣列元素值，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token keyword">var</span> tipe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>
  上述兩個方法都可以建立 JavaScript 陣列，其中 username<span class="token punctuation">[</span><span class="token punctuation">]</span> 陣列是一個字串陣列，tips<span class="token punctuation">[</span><span class="token punctuation">]</span> 陣列是數值陣列。

<span class="token operator">-</span> 訪問一維陣列
  可以使用 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">for</span><span class="token template-punctuation string">`</span></span> 迴圈走訪和顯示陣列元素，如下所示<span class="token operator">:</span>

  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`javascript
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>username<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;br /&gt;"</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼使用陣列索引值取得每一個陣列元素的值，迴圈的結束條件是使用 length 屬性取得陣列尺寸.</p>
</li>
<li><p>範例:<br>使用 Array 物件建立一維的數值和字串陣列，然後使用 for 迴圈顯示陣列的所有元素。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>JavaScript的一維陣列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">var</span> tips <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
username<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Joe"</span><span class="token punctuation">;</span>
username<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Jane"</span><span class="token punctuation">;</span>
username<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Tony"</span><span class="token punctuation">;</span>
username<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>
username<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Merry"</span><span class="token punctuation">;</span>
<span class="token comment">// 使用迴圈顯示陣列值</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tips<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>tips<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用迴圈顯示陣列值</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>username<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述結果分別顯示2個陣列的所有元素，上方數值為tips[]陣列，下方字串屬於 username[] 陣列。</p>
</li>
</ul>
<h4 id="3-2-Array-物件的屬性和方法"><a href="#3-2-Array-物件的屬性和方法" class="headerlink" title="3.2 Array 物件的屬性和方法"></a>3.2 Array 物件的屬性和方法</h4><ul>
<li><p>Array 物件提供屬性和方法可以取得陣列尺寸、排列陣列元素、合併陣列和反轉陣列元素。Array物件的屬性說明，如下表說明:</p>
<table>
<thead>
<tr>
<th align="left">屬性</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">length</td>
<td align="left">取得陣列的元素個數，即陣列尺寸</td>
</tr>
</tbody></table>
<p>Array 物件的相關方法說明，如下表所示:</p>
<table>
<thead>
<tr>
<th align="left">屬性</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">join()</td>
<td align="left">將陣列的元素使用字串方式顯示，每個陣列元素是使用「,」符號分隔</td>
</tr>
<tr>
<td align="left">reverse()</td>
<td align="left">將陣列元素反轉，本來是陣列的最後一個元素成為第一個元素</td>
</tr>
<tr>
<td align="left">sort()</td>
<td align="left">將陣列所有元素進行排序</td>
</tr>
<tr>
<td align="left">concat(array)</td>
<td align="left">將參數的陣列合併到目前的陣列</td>
</tr>
</tbody></table>
</li>
<li><p>範例:<br>建立2個測試陣列，然後分別測試 Array 物件的屬性和方法。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">function</span> <span class="token function">showArray</span><span class="token punctuation">(</span><span class="token parameter">username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 使用迴圈顯示陣列值</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> username<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>username<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Array物件的方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"Joe"</span><span class="token punctuation">,</span><span class="token string">"Jane"</span><span class="token punctuation">,</span><span class="token string">"Tony"</span><span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> username1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"陳會安"</span><span class="token punctuation">,</span><span class="token string">"江小魚"</span><span class="token punctuation">,</span><span class="token string">"陳允傑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"陣列元素共: "</span> <span class="token operator">+</span> username<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">"個&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 顯示陣列元素</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
username<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 反轉陣列</span>
<span class="token function">showArray</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 顯示陣列元素</span>
username<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 排序</span>
<span class="token function">showArray</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 顯示陣列元素</span>
username <span class="token operator">=</span> username<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>username1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 結合兩陣列</span>
<span class="token function">showArray</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 顯示陣列元素</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述依序顯示陣列元素的個數，各種 Array 物件方法的執行結果，最後一列將兩個陣列合成一個陣列。</p>
</li>
</ul>
<h4 id="3-3-JavaScript-的多維陣列"><a href="#3-3-JavaScript-的多維陣列" class="headerlink" title="3.3 JavaScript 的多維陣列"></a>3.3 JavaScript 的多維陣列</h4><ul>
<li><p>JavaScript 的 Array 物件並不能直接建立二維或多維陣列，不過，因為Array物件的元素可以是另一個Array物件，所以仍然可以在 JavaScript 程式碼建立多維陣列，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span>o<span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  users<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼建立擁有5個元素的Array物件 users[],接著使用for迴圈將每個陣列元素分別建立成擁有2個元素的Array 物件，即 5x2 的二維陣列，然後可以指定二維陣列的元素值，如下所示:</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Joe"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Jane"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"5678"</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
users<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Merry"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"5678"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼指定二維陣列的元素值，同樣方式可以將 Array 物件擴充成多維陣列。</p>
</li>
<li><p>範例:<br>使用 Array 物件建立 5x2 的二維陣列，當指定二維陣列值後，使用兩層迴圈顯示二維陣列的值。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>JavaScript的二維陣列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 建立二維陣列</span>
<span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
   users<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Joe"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Jane"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"5678"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Tony"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"9012"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Merry"</span><span class="token punctuation">;</span>
users<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"5678"</span><span class="token punctuation">;</span>
<span class="token comment">// 使用迴圈顯示陣列值</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> users<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼顯示二維陣列的值，供五列，每列擁有二個元素。</p>
</li>
</ul>
<h3 id="4-JavaScript-的-Date-物件"><a href="#4-JavaScript-的-Date-物件" class="headerlink" title="4. JavaScript 的 Date 物件"></a>4. JavaScript 的 Date 物件</h3><p>Date 物件可以取得電腦的系統時間和日期，並且提供相關方法可以將它轉換成所需的日期或時間資料。</p>
<h4 id="4-1-取得日期和時間"><a href="#4-1-取得日期和時間" class="headerlink" title="4.1 取得日期和時間"></a>4.1 取得日期和時間</h4><ul>
<li><p>物件在使用 new 運算字建立物件後，就可以取得系統的時間和日期資料，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> dttoday <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼建立 Date 物件後，可以使用下表方法取得時間和日期資料，其說明如下表所示:</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">getDate()</td>
<td align="left">傳回日期值 1 ~ 31</td>
</tr>
<tr>
<td align="left">getDay()</td>
<td align="left">傳回星期值 0 ~ 6,也就是星期日到星期六</td>
</tr>
<tr>
<td align="left">getMonth()</td>
<td align="left">傳回月份值 0 ~ 11，也就是一到十二月</td>
</tr>
<tr>
<td align="left">getFullYear()</td>
<td align="left">傳回完整年份，例如: 2014</td>
</tr>
<tr>
<td align="left">getYear()</td>
<td align="left">傳回年份，如果在 1900~1999 之間，傳回後兩碼，例如: 1999年傳回99,否則傳回完整年份</td>
</tr>
<tr>
<td align="left">getHours()</td>
<td align="left">傳回小時 1 ~ 31</td>
</tr>
<tr>
<td align="left">getMinutes()</td>
<td align="left">傳回分鐘 1 ~ 31</td>
</tr>
<tr>
<td align="left">getSeconds()</td>
<td align="left">傳回秒數 1 ~ 31</td>
</tr>
<tr>
<td align="left">getMilliseconds()</td>
<td align="left">傳回千分之一秒為單位的秒數 1 ~ 31</td>
</tr>
<tr>
<td align="left">getTime()</td>
<td align="left">傳回自 1/1/1970 年開始的秒數，以千分之一(毫秒)為單位</td>
</tr>
</tbody></table>
</li>
<li><p>範例:<br>使用 Date 物件方法取得系統時間、日期和星期。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>取得日期時間<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">var</span> weekday<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"星期日"</span><span class="token punctuation">,</span><span class="token string">"星期一"</span><span class="token punctuation">,</span><span class="token string">"星期二"</span><span class="token punctuation">,</span><span class="token string">"星期三"</span><span class="token punctuation">,</span><span class="token string">"星期四"</span><span class="token punctuation">,</span><span class="token string">"星期五"</span><span class="token punctuation">,</span><span class="token string">"星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> dttoday <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 取得系統日期</span>
<span class="token keyword">var</span> output <span class="token operator">=</span> dttoday<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">;</span>
output <span class="token operator">+=</span> <span class="token punctuation">(</span>dttoday<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">;</span>
output <span class="token operator">+=</span> dttoday<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"系統日期: "</span> <span class="token operator">+</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 取得系統時間</span>
output <span class="token operator">=</span> dttoday<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">;</span>
output <span class="token operator">+=</span> dttoday<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">;</span>
output <span class="token operator">+=</span> dttoday<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"系統時間: "</span> <span class="token operator">+</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>weekday<span class="token punctuation">[</span>dttoday<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼顯示使用 Date 物件方法取得系統日期、時間和今天是星期幾。</p>
</li>
<li><p>範例:</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
     <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//現在時間</span>
   
     <span class="token keyword">let</span> year <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">//現在月，會有問題，因是陣列資料，抓的是索引值 [1,2,3,4,5,6,7,8,9,10,11,12]</span>
     <span class="token comment">//let month= d.getMonth();</span>
     <span class="token keyword">let</span> month<span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
   
     <span class="token comment">//日</span>
     <span class="token keyword">let</span> date <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
     <span class="token comment">//星期</span>
     <span class="token comment">//[0,1,2,3,4,5,6]，雖是陣列，但 0 是星期日,　除了星期日外1 ~ 6 不會有問題</span>
     <span class="token keyword">let</span> day  <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>  　　<span class="token comment">//現在年</span>
     <span class="token comment">//console.log(month); 　//現在月，會有問題，抓的是索引值 [1,2,3,4,5,6,7,8,9,10,11,12]</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span> 
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  　　<span class="token comment">//現在日</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>   　　<span class="token comment">//現在星期</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>//星期日顯示的解決:<br>原:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> day  <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>改:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> day  <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>day <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     day <span class="token operator">=</span> <span class="token string">"日"</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>//但這樣改法，星期日表示用中文的 “日”, 其他卻是數字？所以用下方法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> day  <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> dayArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"日"</span><span class="token punctuation">,</span> <span class="token string">"一"</span><span class="token punctuation">,</span> <span class="token string">"二"</span><span class="token punctuation">,</span> <span class="token string">"三"</span><span class="token punctuation">,</span> <span class="token string">"四"</span><span class="token punctuation">,</span> <span class="token string">"五"</span><span class="token punctuation">,</span> <span class="token string">"六"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> dayArray_en <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"SUN"</span><span class="token punctuation">,</span> <span class="token string">"MON"</span><span class="token punctuation">,</span> <span class="token string">"TUE"</span><span class="token punctuation">,</span> <span class="token string">"WED"</span><span class="token punctuation">,</span> <span class="token string">"THU"</span><span class="token punctuation">,</span> <span class="token string">"FRI"</span><span class="token punctuation">,</span> <span class="token string">"SAT"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> dayArray_jp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"日曜日"</span><span class="token punctuation">,</span> <span class="token string">"月曜日"</span><span class="token punctuation">,</span> <span class="token string">"火曜日"</span><span class="token punctuation">,</span> <span class="token string">"水曜日"</span><span class="token punctuation">,</span> <span class="token string">"木曜日"</span><span class="token punctuation">,</span> <span class="token string">"金曜日"</span><span class="token punctuation">,</span> <span class="token string">"土曜日"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dayArray<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h4 id="4-2-設定日期和時間"><a href="#4-2-設定日期和時間" class="headerlink" title="4.2 設定日期和時間"></a>4.2 設定日期和時間</h4><ul>
<li><p>Date 物件提供數種方法來存取日期與時間，注意!這些設定方法並不是修改電腦的系統日期和時間，只是設定Date 物件儲存的日期和時間，Date 物件設定日期和時間的相關說明如下所示:</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">setDate()</td>
<td align="left">設定 Date 物件的日期 1 ~ 31</td>
</tr>
<tr>
<td align="left">setMonth()</td>
<td align="left">設定 Date 物件的月份 0 ~ 11</td>
</tr>
<tr>
<td align="left">setFullYear()</td>
<td align="left">設定 Date 物件的完整年份</td>
</tr>
<tr>
<td align="left">setYear()</td>
<td align="left">設定 Date 物件的年份，在 1900~1999 間只需使用兩位，例如: 1999使用99，否則需要使用完整年份</td>
</tr>
<tr>
<td align="left">setHours()</td>
<td align="left">設定 Date 物件的小時 0 ~ 23</td>
</tr>
<tr>
<td align="left">setMinutes()</td>
<td align="left">設定 Date 物件的分鐘 0 ~ 59</td>
</tr>
<tr>
<td align="left">setSeconds()</td>
<td align="left">設定 Date 物件的秒數 0 ~ 59</td>
</tr>
<tr>
<td align="left">setMilliseconds()</td>
<td align="left">設定 Date 物件的秒數，以千分之一秒為單位，0 ~ 999</td>
</tr>
<tr>
<td align="left">setTime()</td>
<td align="left">設定 Date 物件的時間，自1/1/1970 年開始，以千分之一為單位</td>
</tr>
</tbody></table>
<p>Date 物件提供一組對應方法，可以設定和取得UTC日期和時間，例如:setDate() 方法對應 setUTCDate(); getHours() 方法對應 getUTCHours()等。</p>
<blockquote>
<p>「UTC」(Universal Coordinated Standard) 稱為國際標準時間業就是「GMT」(Greenwich Mean Time) 格林威治標準時間，如下所示:<br>Wed Nov 11 04:30:14 UTC+0800 2020<br>上述字串是本地的日期時間，UTC+0800 表示本地時間轉換為UTC時間再加8小時，可以使用 toGMTString() 方法將本地時間轉換成GMT時間，也就是UTC時間。</p>
</blockquote>
</li>
<li><p>範例:<br>使用 Date 物件方法設定物件的日期和時間。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>設定日期時間<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">var</span> newdate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 設定日期</span>
newdate<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newdate<span class="token punctuation">.</span><span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 11月</span>
newdate<span class="token punctuation">.</span><span class="token function">setFullYear</span><span class="token punctuation">(</span><span class="token string">"2020"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newdate<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newdate<span class="token punctuation">.</span><span class="token function">setMinutes</span><span class="token punctuation">(</span><span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>newdate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼顯示使用 Date 物件方法設定的日期和時間，這是 Date 物件記錄的時間和日期，並不是電腦的系統日期和時間。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">getTimezoneOffset()</td>
<td align="left">傳回本地時間和GMT的時間差，以分為單位</td>
</tr>
<tr>
<td align="left">toGMTString()</td>
<td align="left">設定 Date 物件的月份 0 ~ 11</td>
</tr>
<tr>
<td align="left">toLocalString()</td>
<td align="left">設定 Date 物件的完整年份</td>
</tr>
<tr>
<td align="left">parse(Date)</td>
<td align="left">設定 Date 物件的年份，在 1900~1999 間只需使用兩位，例如: 1999使用99，否則需要使用完整年份</td>
</tr>
<tr>
<td align="left">UTC(U,M,D..)</td>
<td align="left">設定 Date 物件的小時 0 ~ 23</td>
</tr>
<tr>
<td align="left">setMinutes()</td>
<td align="left">設定 Date 物件的分鐘 0 ~ 59</td>
</tr>
<tr>
<td align="left">setSeconds()</td>
<td align="left">設定 Date 物件的秒數 0 ~ 59</td>
</tr>
<tr>
<td align="left">setMilliseconds()</td>
<td align="left">設定 Date 物件的秒數，以千分之一秒為單位，0 ~ 999</td>
</tr>
<tr>
<td align="left">setTime()</td>
<td align="left">設定 Date 物件的時間，自1/1/1970 年開始，以千分之一為單位</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="4-3-日期和時間的轉換"><a href="#4-3-日期和時間的轉換" class="headerlink" title="4.3 日期和時間的轉換"></a>4.3 日期和時間的轉換</h4><ul>
<li><p>Date 物件提供日期和時間轉換方法，可以取得時間差、轉換成千分之一秒數或輸出成字串等轉換操作，GMT為格林威治標準時間，相關方法說明，如下表:</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">getTimezoneOffset()</td>
<td align="left">傳回本地時間和 GMT 的時間差，以分為單位</td>
</tr>
<tr>
<td align="left">toGMTString()</td>
<td align="left">傳回轉換成 GMT 時間的字串</td>
</tr>
<tr>
<td align="left">toLocalString()</td>
<td align="left">傳回將GMT轉換成本地時間的字串</td>
</tr>
<tr>
<td align="left">parse(Date)</td>
<td align="left">傳回參數 Date 物件從 1/1/1970 到本地時間的毫秒數，以千分之一為單位</td>
</tr>
<tr>
<td align="left">UTC(Y,M,D…)</td>
<td align="left">傳回參數年-月-日-時-分-秒從 1/1/1970 到 GMT 時間的毫秒數，以千分之一秒為單位</td>
</tr>
</tbody></table>
<p>上表 parse() 和 UTC() 方法和其他時間轉換方法在使用上有些不同，這2個方法不用建立物件，因為它是Date()建構函數的方法(相當於其他語言的靜態/類別方法)，如下所示:</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">document.write(Date.parse(dttoday));
document.write(Date.UTC(2020,04,30,12,1,0));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上述程式碼直接使用 Date.parse() 和 Date.UTC() 執行方法，參數 dttoday 是 Date 物件變數 dttoday</p>
</li>
</ul>
<h4 id="4-4-取得系統的時間"><a href="#4-4-取得系統的時間" class="headerlink" title="4.4 取得系統的時間"></a>4.4 取得系統的時間</h4><p>JavaScript 的 Date 物件可以取得系統時間，換句話說，只需定是執行 JavaScript 函數，就可以使用 Date 物件建立網頁小時鐘。</p>
<p>JavaScript 小時鐘需要使用 Window 物件的計時器方法 <code>setTimeOut()</code>，方法參數可以設定在間隔時間後執行指訂函數或網頁，對應的 clearTimeout() 方法可以清除計數器.</p>
<ul>
<li><p>範例:<br>使用 Date 物件和 Window 物件的計時器方法建立網頁小時鐘，使用GIT圖檔，顯示系統時間。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 顯示數字圖片</span>
<span class="token keyword">function</span> <span class="token function">displayClock</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> dig <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> timetag<span class="token operator">=</span><span class="token string">"&lt;img src='images\\"</span> <span class="token operator">+</span> dig <span class="token operator">+</span> <span class="token string">".gif'&gt;"</span><span class="token punctuation">;</span>
  dig <span class="token operator">=</span> num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
  timetag <span class="token operator">+=</span><span class="token string">"&lt;img src='images\\"</span> <span class="token operator">+</span> dig <span class="token operator">+</span> <span class="token string">".gif'&gt;"</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> timetag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 停止計時</span>
<span class="token keyword">function</span> <span class="token function">stopClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 開始計時</span>
<span class="token keyword">function</span> <span class="token function">startClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 取得時間</span>
  <span class="token keyword">var</span> hours <span class="token operator">=</span> <span class="token function">displayClock</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> minutes <span class="token operator">=</span> <span class="token function">displayClock</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token function">displayClock</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 顯示時間</span>
  show<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> hours <span class="token operator">+</span> minutes <span class="token operator">+</span> seconds<span class="token punctuation">;</span>
  timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"startClock()"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>startClock()<span class="token punctuation">"</span></span> <span class="token attr-name">onunload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stopClock()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述結果是網頁小時鐘，顯示的並不是靜態時間，而是真的會走得小時鐘。</p>
</li>
</ul>
<h3 id="5-JavaScript-的-Math-物件"><a href="#5-JavaScript-的-Math-物件" class="headerlink" title="5. JavaScript 的 Math 物件"></a>5. JavaScript 的 Math 物件</h3><p>JavaScript 的 Math 物件擁有數學常數和函數的屬性和方法，Math 物件不同於 JavaScript 其他內建物建，Math 物件是由腳本語言引擎所建立，所以不需要使用 new 運算子建立物件，在 JavaScript 程式碼可以直接使用 Math 物件的屬性和方法，即其他物件導向語言的靜態/類別方法。</p>
<h4 id="5-1-Math-物件的屬性"><a href="#5-1-Math-物件的屬性" class="headerlink" title="5.1 Math 物件的屬性"></a>5.1 Math 物件的屬性</h4><ul>
<li><p>Math 物件的屬性都是一些數學常數，屬性的說明如下表所示:</p>
<table>
<thead>
<tr>
<th align="left">屬性</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">E</td>
<td align="left">傳回本地時間和 GMT 的時間差，以分為單位</td>
</tr>
<tr>
<td align="left">LN2</td>
<td align="left">ln2  = 0.6931471805599453</td>
</tr>
<tr>
<td align="left">LN10</td>
<td align="left">ln10 = 2.302585092994046</td>
</tr>
<tr>
<td align="left">LOG2E</td>
<td align="left">$\log_2e$ = 1.4426950408889633</td>
</tr>
<tr>
<td align="left">LOG10E</td>
<td align="left">$\log_e$  = 0.4342944819032518</td>
</tr>
<tr>
<td align="left">PI</td>
<td align="left">圓周率 = 3.141592653589793</td>
</tr>
<tr>
<td align="left">SORT1_2</td>
<td align="left">$\sqrt{\frac {1}{2}}$ = 0.7071067811865476</td>
</tr>
<tr>
<td align="left">SORT2</td>
<td align="left">$\sqrt{2}$ = 1.4142135623730951</td>
</tr>
</tbody></table>
</li>
<li><p>範例<br>在 JavaScript 程式顯示 Math 物件的屬性清單。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Math物件的屬性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"E: "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token constant">E</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"LN2: "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token constant">LN2</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"LN10: "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token constant">LN10</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"LOG2E: "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token constant">LOG2E</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"LOG10E: "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token constant">LOG10E</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"PI: "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"SQRT1_2: "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token constant">SQRT1_2</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"SQRT2: "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token constant">SQRT2</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述顯示 Math 物件的屬性名稱和值，這些都是數學常數。</p>
</li>
</ul>
<h4 id="5-2-Math-物件的亂數、最大和最小值"><a href="#5-2-Math-物件的亂數、最大和最小值" class="headerlink" title="5.2 Math 物件的亂數、最大和最小值"></a>5.2 Math 物件的亂數、最大和最小值</h4><ul>
<li><p>Math 數學物件，提供對資料的數學計算、建立亂數、最大值和最小值的方法，相關方法的說明，如下表示:</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">max(value1,value2)</td>
<td align="left">傳回2個參數中的最大值</td>
</tr>
<tr>
<td align="left">min(value1,value2)</td>
<td align="left">傳回2個參數中的最小值</td>
</tr>
<tr>
<td align="left">random()</td>
<td align="left">結果為0-1間的一個隨機數(包括0,不包括1)</td>
</tr>
<tr>
<td align="left">round(value)</td>
<td align="left">將參數值四捨五入後傳回</td>
</tr>
<tr>
<td align="left">ceil(n)</td>
<td align="left">返回大於等於 n 的最小整數</td>
</tr>
<tr>
<td align="left">ceil(Math.random()*10)</td>
<td align="left">獲取1到10的隨機整數，取0的機率極小</td>
</tr>
<tr>
<td align="left">floor(num)</td>
<td align="left">引數num為一個數值，函式結果為num的整數部分</td>
</tr>
<tr>
<td align="left">floor(Math.random()*10)</td>
<td align="left">可均衡獲取0到9的隨機整數。</td>
</tr>
<tr>
<td align="left">round(num)</td>
<td align="left">引數num為一個數值，函式結果為num四捨五入後的整數</td>
</tr>
<tr>
<td align="left">round(Math.random())</td>
<td align="left">可均衡獲取0到1的隨機整數。</td>
</tr>
<tr>
<td align="left">round(Math.random()*10)</td>
<td align="left">獲取0到10的隨機整數，其中獲取最小值0和最大值10的機率少一半。</td>
</tr>
</tbody></table>
</li>
<li><p>範例一:<br>使用 Math 物件的方法取得2個數字的最大值和最小值，然後取得0-10和0-100之間的亂數值。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Math物件的亂數、最大和最小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"最大值max(34, 78): "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"最小值min(34, 78): "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"四捨五入round(34.567):"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">34.567</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"四捨五入round(34.567):"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">34.467</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"亂數random(): "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 0-10的亂數</span>
  <span class="token keyword">var</span> no <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"0-10亂數: "</span> <span class="token operator">+</span> no <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 0-100的亂數</span>
  no <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"0-100亂數: "</span> <span class="token operator">+</span> no <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  ```  

- 範例二
  使用 Math 物件的方法取得亂數

  ```javascript
  //方案一
  Math.random().toString(36).substr(2)

  //方案二
  function randomWord(randomFlag, min, max) {
    var str = "",
    range = min,
    arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
           'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C',
           'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
           'X', 'Y', 'Z'
    ];

    // 隨機產生
    if (randomFlag) {
      range = Math.round(Math.random() * (max - min)) + min;
    }
    for (var i = 0; i &lt; range; i++) {
      pos = Math.round(Math.random() * (arr.length - 1));
      str += arr[pos];
    }
    return str;
  }

  //方案三
  // 指定具体 len 位数
  function getRandomStr(len) {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i &lt; len; i++)
            /* 
              if possible.length = 62 
              Math.floor(Math.random() * 62 =&gt; 取 0 ~ 61 的整數
              取出的 10 個字是 "ABCDEFGHIJ" 其中之一
            */ 
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            return text;
  }

  //生成3 - 32 位隨機串：
  console.log(randomWord(true, 3, 32))
  //生成43位隨機串：
  console.log(randomWord(false, 43))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>上述顯示 Math 物件方法取得最大、最小值、亂數和四捨五入方法的執行結果。</p>
</blockquote>
</li>
</ul>
<h4 id="5-3-Math-物件的數學方法"><a href="#5-3-Math-物件的數學方法" class="headerlink" title="5.3 Math 物件的數學方法"></a>5.3 Math 物件的數學方法</h4><ul>
<li><p>Math 物件提供數學的三角函數和指數的方法，相關方法的說明，如下表所示:</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">abs()</td>
<td align="left">傳回絕對值</td>
</tr>
<tr>
<td align="left">acos()</td>
<td align="left">反餘弦函數</td>
</tr>
<tr>
<td align="left">asin()</td>
<td align="left">反正弦函數</td>
</tr>
<tr>
<td align="left">atan()</td>
<td align="left">反正切函數</td>
</tr>
<tr>
<td align="left">ceil()</td>
<td align="left">傳回大於或等於參數的最小整數</td>
</tr>
<tr>
<td align="left">cos()</td>
<td align="left">餘弦函數</td>
</tr>
<tr>
<td align="left">exp()</td>
<td align="left">自然數的指數 $\ e^2 $</td>
</tr>
<tr>
<td align="left">floor()</td>
<td align="left">傳回大於或等於參數的最大整數</td>
</tr>
<tr>
<td align="left">log()</td>
<td align="left">自然對數</td>
</tr>
<tr>
<td align="left">pow()</td>
<td align="left">次方</td>
</tr>
<tr>
<td align="left">sin()</td>
<td align="left">正弦函數</td>
</tr>
<tr>
<td align="left">sqrt()</td>
<td align="left">傳回參數的平方根</td>
</tr>
<tr>
<td align="left">tan()</td>
<td align="left">正切函數</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="6-JavaScript-的-Error-物件"><a href="#6-JavaScript-的-Error-物件" class="headerlink" title="6. JavaScript 的 Error 物件"></a>6. JavaScript 的 Error 物件</h3><p>例外處理(Exception Handling) 是JavaScript 的錯誤控制機構，當程式碼有錯誤時，可以在程式出錯時提供解決方案。</p>
<h4 id="6-1-JavaScript-的例外處理"><a href="#6-1-JavaScript-的例外處理" class="headerlink" title="6.1 JavaScript 的例外處理"></a>6.1 JavaScript 的例外處理</h4><p>JavaScript 的 Error 物件可以取得執行時的錯誤資料，建立 JavaScript 程式碼的例外處理。</p>
<h5 id="6-1-1-Error-物件"><a href="#6-1-1-Error-物件" class="headerlink" title="6.1.1 Error 物件"></a>6.1.1 Error 物件</h5><ul>
<li><p>Error 物件儲存 JavaScript 執行時產生的錯誤資訊，當 JavaScript 執行階段的錯誤產生後，Error 物件會自動建立，此物件的屬性說明，如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">屬性</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">number</td>
<td align="left">錯誤碼，這是一個 32-bit 值，其中後 16-bit 才是真正的錯誤碼</td>
</tr>
<tr>
<td align="left">message</td>
<td align="left">錯誤訊息字串</td>
</tr>
<tr>
<td align="left">description</td>
<td align="left">如同 message 屬性，這也是錯誤說明的字串</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="6-1-2-JavaScript-例外處理程式敘述"><a href="#6-1-2-JavaScript-例外處理程式敘述" class="headerlink" title="6.1.2 JavaScript 例外處理程式敘述"></a>6.1.2 JavaScript 例外處理程式敘述</h5><ul>
<li><p>JavaScript 例外處理程式敘述是: <code>try/catch/finally</code> 可以處理 JavaScript 執行階段的錯誤，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述例外處理敘述可以分為三個程式區塊，如下所示:</p>
</li>
<li><p>try 程式區塊: 在此區塊的程式碼是 JavaScript 需要例外處理的程式碼。</p>
</li>
<li><p>catch 程式區塊: 如果try程式區塊的程式碼發生錯誤，在這個程式碼區塊傳入的參數e是Error物件，可以取得Error物件屬性的錯誤資訊，並且建立例外處理的程式碼。</p>
</li>
<li><p>finally 程式區塊: 這是一個選擇性的程式區塊，不論例外是否產生，都會執行此區塊的程式碼。</p>
</li>
<li><p>範例:<br>使用 <code>try/catch/finally</code> 程式敘述建立 JavaScript 執行階段的例外處理。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>JavaScript的例外處理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span> 
   x <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token comment">// 測試的錯誤程式碼</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 例外處理的程式碼</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"錯誤碼: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>number <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"錯誤說明(message): "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"錯誤說明(description): "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>description <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">finally</span> <span class="token punctuation">{</span>
   <span class="token comment">// 顯示測試值</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;hr/&gt;測試值x = "</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述可以看到取得 Error 物件顯示的錯誤訊息，測試變數 x 的值為 10。</p>
</li>
</ul>
<h4 id="6-2-JavaScript-多層的例外處理架構"><a href="#6-2-JavaScript-多層的例外處理架構" class="headerlink" title="6.2 JavaScript 多層的例外處理架構"></a>6.2 JavaScript 多層的例外處理架構</h4><ul>
<li><p>JavaScript 可以使用 try/catch/finally 程式敘述建立多層例外處理架構，例如: 兩層例外處理架構，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> 運算式
  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//第二層的例外處理</span>
    <span class="token operator">...</span>
    <span class="token keyword">throw</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//丟到外層的例外處理</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//第一層的例外處理</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式區塊擁有兩層例外處理敘述，第二層try程式區塊使用 throw 關鍵字產生使用者自訂的錯誤訊息。</p>
<p>在第二層catch程式區塊可以處理第二層try程式區塊的錯誤，如果不屬於第二層處理的錯誤，就使用throws關鍵字將錯誤丟到上一層catch程式區塊進行處理。</p>
</li>
<li><p>範例<br>使用兩層 <code>try/catch/finally</code> 程式敘述，第一層是 JavaScript 執行階段的例外處理；第二層是使用者自訂的例外處理。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>JavaScript多層的例外處理架構<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 第一層例外處理</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
   <span class="token comment">// 第二層例外處理</span>
   <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
         <span class="token comment">// 程式產生的錯誤訊息   </span>
         <span class="token keyword">throw</span> <span class="token string">"x等於零"</span><span class="token punctuation">;</span>   
      <span class="token keyword">else</span>
         x <span class="token operator">=</span> y<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 第二層的例外處理, 處理程式產生的錯誤</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token string">"x等於零"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"第二層的例外處理 : &lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"自訂的錯誤說明: "</span> <span class="token operator">+</span> e <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
       <span class="token punctuation">}</span>
       <span class="token keyword">else</span>  
           <span class="token comment">// 非內部處理的例外</span>
           <span class="token keyword">throw</span> e<span class="token punctuation">;</span>  <span class="token comment">// 丟到外層的例外處理 </span>
   <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 第一層的例外處理, JavaScript的執行錯誤</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"第一層的例外處理 : &lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"錯誤碼: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>number <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"錯誤說明: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>description <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">finally</span> <span class="token punctuation">{</span>
   <span class="token comment">// 顯示測試值</span>
   document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;hr/&gt;測試值x = "</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在上例可以看到測試變數x的值為1。所以顯示第一層的例外處理。錯誤訊息為 Error 物件的屬性，如果更改為 x =0, 此時的錯誤訊息是自訂的例外訊息。</p>
</li>
</ul>
<h3 id="7-物件的共用屬性和方法"><a href="#7-物件的共用屬性和方法" class="headerlink" title="7. 物件的共用屬性和方法"></a>7. 物件的共用屬性和方法</h3><p>JavaScript 內建物件擁有一些共用屬性和方法，這些屬性和方法可以使用在大部分的內建物件。</p>
<h4 id="7-1-JavaScript-物件的共用屬性"><a href="#7-1-JavaScript-物件的共用屬性" class="headerlink" title="7.1 JavaScript 物件的共用屬性"></a>7.1 JavaScript 物件的共用屬性</h4><ul>
<li><p>JavaScript 物件的 <code>constructor</code> 屬性是共用屬性，constructor 屬性可以取得建立物件使用的建構函數名稱，JavaScript 內建物件除了 Global 和 Math 物件外都支援此屬性。</p>
</li>
<li><p>在使用 new 運算子建立 test 物件後，就可以使用 if 條件檢查物件的建構函數，如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>constructor <span class="token operator">==</span> String<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上述 JavaScript 程式碼檢查物件的建構函數是否為 String()。</p>
</li>
</ul>
<h4 id="7-2-JavaScript-物件的共用方法"><a href="#7-2-JavaScript-物件的共用方法" class="headerlink" title="7.2 JavaScript 物件的共用方法"></a>7.2 JavaScript 物件的共用方法</h4><p>JavaScript 物件常用的共用方法有 toString() 和 valueOf()，這兩個方法可以顯示物件內容。</p>
<ul>
<li><p>toString() 方法<br>toString() 方法可以傳回物件的內容，傳回值為字串，其語法如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼可以輸出物件內容的字串，各內建物件輸出的內容，如下所示:</p>
<table>
<thead>
<tr>
<th align="left">物件</th>
<th align="left">傳回字串</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Array</td>
<td align="left">將陣列元素轉換成「,」符號分隔的字串</td>
</tr>
<tr>
<td align="left">Boolean</td>
<td align="left">true傳回字串”true”;false 傳回字串”false”</td>
</tr>
<tr>
<td align="left">Date</td>
<td align="left">傳回日期和時間的字串</td>
</tr>
<tr>
<td align="left">Error</td>
<td align="left">傳回錯誤訊息的字串</td>
</tr>
<tr>
<td align="left">Function</td>
<td align="left">傳回字串格式”function name(){…}”,其中 name 為呼叫toString()方法的函數名稱</td>
</tr>
<tr>
<td align="left">Number</td>
<td align="left">傳回數值字串</td>
</tr>
<tr>
<td align="left">String</td>
<td align="left">傳回Sring物件的內容</td>
</tr>
</tbody></table>
</li>
<li><p>valueOf() 方法<br>valueOf() 方法可以傳回物件值，不過 Math 和 Error 物件不支援 valueOf() 方法，其語法如下所示:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">object<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述程式碼可以輸出物件內容，各內建物件輸出的內容，如下所示:</p>
<table>
<thead>
<tr>
<th align="left">物件</th>
<th align="left">傳回字串</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Array</td>
<td align="left">將陣列元素轉換成「,」符號分隔的字串，如同Array.toString()和Array.join()方法</td>
</tr>
<tr>
<td align="left">Boolean</td>
<td align="left">傳回布林值</td>
</tr>
<tr>
<td align="left">Date</td>
<td align="left">傳回前晚到現在的秒數，以千分之一秒為單位</td>
</tr>
<tr>
<td align="left">Function</td>
<td align="left">傳回函數的本身</td>
</tr>
<tr>
<td align="left">Number</td>
<td align="left">傳回數字</td>
</tr>
<tr>
<td align="left">Object</td>
<td align="left">傳回物件本身</td>
</tr>
<tr>
<td align="left">String</td>
<td align="left">傳回字串</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="事件類型"><a href="#事件類型" class="headerlink" title="事件類型"></a>事件類型</h3><ol>
<li><p>傳統的事件<br>早已經存在並受到廣泛支援的事件。</p>
<ul>
<li><p>windows 事件</p>
<table>
<thead>
<tr>
<th align="left">事件名稱 (JS)</th>
<th align="left">事件名稱 (jQuery)</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onload</td>
<td align="left">load</td>
<td align="left">載入事件(HTML/IMG 影像/外部樣式表 全部載入完成)</td>
</tr>
<tr>
<td align="left">unonload</td>
<td align="left">unload</td>
<td align="left">當瀏覽器移除視窗或框架內的網頁時會觸發此事件</td>
</tr>
<tr>
<td align="left">onfocus</td>
<td align="left">focus</td>
<td align="left">當焦點移到瀏覽器視窗時會觸發此事件</td>
</tr>
<tr>
<td align="left">onblur</td>
<td align="left">blur</td>
<td align="left">當焦點從瀏覽器視窗移開時會觸發此事件</td>
</tr>
<tr>
<td align="left">onerror</td>
<td align="left">error</td>
<td align="left">當瀏覽器視窗發生錯誤時會觸發此事件</td>
</tr>
<tr>
<td align="left">onscroll</td>
<td align="left">scroll</td>
<td align="left">當瀏覽器視窗捲動時會觸發此事件</td>
</tr>
<tr>
<td align="left">onresize</td>
<td align="left">resize</td>
<td align="left">當瀏覽器視窗改變大小時會觸發此事件</td>
</tr>
</tbody></table>
<blockquote>
<p><code>focus</code>，<code>blur</code>，<code>error</code> 等事件也可能在其他元素上觸發(例如: <code>&lt;input&gt;</code>)，而 <code>scroll</code> 事件也可能在其他可捲動的元素上觸發</p>
</blockquote>
</li>
<li><p>鍵盤事件</p>
<table>
<thead>
<tr>
<th align="left">事件名稱 (JS)</th>
<th align="left">事件名稱 (jQuery)</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onkeydown</td>
<td align="left">keydown</td>
<td align="left">當使用者在元素上按下按鍵時會觸發此事件</td>
</tr>
<tr>
<td align="left">onkeyup</td>
<td align="left">keyup</td>
<td align="left">當使用者在元素上放開按鍵時會觸發此事件</td>
</tr>
<tr>
<td align="left">onkeypress</td>
<td align="left">keypress</td>
<td align="left">當使用者在元素上按下再放開按鍵時會觸發此事件</td>
</tr>
</tbody></table>
</li>
<li><p>滑鼠事件</p>
<table>
<thead>
<tr>
<th align="left">事件名稱 (JS)</th>
<th align="left">事件名稱 (jQuery)</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onmousedown</td>
<td align="left">mousedown</td>
<td align="left">當使用者在元素上按下滑鼠按鍵時會觸發此事件</td>
</tr>
<tr>
<td align="left">onmouseup</td>
<td align="left">mouseup</td>
<td align="left">當使用者在元素上放開滑鼠按鍵時會觸發此事件</td>
</tr>
<tr>
<td align="left">onmouseover</td>
<td align="left">mouseover</td>
<td align="left">當使用者將滑鼠移過元素時會觸發此事件</td>
</tr>
<tr>
<td align="left">onmousemove</td>
<td align="left">mousemove</td>
<td align="left">當使用者將滑鼠在元素上移動時會觸發此事件</td>
</tr>
<tr>
<td align="left">onmouseoou</td>
<td align="left">mouseout</td>
<td align="left">當使用者將滑鼠從元素上移開時會觸發此事件</td>
</tr>
<tr>
<td align="left">onmouswheel</td>
<td align="left">mousewheel</td>
<td align="left">當使用者在元素上滾動滑鼠滾輪時會觸發此事件</td>
</tr>
<tr>
<td align="left">onclick</td>
<td align="left">click</td>
<td align="left">當使用者在元素按一下滑鼠按鍵時會觸發此事件</td>
</tr>
<tr>
<td align="left">onmouswheel</td>
<td align="left">mousewheel</td>
<td align="left">當使用者在元素按兩下滑鼠按鍵時會觸發此事件</td>
</tr>
</tbody></table>
</li>
<li><p>表單事件</p>
<table>
<thead>
<tr>
<th align="left">事件名稱 (JS)</th>
<th align="left">事件名稱 (jQuery)</th>
<th align="left">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onsubmit</td>
<td align="left">submit</td>
<td align="left">當使用者傳送表單時會觸發此事件</td>
</tr>
<tr>
<td align="left">onreset</td>
<td align="left">reset</td>
<td align="left">當使用者清除表單時會觸發此事件</td>
</tr>
<tr>
<td align="left">onselect</td>
<td align="left">select</td>
<td align="left">當使用者在文字欄位選取文字時會觸發此事件</td>
</tr>
<tr>
<td align="left">onchange</td>
<td align="left">change</td>
<td align="left">當使用者在修改表單欄位時會觸發此事件</td>
</tr>
<tr>
<td align="left">onfocus</td>
<td align="left">focus</td>
<td align="left">當焦點移到表單欄位時會觸發此事件</td>
</tr>
<tr>
<td align="left">onblur</td>
<td align="left">blur</td>
<td align="left">當焦點從表單欄位移開時會觸發此事件</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>HTML5 事件<br>HTML5 提供 API 功能，新增許多事件處理。<br>例如: 對影像與聲音的 Video/Audio API 新增:<br><code>loadstart</code>，<code>progress</code>，<code>suspend</code>，<code>abort</code>，<code>error</code>，<code>emptied</code>，<code>stalled</code>，<code>loadedmetadata</code>，<code>loadeddata</code>，<code>canplay</code>，<code>canplaythrough</code> 等事件。</p>
</li>
<li><p>DOM 事件<br>指的是 W3C 提出的 Document Object Model(DOM)Level 3 Events Specification，除了將傳統的事件標準化之外，還新增一些新的事件，例如:<br><code>focusin</code>，<code>focusout</code>，<code>mouseenter</code>，<code>mouseleave</code>，<code>textinput</code>，<code>wheel</code> 等，可以參考官方文件: <code>http://www.w3.org/TR/uievents</code></p>
</li>
<li><p>觸控事件<br>指針對平、手機裝置，由 W3C 所制定的觸控規格，裡面主要有 <code>touchstart</code>，<code>touchmove</code>，<code>touchend</code>，<code>touchcancel</code> 等事件。<br>參考網站: <code>http://www.w3.org/TR/touch-events/</code>， Apple 或 iPad 可參考 <code>https://developer.apple.com/</code></p>
</li>
</ol>
<h3 id="加入監聽事件"><a href="#加入監聽事件" class="headerlink" title="加入監聽事件"></a>加入監聽事件</h3><ul>
<li><p>JS<br><code>.addEventListener("事件名稱",函數[,useCapture])</code></p>
<blockquote>
<p>useCapture: false 預設，表示當內層和外層元素都有發生指定的事件時，先從內層元素開始執行處理程式</p>
</blockquote>
</li>
<li><p>jQuery<br><code>.bind("事件名稱",函數)</code>                <strong>只能對當前頁面上已有的元素添加事件綁定</strong></p>
</li>
</ul>
<h3 id="移除監聽事件"><a href="#移除監聽事件" class="headerlink" title="移除監聽事件"></a>移除監聽事件</h3><ul>
<li><p>JS<br><code>removeEventListener("事件名稱",函數名稱[,useCapture]);</code></p>
</li>
<li><p>jQuery<br><code>.unbind("事件名稱",函數名稱);</code>          <strong>移除該事件上綁定的所有監聽函數</strong><br><code>.unbind();</code>                           <strong>移除該元素上所有事件綁定</strong></p>
</li>
</ul>
<blockquote>
<p>強調: 要想移除事件監聽, 必須使用有名的函數綁定事件監聽；如果添加事件監聽時使用的是匿名函數,則不可能移除。</p>
</blockquote>
<h3 id="實用範例"><a href="#實用範例" class="headerlink" title="實用範例"></a>實用範例</h3><ol>
<li><p>列印網頁</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">   
   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ol>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>webduino</title>
    <url>/webdunio/20210204-webdunio/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="資源"><a href="#資源" class="headerlink" title="資源"></a>資源</h2><ul>
<li><a href="https://github.com/webduinoio">GitHub</a></li>
</ul>
<h2 id="Webdunio-與-Adrunio-的差異"><a href="#Webdunio-與-Adrunio-的差異" class="headerlink" title="Webdunio 與 Adrunio 的差異"></a>Webdunio 與 Adrunio 的差異</h2><table>
<thead>
<tr>
<th></th>
<th>Ardunio</th>
<th>Webdunio</th>
</tr>
</thead>
<tbody><tr>
<td>開發語言</td>
<td>C/C++</td>
<td>HTML/Javascript</td>
</tr>
<tr>
<td>開發環境</td>
<td>Ardunio IDE</td>
<td>瀏覽器、網頁編輯器</td>
</tr>
<tr>
<td>連接方式</td>
<td>USB、藍芽</td>
<td>WiFI、WebSpcket</td>
</tr>
<tr>
<td>更新程式</td>
<td>連接燒錄</td>
<td>立即更新、連線燒錄</td>
</tr>
</tbody></table>
<blockquote>
<p>Ardunio 屬單機作業，不需連接伺服器端，即可獨立工作開發。<br> Webdunio 屬連線作業，需連接上伺服器(雲端平台)，是線上開發。</p>
</blockquote>
<h2 id="Webduino-的開發模式"><a href="#Webduino-的開發模式" class="headerlink" title="Webduino 的開發模式"></a>Webduino 的開發模式</h2><p>要說是 Webduino 開發模式，不如說是「Web 開發模式」，簡單來說就是如果要「透過網頁」控制物聯網的開發板，就必須在網頁裡頭載入對應的 JavaScript，這樣才能使用對應的 API 來操控 開發板的腳位 (其實就跟網頁載入 JQuery 一模一樣)，舉例來說，當我們已經載入了對應的 JavaScript，只要網頁裡綁定一個 <code>led.on()</code> 的事件，對應的 led 燈就會亮起</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212230450.png" alt="20210212230450"></p>
<p><a data-fancybox="gallery" href="hhttps://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212230450.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212230450_s.png" class="nofancybox  img-center"></a></p>
<p>常見的物聯網連線控制的方法有四種：**網際網路控制 (W-Fi)、區域網路控制 (WebSocket)、藍芽 (Bluetooth) 和序列埠 (Serial Port)，</p>
<p>這四種方式各有各的好處，舉例來說要在台灣控制美國的裝置，就必須使用 Wi-Fi 控制，如果要一次穩定的控制「手邊的」多台裝置，就可以考慮 WebSocket 和 Bluetooth 連線，如果只想單純接線控制，就可以採用 Serial Port 的做法。</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212230707.png"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212230707_s.png" class="nofancybox  img-center"></a></p>
<p><img src="" alt="20210212230707"></p>
<h2 id="連線控制方法"><a href="#連線控制方法" class="headerlink" title="連線控制方法"></a>連線控制方法</h2><h2 id="元件介紹"><a href="#元件介紹" class="headerlink" title="元件介紹"></a>元件介紹</h2><h3 id="1-玩具與馬達"><a href="#1-玩具與馬達" class="headerlink" title="1. 玩具與馬達"></a>1. 玩具與馬達</h3><h4 id="1-1-伺服馬達"><a href="#1-1-伺服馬達" class="headerlink" title="1.1. 伺服馬達"></a>1.1. 伺服馬達</h4><ul>
<li><p>概要<br>伺服馬達之所以叫做「伺服」馬達，是因為「伺服 servo」表示馬達會依照指示命令動作，由程式要馬達轉幾度，馬達就會轉幾度，但伺服馬達有機械結構上的限制，旋轉的角度是 180 度，但並非完全的 180 度，可能是 1 度到 180 度，或是 -2 度到 177 度都有可能，不過這些誤差都不影響這個範例的實作，這個範例將會介紹如何用 Blockly、HTML 與 JavaScript 去控制伺服馬達。</p>
</li>
<li><p>範例影片展示<br>影片對應範例：<a href="https://blockly.webduino.io/?page=tutorials/servo-1">https://blockly.webduino.io/?page=tutorials/servo-1</a></p>
<div class="video-container">
  <iframe width="560" height="316" src="https://www.youtube.com/embed/Dar2pSWCSL8" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
</li>
<li><p>接線與實作<br>由於伺服馬達需要的電流量較大，因此必須採用獨立電源或是直接使用開發板上頭的 <code>VCC</code>，才能供應伺服馬達足夠的電流量，伺服馬達具有三條電線。紅色的為正電，深咖啡色是接地 <code>GND</code>，橘色的則是訊號線，而伺服馬達的訊號源接在 <code>11</code> 的腳位即可。</p>
<blockquote>
<p>由於 Webduino 支援開發板種類只會越來越多，接線圖先使用馬克一號與 Fly 示範，對於其他開發板來說，只要 訊號腳接數位腳 (數字)，仍會有一樣的效果。</p>
</blockquote>
</li>
<li><p>馬克一號接線示意圖：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211235139.png" alt="馬克一號接線伺服馬達"></p>
</li>
<li><p>Fly 接線示意圖：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211235321.png" alt="FLY 接線伺服馬達"></p>
</li>
<li><p>基本操作<br>打開 <a href="https://blockly.webduino.io/">Webduino Blockly 編輯工具</a>，在畫面中放入開發板積木，填入 Device ID，在開發板內放入伺服馬達的積木，腳位設定 10，伺服馬達變數名稱設定為 servo。</p>
<blockquote>
<p>開發板的積木在「開發板控制」目錄下，伺服馬達積木在「玩具及馬達 &gt; 伺服馬達」的目錄下。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211235415.png" alt="伺服馬達 Blockly"></p>
</blockquote>
<p>放入「伺服馬達 servo 旋轉角度」的積木，可以透過圓餅圖調整角度，或直接使用數字積木顯示度數，伺服馬達角度區間為 0~180 度。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211235442.png" alt="伺服馬達旋轉角度"></p>
<p>填入裝置 Device ID，確認開發板上線，點選右上方紅色按鈕執行，就可以看到伺服馬達旋轉到指定的角度。</p>
<blockquote>
<p>範例解答：<code>https://goo.gl/IHNms0</code></p>
</blockquote>
<p>進階一點，如果透過「迴圈」和「等待」的積木，就可以自訂伺服馬達左右擺動十次的效果，要實現這個效果，首先放入「重複 10 次」的迴圈積木，在裡頭第一個放入伺服馬達旋轉到 180 度的積木，後面銜接一個「等待 0.5 秒」的積木，接著再放入旋轉到 0 度的積木，再銜接一個「等待 0.5 秒」的積木，如此一來就會重複這些動作十次。</p>
<blockquote>
<p>迴圈的積木在「基本功能 &gt; 迴圈」目錄下，等待的積木在「進階功能 &gt; 等待」目錄下。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211235539.png" alt="伺服馬達 Blockly"></p>
</blockquote>
<p>填入裝置 Device ID，確認開發板上線，點選右上方紅色按鈕執行，就可以看到伺服馬達先旋轉到一側，接著就會旋轉到另一側，重複這樣一輪的動作十次。</p>
<blockquote>
<p>範例解答 (雲端平台)：<code>https://blocklypro.webduino.io/#7ylGNpvKze</code><br> 範例解答 ( 體驗版 )：<code>https://goo.gl/TKax8r</code></p>
</blockquote>
</li>
<li><p>網頁拉霸操控伺服馬達<br>接下來，我們可以透過網頁操控伺服馬達，打開 Webduino Blockly 的網頁互動測試區，下拉選單選擇「拉霸操作」，畫面裡會出現一個網頁拉霸，此時在右下角也會出現對應的積木功能可以選擇。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211235829.png" alt="網頁互動拉霸"></p>
<p>一開始先設定拉霸數值和伺服馬達旋轉角度都是 90 度，因為這樣才會先讓伺服馬達旋轉到中間的位置。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211235859.png" alt="網頁互動拉霸"></p>
<p>再來就是透過拉霸的積木，指定最大值、最小值、間距和預設值，拉動拉霸的時候，會顯示拉霸的數值，同時伺服馬達也會旋轉到這個角度。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211235919.png" alt="拉霸控制伺服馬達旋轉角度"></p>
<p>填入裝置 Device ID，確認開發板上線，點選右上方紅色按鈕執行，就可以使用網頁拉霸操控伺服馬達，拉霸往右伺服馬達就旋轉到右邊，往左就旋轉到左邊。</p>
<blockquote>
<p>範例解答 ( 雲端平台 )：<code>https://blocklypro.webduino.io/?demo=demo-area-06#XQdja1Ew9Q</code><br> 範例解答 ( 體驗版 )：<code>https://goo.gl/q8cBsb</code></p>
</blockquote>
</li>
<li><p>相關參考</p>
<ul>
<li>範例解答 - 伺服馬達基本操控(雲端平台)：<code>https://blocklypro.webduino.io/#7ylGNpvKze</code></li>
<li>範例解答 - 網頁操控伺服馬達 (雲端平台)：<code>https://blocklypro.webduino.io/?demo=demo-area-06#XQdja1Ew9Q</code></li>
<li>範例完整程式碼：<code>http://bin.webduino.io/susih/edit?html,js,output</code></li>
</ul>
</li>
</ul>
<h3 id="2-環境偵測"><a href="#2-環境偵測" class="headerlink" title="2. 環境偵測"></a>2. 環境偵測</h3><h4 id="2-1-溫濕度偵測"><a href="#2-1-溫濕度偵測" class="headerlink" title="2.1. 溫濕度偵測"></a>2.1. 溫濕度偵測</h4><ul>
<li><p>溫濕度偵測<br>溫濕度傳感器是接收外界環境變數最基本的傳感器，透過溫濕度傳感器，可以準確的偵測溫度與溼度的即時變化，若再搭配一些樣式表、圖表工具或後端資料庫，就可以整合成為非常有用的數據收集應用。</p>
</li>
<li><p>接線與實作<br>溫濕度傳感器有四支針腳，格子狀的一面面朝自己，左邊數來第一支針腳為 v (接 3.3V)，第二支為 data (接 5)，第三支沒有作用，第四支為 GND。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212101404.png" alt="溫濕度傳感器腳位介紹"></p>
<p>因為溫濕度的針腳較細，如果使用杜邦線連接會鬆脫，可使用麵包板進行連接。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212101422.png" alt="Webduino Smart 與溫濕度傳感器接線圖"></p>
</li>
<li><p>Webduino Blockly 操作解析<br>在畫面中放入開發板積木，開發板下拉選單選擇「Smart」，連線方式選擇「Wi-Fi」，填入 Device ID，在開發板內放入溫濕度傳感器的積木，腳位設定 5。</p>
<blockquote>
<p>取得 Device ID、使用 IP 來進行 WebSocket 操控，請參考：<a href="https://tutorials.webduino.io/zh-tw/docs/basic/board/smart-setup.html">Webduino Smart(初始化設定)</a></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212104618.png" alt="20210212104618"></p>
<p>放入使用溫濕度傳感器偵測的積木，設定為每 1000 毫秒 (1 秒) 偵測一次，並用網頁互動測試區的「顯示文字」顯示偵測到的數值，透過下拉選單可以選擇偵測溫度或是濕度，溫度單位為「攝氏幾度」，濕度則是「百分比」。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212104830.png" alt="顯示溫濕度傳感器偵測數值"></p>
<p>如果要同時顯示溫濕度，可以使用「建立字串」的積木來組合字串，一開始建立字串積木預設只有兩個缺口，透過點選藍色小齒輪，增加缺口的數量。</p>
<blockquote>
<p>建立字串、文字積木在「基本功能 &gt; 文字」目錄裡。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212104908.png" alt="增加顯示字串"></p>
<p>增加了缺口後，在缺口內填入對應的文字以及偵測到的溫濕度，如果需要換行，可輸入<br>就可以換行。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212104939.png" alt="溫濕度傳感器顯示設定"></p>
<p>同時也可以指定顯示文字的大小、行高的設定。</p>
<p>如果要使用文字大小、行高的積木，必須先打開「網頁互動測試區」，下拉選單選擇「顯示文字」，相關功能就會出現在左側「顯示文字」的目錄內。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212105020.png" alt="設定文字行高與大小"></p>
<p>填入裝置 Device ID，確認開發板上線，點選右上方紅色按鈕執行，就可以開始偵測環境的溫濕度了。</p>
<blockquote>
<p>如果偵測到的數值顯示 undefined，表示溫濕度接觸不良，通常稍微調整接觸的針腳即可解決。<br> 範例解答：<code>https://goo.gl/O3ueY3</code></p>
</blockquote>
</li>
<li><p>相關參考</p>
<ul>
<li>範例解答：<code>https://goo.gl/O3ueY3</code></li>
<li>完整程式碼：<code>http://bin.webduino.io/yetita/edit?html,js,output</code></li>
<li>其他溫濕度教學文：<a href="https://tutorials.webduino.io/zh-tw/docs/basic/sensor/dht.html">溫濕度</a></li>
</ul>
</li>
</ul>
<h3 id="3-無線感應"><a href="#3-無線感應" class="headerlink" title="3. 無線感應"></a>3. 無線感應</h3><h4 id="3-1-RFID"><a href="#3-1-RFID" class="headerlink" title="3.1. RFID"></a>3.1. RFID</h4><p>RFID 是 Radio Frequency IDentification 的縮寫，中文翻譯為「無線射頻辨識」，是一種常見的無線通訊技術，透過 RFID 識別裝置 (讀卡器) 所產生的「電磁場」，能讓附著在物品上的「電子標籤」獲得能量進而發送無線電頻率的訊號，RFID 在今日相當的普及，常見於庫存、資產、人員等的追蹤與管理，甚至許多的防偽、畜產管理也都有 RFID 的身影存在。</p>
<ul>
<li><p>範例影片展示</p>
<div class="video-container">
  <iframe width="560" height="316" src="https://www.youtube.com/embed/RrCAOgtPHdo" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
</li>
<li><p>接線與實作<br>這裏我們使用的 RFID 識別裝置的型號為 RC522，RC522 主要針對 13.56MHZ 的無線電頻率識別，工作電壓為 3.3V ，上頭共有八支接腳，分別是 SDA、SCK、MOSI、MISO、IRQ、GND、RST、VCC，其中 SDA、SCK、MOSI、MISO 負責訊號的輸入和輸出。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216112203.png" alt="20210216112203"></p>
</li>
<li><p><font color="blue">Arduino UNO + Webduino Fly 接線方式</font><br>Arduino UNO 本身的數位腳各自有各自的功能，因此我們將 SDA 接 10，SCK 接 13，MOSI 接 11，MISO 接 12，GND 接在 GND，3.3V 接在 3.3V 的位置。( IRQ 是中斷的腳位，RST 是重置的腳位，因為在本範例中不會用到，所以這裡就不需要接這兩個接腳 )<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216113252.png" alt="FLY 接線 RFID"></p>
<p>實際接線照片：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216113340.png" alt="FLY 接線 RFID"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216113402.png" alt="FLY 接線 RFID"></p>
</li>
<li><p><font color="blue">Webduino Smart 接線方式</font><br>如果是使用 Webduino Smart 腳位也有對應功能，所以接線方式就把 15 接 SDA，14 接 SCK，13 接 MOSI，12 接 MISO，GND 接 GND，3.3V 接 3.3V 的位置。</p>
<blockquote>
<p>如果要使用 Smart 操控，請使用<a href="https://tutorials.webduino.io/zh-tw/docs/cloud/index.html">雲端平台</a> 更新韌體，韌體版本有 reg 標記表示有支援 RFID。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216113538.png" alt="Smart 接線 RFID"></p>
<p>實際接線照片：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216113628.png" alt="Smart 接線 RFID"></p>
</li>
<li><p>基本操作<br>打開 Webduino Blockly 編輯工具 (<code>https://blockly.webduino.io</code>)，因為這個範例會用網頁「顯示文字」來顯示偵測到的每張 RFID 磁卡卡號，所以要先打開 Webduino Blockly 的網頁互動測試區，下拉選單選擇「顯示文字」，此時在右下角會出現對應的積木功能可以選擇。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216113709.png" alt="網頁互動測試"></p>
<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入 RFID 積木，名稱設定為 rfid，腳位設定為 SDA 10、SCK 13、MOSI 11、MISO 12。( 如果是 Smart 就選擇 SDA 15、SCK 14、MOSI 13、MISO 12 )</p>
<blockquote>
<p>RFID 相關的積木在「無線感應 &gt; RFID」目錄下。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216113859.png" alt="RFID 積木"></p>
<p>擺入 rfid 偵測訊號的積木，透過網頁顯示偵測到的代碼。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216113935.png" alt="RFID 偵測數值"></p>
<p>填入裝置 Device ID，確認開發板上線，點選右上方紅色按鈕執行，用 RFID 磁卡去接觸感應器，就可以看到每張卡的對應的卡號了。</p>
<blockquote>
<p>執行的時候有可能會發生「腳位選錯但仍正確讀取到卡號」的狀況，這是因為 RFID 程式底層不是使用數字，而是使用 SDA、SCK、MOSI 和 MISO 操控，在積木上的腳位則是方便使用者接線識別，不過如果實際接線接錯，仍然是無法順利運作的，要特別注意。<br>範例解答(雲端平台)：<code>https://blocklypro.webduino.io/?demo=demo-area-01#Xxl0OpoZ81</code><br>範例解答 (體驗版)：<code>https://goo.gl/FEcQvB</code></p>
</blockquote>
</li>
<li><p>相關參考</p>
<ul>
<li>範例解答 (雲端平台)：<code>https://blocklypro.webduino.io/?demo=demo-area-01#Xxl0OpoZ81</code></li>
<li>範例解答 ( 體驗版 )：<code>https://goo.gl/FEcQvB</code></li>
<li>範例完整程式碼：<code>http://bin.webduino.io/lutal/edit?html,js,output</code></li>
</ul>
</li>
</ul>
<h2 id="Webdunio-系列開發板"><a href="#Webdunio-系列開發板" class="headerlink" title="Webdunio 系列開發板"></a>Webdunio 系列開發板</h2><ul>
<li><p>產品<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211162314.png" alt="20210211162314"></p>
</li>
<li><p>Webduino 控制：一對一、多對一、一對多<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211162419.png" alt="20210211162419"></p>
</li>
</ul>
<h2 id="Webduino-三大雲端平台"><a href="#Webduino-三大雲端平台" class="headerlink" title="Webduino 三大雲端平台"></a>Webduino 三大雲端平台</h2><ul>
<li><p>Blockly 體驗版<br><a href="https://blockly.webduino.io"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211165028.png" width="400px" height="300px"></a></p>
<blockquote>
<p>不用註冊、就可使用</p>
</blockquote>
</li>
<li><p>Blockly 模擬器<br><a href="https://simulator.webduino.io/"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211165135.png" width="400px" height="300px"></a></p>
<blockquote>
<p>不用註冊、就可使用</p>
</blockquote>
</li>
<li><p>Blockly 雲端平台<br><a href="https://cloud.webduino.io"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210211165213.png" width="400px" height="300px"></a></p>
<blockquote>
<p>需註冊、功能最完整</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>Webdunio Bit 教育版 與 Micro Bit 相仿功能</p>
</blockquote>
<h2 id="Webduino-Smart"><a href="#Webduino-Smart" class="headerlink" title="Webduino Smart"></a>Webduino Smart</h2><h3 id="1-硬體介紹"><a href="#1-硬體介紹" class="headerlink" title="1. 硬體介紹"></a>1. 硬體介紹</h3><ul>
<li><p>Webduino Smart (介紹)</p>
<p>Webduino Smart 是 2016 年推出的物聯網開發板，有別於過去馬克 1 號和 Fly 需要搭配 Arduino 才能運作，Smart 可以自行獨立運作，同時也具備連上網際網路 ( Internet ) 和透過區域網路 ( WebSocket ) 操控的能力，相信更能有效地應用在物聯網的開發和各種創意上！</p>
</li>
<li><p><a href="https://tutorials.webduino.io/zh-tw/docs/basic/board/smart-setup.html">Webduino Smart(初始化設定)</a></p>
<iframe width="560" height="316" src="https://www.youtube.com/embed/b-7B5fljwG4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>第一次雲端更新 + 取得 Device ID：</p>
<iframe width="560" height="316" src="https://www.youtube.com/embed/UtY4O5T7JgE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
<hr>

<ol>
<li><p><strong>接上電源，輸入 Wi-Fi 帳號密碼連線</strong><br>和馬克一號與 Fly 同樣的第一步驟，就是設定 Wi-Fi 的帳號密碼，不過不同的是，設定完帳號密碼後，我們就可以讓 Smart 純粹透過 WebSocket 走區域網路連線，不需要連到外部的網路環境也能運作，如果想要連線到外部網路環境 ( Internet )，也因為設定了 Wi-Fi 帳密，就可以順利連接到網際網路了。</p>
<p>第一步就是接上電源，這時候在具備 Wi-Fi 功能的電腦、筆電或行動裝置的 Wi-Fi 搜尋裡，就可以看到有個名為「Smart」的裝置，此時開發板會閃紅燈，接著紅燈恆亮，這是正常的狀況，因為開發板尚未連線至區域網路。( 不過如果你已經照著接下來的步驟設定完成，還是一樣紅燈恆亮應該就是設定錯誤或不正常了 )</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-01.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-01_s.jpg" class="nofancybox  img-center"></a></p>
<p>點選 <code>smart</code> 後輸入預設密碼 <code>12345678</code>，進行連線。</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-02.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-02_s.jpg" class="nofancybox  img-center"></a></p>
<p>有與 <code>smart</code> 裝置構成連線的畫面<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-02-1.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-02-1_s.jpg" class="nofancybox  img-center"></a></p>
</li>
<li><p>設定 Wi-Fi 帳號密碼與顯示名稱<br>連線後打開瀏覽器 ( 建議使用 Chrome )，網址列輸入 192.168.4.1，進入設定畫面後設定裝置在 Wi-Fi 搜尋中所顯示的名稱和密碼 ( 避免別人用 12345678 也可以連結到你的裝置 )，Device ID 的部分會在進行第一次韌體更新後配發 ( 下面的步驟會介紹 )，每塊 Smart 會配發唯一的一個 ID，因此您無法填寫與修改。</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-031.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-031_s.jpg" class="nofancybox  img-center"></a></p>
<p>Wi-Fi 頁籤就可以設定的所在場所的 Wi-Fi SSID 與 PWD，此處可以設定三組 SSID 和 PWD，在不同場域會自動切換。</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-032.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-032_s.jpg" class="nofancybox  img-center"></a></p>
<p>設定完成後就可以按下 SUBMIT 儲存，出現 Save OK 的字樣表示儲存成功，此時 Smart 開發板會重啟並閃爍紅燈，當紅燈熄滅，且綠燈亮起一次之後，表示 Smart 開發板已經成功連結上家裡或環境內的 Wi-Fi 基地台。( 若紅燈持續閃爍或恆亮，請移除電源，重新操作步驟 1 與步驟 2 )</p>
<blockquote>
<p>初次使用的用戶，務必在成功連線後，連線 <code>Internet</code> 更新韌體，取得 <code>Device ID</code>。</p>
</blockquote>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-04.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-04_s.jpg" class="nofancybox  img-center"></a>  </p>
<p><strong>更新韌體</strong><br><code>Smart</code> 由關機狀態接通電源，亮紅燈時按住小按鍵(不放)-&gt;轉成綠燈(不放)-&gt;綠燈熄滅-&gt;放開按鍵-&gt;藍燈-&gt;開始更新，勿關電源。等候更新完成，<code>Smart</code> 會重新開機。這是第 1 次韌體更新。</p>
<p>電腦瀏覽器輸入 <code>192.168.4.1</code> 連到 <code>Smart</code>，看到如下畫面，已經有<code>Device ID</code>。至此更新步驟完成。</p>
</li>
<li><p>獲得區域網路 IP<br>設定儲存完成後，移除開發板電源，重新接上開發板電源，這時開發板會開始閃紅燈，和區域網路連線後就會亮起綠燈，一秒後綠燈會消失 ( 若紅燈持續閃爍或亮紅燈，請返回步驟一重新設定 )，此時我們可以在電腦或行動裝置的 Wi-Fi 搜尋裡，看到「我們自訂的名稱_192.168.XXX.XXX 」，以下方的例子來說就是「COOL_192.168.0.230」，記下後面這個 IP 數字，透過這個 IP 我們就可以用 WebSocket 來連線控制了。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-05.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-05_s.jpg" class="nofancybox  img-center"></a>  </p>
</li>
</ol>
</li>
<li><p>預設元件和腳位介紹</p>
<p>Webduino Smart 是一塊長 3 公分寬 2.5 公分的開發板，重量約 85 公克，腳位有數位腳 ( 0、2、4、5、12、13、14、15、16 )，PWM 腳位 ( 12、13、15 )，類比腳 AD ( A0 )，其他腳位 TX、RX、3.3V、VCC、RST 和 GND 各 1 個。</p>
<p>開發板內建一個光敏電阻、一個三色燈和一個微型按鈕開關，其中 AD 腳位預設供給光敏電阻使用，三色 LED 燈的紅色使用 15 號腳、綠色使用 12 號腳、藍色使用 13 號腳 ( 三色 LED 燈為「共陰」，在官網其他範例外接的三色 LED 為「共陽」 )，而一個微型按鈕開關則使用了 4 號腳位，使用的時候要特別注意。</p>
</li>
<li><p>腳位圖<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-01.png" alt=" "></p>
</li>
<li><p>外觀介紹</p>
<ol>
<li><p>大小對照 ( 左邊是四號電池和三號電池 )：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209115523.png" alt="20210209115523"></p>
</li>
<li><p>360 度照片：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209115543.png" alt="20210209115543"></p>
</li>
</ol>
</li>
</ul>
<h3 id="2-Webduino-Smart-初始化影片"><a href="#2-Webduino-Smart-初始化影片" class="headerlink" title="2. Webduino Smart 初始化影片"></a>2. Webduino Smart 初始化影片</h3><ul>
<li><p>初始化設定步驟</p>
<div class="video-container">
  <iframe width="560" height="316" src="https://www.youtube.com/embed/b-7B5fljwG4" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
</li>
<li><p>第一次雲端更新 + 取得 Device ID：</p>
<div class="video-container">
  <iframe width="560" height="316" src="https://www.youtube.com/embed/UtY4O5T7JgE" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
</li>
<li><p>Webduino Smart 初始化步驟說明</p>
</li>
</ul>
<ol>
<li><p><font color="blue">接上電源，輸入 Wi-Fi 帳號密碼連線</font></p>
<p>和 <code>馬克一號</code> 與 <code>Fly</code> 同樣的第一步驟，就是設定 <code>Wi-Fi</code> 的帳號密碼，不過不同的是，設定完帳號密碼後，我們就可以讓 <code>Smart</code> 純粹透過 <code>WebSocket</code> 走區域網路連線，不需要連到外部的網路環境也能運作，如果想要連線到外部網路環境 (Internet)，也因為設定了 Wi-Fi 帳密，就可以順利連接到網際網路了。</p>
<br>

<p>第一步就是接上電源，這時候在具備 Wi-Fi 功能的電腦、筆電或行動裝置的 Wi-Fi 搜尋裡，就可以看到有個名為「Smart」的裝置，此時<font color="red">開發板會閃紅燈，接著紅燈恆亮</font>，這是正常的狀況，因為開發板尚未連線至區域網路。( 不過如果你已經照著接下來的步驟設定完成，還是一樣紅燈恆亮應該就是設定錯誤或不正常了 )</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-01.jpg" alt="Webduino Smart 初始化"></p>
<p>點選後輸入預設密碼 <font color="orange">12345678</font>，進行連線。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-02.jpg" alt="Webduino Smart 初始化"></p>
</li>
<li><p><font color="blue">設定 Wi-Fi 帳號密碼與顯示名稱</font><br>連線後打開瀏覽器 (建議使用 Chrome)，網址列輸入 <font color="orange">192.168.4.1</font>，進入設定畫面後設定裝置在 Wi-Fi 搜尋中所顯示的名稱和密碼 (避免別人用 12345678 也可以連結到你的裝置)，Device ID 的部分會在進行第一次韌體更新後配發 (下面的步驟會介紹)，每塊 Smart 會配發唯一的一個 ID，因此您無法填寫與修改。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-031.jpg" alt="Webduino Smart 初始化"></p>
<p>Wi-Fi 頁籤就可以設定的所在場所的  <font color="orange">Wi-Fi SSID 與 PWD</font>，此處可以設定三組 SSID 和 PWD，在不同場域會自動切換。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-032.jpg" alt="Webduino Smart 初始化"></p>
<p>設定完成後就可以按下 SUBMIT 儲存，出現 <strong>Save OK</strong> 的字樣表示儲存成功，此時 Smart 開發板會 <font color="orange">重啟並閃爍紅燈，當紅燈熄滅，且綠燈亮起一次之後</font>，表示 Smart 開發板已經成功連結上家裡或環境內的 Wi-Fi 基地台。(若紅燈持續閃爍或恆亮，請移除電源，重新操作步驟 1 與步驟 2)</p>
<blockquote>
<p>初次使用的用戶，務必在成功連線後，連線 Internet 更新韌體，取得 Device ID。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-04.jpg" alt="Webduino Smart 初始化"></p>
</li>
<li><p><font color="blue">獲得區域網路 IP</font><br>設定儲存完成後，移除開發板電源，重新接上開發板電源，這時開發板會開始閃紅燈，和區域網路連線後就會亮起綠燈，一秒後綠燈會消失 ( 若紅燈持續閃爍或亮紅燈，請返回步驟一重新設定 )，此時我們可以在電腦或行動裝置的 Wi-Fi 搜尋裡，看到「<font color="orange">我們自訂的名稱_192.168.XXX.XXX</font>」，以下方的例子來說就是「COOL_192.168.0.230」，記下後面這個 IP 數字，透過這個 IP 我們就可以用 WebSocket 來連線控制了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-05.jpg" alt="Webduino Smart 初始化"></p>
</li>
<li><p><font color="blue">打開 Webduino Blockly 進行測試</font><br>打開 Webudino Blockly (<code>http://blockly.webduino.io</code>，如果是使用 WebSocket 連線，<font color="orange">網址開頭必須為 http 不能是 https</font>，要特別注意！)，放入開發板的積木，種類選擇 Smart，連線方式選擇 WebSocket，然後填入剛剛的 IP，接著放入三色 LED 燈的積木 ( 使用<font color="orange">三色共陰</font>)，紅色設定 15，綠色 12，藍色 13，並設定三色 LED 燈的顏色為紅色。( 欲使用 Device ID 控制請看步驟五與步驟六 )</p>
<blockquote>
<p>Webduino Blockly：<code>http://blockly.webduino.io</code><br> Webduino Blockly 教學：<a href="https://tutorials.webduino.io/zh-tw/docs/basic/blockly/blockly-tutorial-01.html">Webduino Blockly 基本功能</a>、<a href="https://tutorials.webduino.io/zh-tw/docs/basic/blockly/blockly-tutorial-02.html">Webduino Blockly 進階功能</a></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-06.png" alt="Webduino Smart 連線"></p>
<p>點選執行，就可以看到 Smart 開發板上頭的三色燈發出紅色光了。</p>
<blockquote>
<p>解答：<code>http://blockly.webduino.io/#-KbJUDpxOP4DtqhWwR82</code></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-07.gif" alt="Webduino Smart 連線"></p>
</li>
<li><p><font color="blue">- 連線 Internet 更新韌體</font><br>Webduino Smart 有個很方便的特色功能，當我們透過步驟 1 到步驟 3 初始化設定成功後，就可以連上 Internet 進行遠端更新，方便大家獲取最新的韌體功能，更新的方式很簡單，在步驟 3 接上電源後，按住 Micro USB 旁的微型按鈕開關 ( 按住不放 )。</p>
<p>注意！如果先按住按鈕，再接電源，會讓 Smart 回復出廠設定，如果回復出廠設定，Wi-Fi SSID 和密碼都必須重新設定。</p>
<p>按按鈕更新韌體，只是讓基本功能的更新與提升開發板效能更為便利，如果要取得最新版本的韌體，必須透過<font color="orange">雲端平台</font>進行更新。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-08.jpg" alt="Webduino Smart 更新"></p>
<p>按住<font color="orange">直到綠燈亮起後，再放開按鈕開關，此時藍色燈會亮起 ，表示開始下載更新檔</font>，下載完成後完成後藍色燈會熄滅，開始進行更新 ( 約 5<del>10 秒 )，更新完成後紅色燈會亮起，接著會閃紅燈進行連線，連線成功後綠色燈會亮起，當綠燈熄滅，表示我們可以重新開始控制開發板。 (<font color="orange">注意！進行更新的 5</font></del><font color="orange">10 秒請勿移除電源，否則可能會造成更新失敗而無法啟用開發板的狀況</font>)<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-09.jpg" alt="Webduino Smart 更新"></p>
<p>更新完成後可再參考「步驟 1」，透過 192.168.4.1 進入設定頁面，就可以看到版本號已經更新，同時也出現 Device ID 了。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-10.jpg" alt="Webduino Smart 更新"></p>
<p>更新後的 Smart，<font color="orange">預設三分鐘後會關閉 Wi-Fi AP 功能</font>(無法在 Wi-Fi 搜尋清單中看到 )，若要持續顯示在 Wi-Fi 清單裡，可勾選 Always enable WiFi AP。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-12.jpg" alt="Webduino Smart 更新"></p>
</li>
<li><p><font color="blue">使用 Device ID 控制</font><br>當我們已經透過步驟 5 的遠端更新取得 Device ID，如果不想用 WebSocket 操控，亦可用這組 Device ID 來控制，控制的方法就和 Webduino 馬克一號與 Webduino Fly 一樣，連線方式選擇 Wi-Fi，填入 Deivce ID 就可以操控。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-setup-11.jpg" alt="Webduino Smart Wifi"></p>
</li>
</ol>
<h3 id="3-Smart-應用"><a href="#3-Smart-應用" class="headerlink" title="3. Smart 應用"></a>3. Smart 應用</h3><h4 id="3-1-自走車"><a href="#3-1-自走車" class="headerlink" title="3.1. 自走車"></a>3.1. 自走車</h4><ul>
<li><p>組裝<br>Smart 自走車是 Webduino 自主研發的產品，專為 Smart 開發板量身打造，輕巧、方便又環保！不僅能 DIY 動手玩創意，還能輕鬆學習程式邏輯概念，實作出一台具個人特色的自走車。</p>
</li>
<li><p>展示影片<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209112838.png" alt="展示影片"></p>
</li>
<li><p>接線與實作</p>
<ul>
<li><p>所需材料列表：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209112928.png" alt="Smart 自走車材料"></p>
</li>
<li><p>將杜邦線從木板的長方形鏤空處穿出（照片以左側馬達固定版為例）<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209113001.png" alt="組合馬達與木板"></p>
</li>
<li><p>將減速馬達平整面貼緊木板，圓點凸出面朝外，插入螺絲 2.螺絲尾端以螺母固定，指尖頂住螺母並拴緊螺絲<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209113352.png" alt="拴入螺絲"></p>
</li>
<li><p>左右馬達固定板完成圖示<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209113428.png" alt="馬達固定板完成"></p>
</li>
<li><p>將馬達固定板沿較長軌道滑入<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209113500.png" alt="與木板組裝"></p>
</li>
<li><p>插入木頭卡榫固定，並安裝大輪子到馬達兩側<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209113528.png" alt="插入木頭卡榫"></p>
</li>
<li><p>自走車頂板正、反面<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209113551.png" alt="自走車頂板正反面"></p>
<p>1.將三角頂板轉至反面，定向輪對準孔位並插入螺絲 2.正面用指尖頂住螺母，將螺絲旋緊 3.定向輪組裝完成圖<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209113627.png" alt="定向輪組裝"></p>
</li>
<li><p>杜邦線穿入三角頂板兩側正方形孔，將馬達固定板上緣卡榫處，對準自走車頂板兩側長方形孔位<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209113649.png" alt="組裝馬達與頂板"></p>
</li>
<li><p>將自走車頂板與馬達固定板卡榫處，向前推到底並插入木頭卡榫固定，插入木頭卡榫固定<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209113714.png" alt="組合馬達固定板與頂板"></p>
<p>1.插入固定板 2.頂板上方插入四片小積木 3.將馬達驅動板放入自走車頂部<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209113814.png" alt="插入固定板及馬達驅動板"></p>
</li>
<li><p>要操控 Smart 自走車，組裝玩車體之後，需要裝上雙馬達驅動板及 Smart 開發板，再接上電源才可運作。<br>馬達、馬達驅動板及 Smart 開發板接線示意圖：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209113850.png" alt="接線示意圖"></p>
<ul>
<li>A 線 ( 馬達右上 ) → 馬達驅動板 B2 → Smart 腳位 14</li>
<li>B 線 ( 馬達右下 ) → 馬達驅動板 B1 → Smart 腳位 16</li>
<li>C 線 ( 馬達左上 ) → 馬達驅動板 A1 → Smart 腳位 2</li>
<li>D 線 ( 馬達左下 ) → 馬達驅動板 A2 → Smart 腳位 5</li>
<li>馬達驅動板 + 號 → Smart 3.3V 腳位</li>
<li>馬達驅動板 - 號 → Smart GND 腳位</li>
</ul>
</li>
<li><p>實際接線照片：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209114000.png" alt="接線照片"></p>
</li>
<li><p>馬達、馬達驅動板及 Smart 開發板接線完成照片：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209114023.png" alt="接線照片"></p>
<p>以上是 Smart 自走車的組裝步驟，接下來就可以透過 Webduino Blockly 來輕鬆玩轉自走車囉！</p>
</li>
</ul>
</li>
<li><p>相關參考</p>
<blockquote>
<p>Smart 自走車操控教學： <a href="https://tutorials.webduino.io/zh-tw/docs/useful/example/smart-robot-car-remote-control.html">Smart 自走車鍵盤操控</a></p>
</blockquote>
</li>
</ul>
<h4 id="3-2-自走車-網頁遙控器操控"><a href="#3-2-自走車-網頁遙控器操控" class="headerlink" title="3.2. 自走車(網頁遙控器操控)"></a>3.2. 自走車(網頁遙控器操控)</h4><ul>
<li><p>操作解析</p>
<p>打開 <code>Webduino</code> 雲端平台，並選擇 <a href="https://blocklypro.webduino.io/">Blockly 編輯工具</a>，你可以建立一個積木程式專案，並命名為 Smart 自走車 (網頁遙控器操控)。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209144620.png" alt="建立專案"></p>
<blockquote>
<p>使用雲端平台之前須先註冊並登入，首次註冊教學請點此：<a href="https://tutorials.webduino.io/zh-tw/docs/cloud/basic/cloud-register.html">註冊與登入</a></p>
</blockquote>
</li>
<li><p>Webduino Blockly 操作解析</p>
<p>接著會進入 Blockly 畫面，打開網頁互動測試區，下拉選單選擇「遙控器」，就會帶出一個網頁遙控器，當完成積木操控程式，就可以用行動裝置打開這個遙控器。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209144714.png" alt="網頁遙控器"></p>
<p>首先放入開發板及自走車的積木，開發板設定為 Smart，自走車名稱命名為 car，腳位設定右前 14、右後 16、左前 2、左後 5。</p>
<blockquote>
<p>開發板設定積木在「開發板控制 &gt; 開發板」目錄下。<br> 自走車的積木在「玩具及馬達 &gt; 自走車」目錄下。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209144744.png" alt="自走車積木"></p>
<p>使用「遙控器按鍵按下」的積木，設定按住向上的圖案時，自走車會往前移動，如果放開就會停止。</p>
<blockquote>
<p>遙控器積木在「遙控器」目錄下。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209144811.png" alt="網頁遙控器控制自走車"></p>
</blockquote>
<p>依序把前進、後退、左轉與右轉的行為放入遙控器的動作裡。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209144830.png" alt="網頁遙控器控制自走車"></p>
<p>填入 <code>Smart</code> 開發板 <code>Device ID</code>，確認開發板上線，點選右上方紅色按鈕執行，就可以用網頁裡的遙控器操控自走車了。</p>
<blockquote>
<p>範例解答：<code>https://blocklypro.webduino.io/#7ggDlVjoPn</code></p>
</blockquote>
</li>
<li><p>行動裝置操控</p>
<p>如果想透過行動裝置 ( 手機或平板，Android / IOS 皆可 )，只需點選上方「產生即時預覽 QRCode 的按鈕」，點選後會彈出一個 QRCode。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209145330.png" alt="Blockly 產生 QRCode"></p>
<p>用行動裝置掃描 QRCode，就會打開遙控器的網頁，剛剛所做的積木程式會直接在這個網頁裡執行，也就可以用行動裝操控 Smart 自走車了。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209145403.png" alt="手機遙控器"></p>
</li>
<li><p>進階功能</p>
<p>為了發揮行動裝置的功能，凸顯行動裝置和電腦的差異，這邊要來偵測行動裝置的陀螺儀和加速度計，這樣我們就能夠偵測行動裝置的旋轉、翻轉與加速度。在畫面中多綁定一個遙控器事件，當按下中間圓型小點的按鈕，就可以啟動偵測行動裝置陀螺儀的功能，反之放開就取消這功能。</p>
<blockquote>
<p>行動裝置偵測的積木在「進階功能 &gt; 行動裝置」目錄下。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209145617.png" alt="手機陀螺儀與加速度控制自走車"></p>
<p>在偵測旋轉翻轉的區塊內，放入邏輯判斷，判斷三個情形：前後翻轉角度大於 20 ( 表示手機往前翻 )，前後翻轉角度小於 -20 ( 表示手機往後翻 )，以及前後翻轉角度在 -20~20 的區間。</p>
<blockquote>
<p>邏輯相關積木在「基本功能 &gt; 邏輯」目錄下，數字的積木在「基本功能 &gt; 數學式」目錄下。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209145753.png" alt="手機翻轉控制自走車"></p>
<p>在第一個判斷條件內放入判斷左右翻轉的第二層邏輯，目的在偵測手機是往左前、右前還是正前方翻轉。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209145812.png" alt="手機翻轉控制自走車"></p>
<p>後面兩個判斷式依此類推，這樣就可以完成手機翻轉時，自走車也會跟著動作的邏輯程式。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209145841.png" alt="手機翻轉控制自走車"></p>
<p>同樣的，點選上方產生即時預覽的 QRCode 按鈕，產生 QRCode，透過行動裝置掃描，就可以使用行動裝置的陀螺儀操控自走車了。( 記得要按住中間原點的黑色按鈕 )</p>
<blockquote>
<p>範例解答：<code>https://blocklypro.webduino.io/?demo=demo-area-09#71EN9LPn2x</code></p>
</blockquote>
</li>
<li><p>相關參考</p>
<ul>
<li>組裝步驟：Smart 自走車 (組裝步驟)</li>
<li>範例解答：Smart 自走車 (網頁遙控器操控)</li>
<li>範例解答：Smart 自走車 (手機陀螺儀操控)</li>
<li>完整程式碼：<a href="https://bin.webduino.io/toxip/edit?html,css,js,output">https://bin.webduino.io/toxip/edit?html,css,js,output</a></li>
</ul>
</li>
</ul>
<h4 id="3-3-自走車-超音波避障"><a href="#3-3-自走車-超音波避障" class="headerlink" title="3.3. 自走車(超音波避障)"></a>3.3. 自走車(超音波避障)</h4><h4 id="3-3-1-接線與實作"><a href="#3-3-1-接線與實作" class="headerlink" title="3.3.1 接線與實作"></a>3.3.1 接線與實作</h4><p>因為<strong>超音波傳感器</strong>與自走車上的<strong>雙馬達驅動板</strong>，同時都會用到 <code>GND</code> 的腳位，所以使用麵包板來連接，超音波 <code>VCC</code> 接 <code>Smart</code> 開發板的 <code>VCC</code> 腳位，<code>Trig</code> 接 <code>13</code>，<code>Echo</code> 接 <code>15</code>，超音波傳感器的 <code>GND</code> 與馬達驅動板的一號針腳都連接到 Smart 開發板的 <code>GND</code> 腳位。</p>
<ul>
<li><p>接線示意圖<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209150739.png" alt="Webduino Smart 自走車"></p>
</li>
<li><p>實際接線照片：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209150808.png" alt="超音波避障實際接線照片"></p>
</li>
</ul>
<h4 id="3-3-2-操作解析"><a href="#3-3-2-操作解析" class="headerlink" title="3.3.2. 操作解析"></a>3.3.2. 操作解析</h4><p>打開 <code>Webduino</code> 雲端平台，並選擇 <a href="https://blocklypro.webduino.io/">Blockly 編輯工具</a>，你可以建立一個積木程式專案，並命名為 <code>Smart 自走車(超音波避障)</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209151334.png" alt="建立專案"></p>
<blockquote>
<p>使用雲端平台之前須先註冊並登入，首次註冊教學請點此：<a href="https://tutorials.webduino.io/zh-tw/docs/cloud/basic/cloud-register.html">註冊與登入</a></p>
</blockquote>
<h4 id="3-3-3-Webduino-Blockly-操作解析"><a href="#3-3-3-Webduino-Blockly-操作解析" class="headerlink" title="3.3.3. Webduino Blockly 操作解析"></a>3.3.3. Webduino Blockly 操作解析</h4><p>進入專案 <code>Blockly</code> 畫面，打開網頁互動區域，因為這個範例將會使用「顯示文字」來顯示超音波偵測到的距離。當我們選擇下拉選單選擇「顯示文字」，此時在左側積木列的最下方將會出現對應的積木功能可以選擇。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209151647.png" alt="Webduino Smart 自走車"></p>
<p>接著會進入 <code>Blockly</code> 畫面，在畫面中放入開發板積木，開發板下拉選單選擇「Smart」，連線方式選擇「Wi-Fi」，填入 <code>Device ID</code>，在開發板內放入自走車積木，腳位設定右前 <code>14</code>、右後 <code>16</code>、左前 <code>2</code>、左後 <code>5</code>。再放入超音波傳感器積木，<code>Trig</code> 腳位設定 <code>13</code>，<code>Echo</code> 腳位設定 <code>15</code>。</p>
<blockquote>
<p>自走車積木在「玩具及馬達 &gt; 自走車」目錄下。<br> 超音波傳感器的積木在「環境偵測 &gt; 超音波」目錄下。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209151714.png" alt="超音波腳位設定"></p>
<p>放入 <code>ultrasonic</code> 擷取距離的積木，設定每 <code>1200 毫秒</code> (1.2 秒) 偵測一次，並且透過「顯示」積木將距離數值顯示在網頁上。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209151810.png" alt="顯示偵測距離"></p>
<h4 id="3-3-4-實作避障車程式"><a href="#3-3-4-實作避障車程式" class="headerlink" title="3.3.4. 實作避障車程式"></a>3.3.4. 實作避障車程式</h4><p>有了距離之後可以使用「邏輯」積木做到自動避障，將邏輯積木放到 ultrasonic 擷取距離的積木內，點擊藍色小齒輪，設定兩個邏輯判斷。</p>
<blockquote>
<p>邏輯積木在「基本功能 &gt; 邏輯」目錄下。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209151910.png" alt="邏輯判斷小齒輪操作"></p>
</blockquote>
<p>透過邏輯判斷，設定與障礙物的距離，當超音波偵測的距離小於 <code>10</code> 公分，意味著自走車與障礙物的距離很近。</p>
<blockquote>
<p>大於小於的積木在「基本功能 &gt; 邏輯」目錄下。<br> 數字積木在「基本功能 &gt; 數學式」目錄下。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209151935.png" alt="偵測距離遠近判斷"></p>
</blockquote>
<p>開始設定自走車的行進方向，當偵測到的距離小於 10 公分的時候，自走車向後退 1 秒鐘，接著向右轉 1 秒鐘；當偵測到與前方障礙物的距離大於 10 公分，開始直線前進。</p>
<blockquote>
<p>等待的積木在「進階功能 &gt; 等待」目錄下。<br> 自走車積木在「玩具及馬達 &gt; 自走車」目錄下。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209152022.png" alt="避障車程式"></p>
</blockquote>
<p>最後，我們將使用到「流程」積木，將自動避障程式碼加入流程中。</p>
<blockquote>
<p>流程，程式碼裡就是 function，在寫程式的時候，常常會遇到需要重複執行的程式碼，為避免過多程式碼重複出現，我們可以設定一個流程，並將「需要被重複執行的程式碼」寫進這個流程中，如此一來，當我們需要重複用到這些程式碼的時候，只要呼叫這段流程，就可以重複執行對應的程式。</p>
</blockquote>
<p>相關教學參考：<a href="https://tutorials.webduino.io/zh-tw/docs/blockly/standard/functions.html">流程</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209152154.png" alt="加入流程的避障車程式"></p>
<p>將自走車一開始的狀態設定為「停止」，讓程式開始執行後自走車停止 1 秒，開始執行避障功能。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209152257.png" alt="自走車最初停止狀態"></p>
<p>以上是自動避障車的實行步驟，做好之後，填入裝置 Device ID，確認開發板上線，點選右上方紅色按鈕執行，就可以體驗無人車的威力囉！</p>
<blockquote>
<p>範例解答：<code>https://blocklypro.webduino.io/?demo=demo-area-01#XBBq1x4ozE</code></p>
</blockquote>
<h4 id="3-3-5-相關參考"><a href="#3-3-5-相關參考" class="headerlink" title="3.3.5. 相關參考"></a>3.3.5. 相關參考</h4><ul>
<li>範例解答：<code>https://blocklypro.webduino.io/?demo=demo-area-01#XBBq1x4ozE</code></li>
<li>完整程式碼：<code>https://bin.webduino.io/daqik/edit?html,css,js,output</code></li>
</ul>
<h3 id="3-4-Smart-自走車-溫濕度感測車"><a href="#3-4-Smart-自走車-溫濕度感測車" class="headerlink" title="3.4 Smart 自走車(溫濕度感測車)"></a>3.4 Smart 自走車(溫濕度感測車)</h3><ul>
<li><p>接線與實作</p>
<p>溫濕度傳感器有四隻針腳，第一隻針腳為 v(接 VCC)，第二隻為 data(接 12)，第三隻沒有作用，為 N/C，第四隻為 GND(接 GND)。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209153100.png" alt="溫濕度傳感器"></p>
<p>因為溫濕度傳感器與自走車上的雙馬達驅動板，同時都會用到 <code>GND</code> 的腳位，所以使用麵包板來連接，溫濕度 <code>VCC</code> 接 <code>Smart 開發板</code> 的 <code>VCC</code> 腳位。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209220646.png" alt="溫濕度感測車接線示意圖"><br>實際接線照片：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209153134.png" alt="溫濕度感測車"></p>
</li>
<li><p>操作解析</p>
<p>打開 Webduino 雲端平台，並選擇 <a href="https://blocklypro.webduino.io/">Blockly 編輯工具</a>，你可以建立一個積木程式專案，並命名為 Smart 自走車 (溫濕度感測車)。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209153304.png" alt="新增專案"></p>
<blockquote>
<p>使用雲端平台之前須先註冊並登入，首次註冊教學請點此：<a href="https://tutorials.webduino.io/zh-tw/docs/cloud/basic/cloud-register.html">註冊與登入</a></p>
</blockquote>
</li>
<li><p>Webduino Blockly 操作解析</p>
<p>接著在畫面中放入開發板積木，開發板下拉選單選擇「Smart」，連線方式選擇「Wi-Fi」，填入 Device ID，在開發板內放入自走車積木，腳位設定右前 <code>14</code>、右後 <code>16</code>、左前 <code>2</code>、左後 <code>5</code>。再放入溫濕度傳感器積木，腳位設定 <code>13</code>。</p>
<blockquote>
<p>開發板設定積木在「開發板控制 &gt; 開發板」目錄下。<br> 自走車積木在「玩具及馬達 &gt; 自走車」目錄下。<br> 溫濕度相關的積木在「環境偵測 &gt; 溫濕度」目錄下。</p>
</blockquote>
<p> <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209215221.png" alt="溫濕度腳位設定"></p>
</li>
<li><p>建立 Google 試算表</p>
<p>首先須先於個人 Google 帳號下建立試算表，接著於試算表之「共用」權限管理功能，更改試算表讀取權限，這個動作是為了讓 Blockly 有權限將溫濕度的數值寫入試算表，教學如下：</p>
<blockquote>
<p>設定 Google 試算表請參考：<a href="https://tutorials.webduino.io/zh-tw/docs/cloud/database/google-spreadsheet.html">Google 試算表(設定)</a></p>
</blockquote>
<ul>
<li><p>讀取資料</p>
<p>接著進入專案，將試算表的積木放入編輯畫面中，並在網址的地方，貼上之前建立的試算表網址，如果有更改工作表名稱(與試算表檔名不同)，則積木的工作表名稱也要進行修改。</p>
<blockquote>
<p>試算表積木在「資料庫 &gt; Google 試算表」目錄下。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209215433.png" alt="試算表網址"><br>放入 dht 偵測溫濕度的積木，設定每 1000 毫秒 ( 1 秒 ) 偵測一次。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209153632.png" alt="偵測溫濕度"></p>
</li>
<li><p>寫入資料</p>
<p>如果想增加存入的欄位類別，比方說加入「時間」、「溫度」、「濕度」，可透過積木上的小齒輪來增減欄位。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209215703.png" alt="小齒輪教學"></p>
<blockquote>
<p>時間積木在「進階功能 &gt; 控制台」目錄下。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209215824.png" alt="濕度偵測"></p>
<p>最後，輸入 Device ID，點選右上方紅色按鈕執行，回到 Google 試算表，就會看到資料依序寫入就會看到溫濕度數值囉！<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209153733.png" alt="溫濕度存取結果"></p>
<p>接著將網頁遙控器結合溫濕度紀錄，就可以一邊遙控 Smart 自走車，一邊記錄小車抵達處的溫濕度數值囉！<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210209153748.png" alt="濕度偵測"></p>
<blockquote>
<p>範例解答 ( 需登入平台 )：<code>https://blocklypro.webduino.io/?demo=demo-area-09#X33eo9P2B6</code></p>
</blockquote>
</li>
</ul>
</li>
<li><p>相關參考</p>
<ul>
<li>範例解答：<code>https://blocklypro.webduino.io/?demo=demo-area-09#X33eo9P2B6</code></li>
<li>完整程式碼：`<a href="https://bin.webduino.io/xeyoh/edit?html,css,js,output">https://bin.webduino.io/xeyoh/edit?html,css,js,output</a></li>
</ul>
</li>
</ul>
<h4 id="3-5-Smart-開發版與-LCD-螢幕硬體連結"><a href="#3-5-Smart-開發版與-LCD-螢幕硬體連結" class="headerlink" title="3.5. Smart 開發版與 LCD 螢幕硬體連結"></a>3.5. Smart 開發版與 LCD 螢幕硬體連結</h4><p>VCC → VCC， GND → GND ， SDA → 04 ， SCL → 05<br>(注意！Smart 接線只能這樣接 SDA 接 04，SCL 接 05)</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210210231005.png" alt="20210210231005"></p>
<hr>
<h2 id="馬克一號"><a href="#馬克一號" class="headerlink" title="馬克一號"></a>馬克一號</h2><h3 id="1-硬體介紹-1"><a href="#1-硬體介紹-1" class="headerlink" title="1. 硬體介紹"></a>1. 硬體介紹</h3><h3 id="2-馬克一號-初始化步驟說明"><a href="#2-馬克一號-初始化步驟說明" class="headerlink" title="2. 馬克一號 初始化步驟說明"></a>2. 馬克一號 初始化步驟說明</h3><ul>
<li><p>初始化影片</p>
<div class="video-container">
  <iframe width="560" height="316" src="https://www.youtube.com/embed/cwzpAK_0f2I" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
</li>
<li><p>初始化步驟說明</p>
<ul>
<li><p><font color="blue">將馬克一號切換為設定模式</font><br>Webduino 開發板馬克一號，上面有一顆可以左右扳動的小開關，在移除電源的情況下，<font color="orange">將開關扳動至 STA 模式</font>，接上電源，就可以開始進行初始化設定。(此時開發板上的 Off-line 燈號會亮紅燈)。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mark1-setup-01.jpg" alt=" "></p>
</li>
<li><p><font color="blue">使用 Wi-Fi 搜尋馬克一號</font><br>使用電腦或行動裝置，打開 Wi-Fi 搜尋對應的 Webduino 開發板 SSID 名稱，點選之後輸入密碼，即可讓電腦或行動裝置與 Webduino 開發板連線，開發板的 SSID 與密碼會貼在「裝置說明書」以及開發板上，通常為「wa」開頭。(範例名稱為 wa101)<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mark1-setup-02.jpg" alt=" "></p>
<p>我的裝置: wd2123</p>
</li>
<li><p><font color="blue">連線馬克一號進行設定</font><br>打開 Chrome 或 Safari 瀏覽器，於網址列輸入「<code>http://192.168.4.1</code>」，即可打開 Webduino 開發板的設定頁面，在設定頁面輸入家裡、公司場所或行動裝置分享的網路基地台 SSID 與 PASSWORD。(<font color="orange">此處的 SSID 為「網路基地台」的 SSID，並非 Webduino 開發板，不要填成裝置說明卡上頭的 SSID 與 PASSWORD</font>，SSID 與 PASSWORD 限制 14 個字元，只能大小寫的英文字母與數字的組合)<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mark1-setup-03.jpg" alt=" "></p>
<p>我的裝置:<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210210143351.png" alt="PI3-DEVICE"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210210143806.png" alt="20210210143806"></p>
</li>
<li><p><font color="blue">重啟馬克一號</font><br>輸入完 SSID 與 PASSWORD 之後，點選送出，若出現「OK」的字樣，表示 Webduino 開發板已經初始化成功，並且可以和家裡、公司場所或行動裝置分享的網路基地台連線 ( 若遲遲沒有出現「OK」字樣，表示初始化設定不成功，返回步驟 1 重新開始 )，<font color="orange">完成後移除開發板電源，再將開關扳至 AP 模式</font>，重新接上電源即可進行重啟。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/mark1-setup-04.jpg" alt=" "></p>
</li>
<li><p><font color="blue">確認連線是否成功</font><br>Webduino 開發板重啟後，便可將電腦或行動裝置切回正常的網路連線，並連結 <code>https://webduino.io/device.html</code>，輸入對應的 device 名稱確認是否連線成功，如果連線成功則會出現 OK 的顯示，連線成功後即可開始玩轉 Webduino。( 若在網頁上沒有對應 Webduino 開發板，則需重啟 Webduino 開發板或返回步驟 1 重新初始化設定)</p>
<blockquote>
<p>連線確認網址：<code>https://webduino.io/device.html</code><br> Off-line 燈號判斷：紅燈熄滅 (連線成功)、紅燈恆亮 (STA 模式 或 連線失敗)、紅燈閃爍 (嘗試連線)。</p>
</blockquote>
<p>我的裝置<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210210150623.png" alt="20210210150623"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210210150711.png" alt="20210210150711"></p>
</li>
<li><p>開始操作馬克一號<br>進行到此步驟，表示 Webduino 馬克一號已經可以自行連上家裡、公司場所或行動裝置分享的網路基地台，並自動連結上雲端的伺服器，可以開始透過 Wi-Fi 去控制 Webduino 開發板囉！<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/connect.jpg" alt=" "></p>
<blockquote>
<p>我的馬克一號<br> SSIS: wd2123<br> PASSWORD: 12345678<br> Devide ID: JXeEr</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="3-馬克一號應用"><a href="#3-馬克一號應用" class="headerlink" title="3. 馬克一號應用"></a>3. 馬克一號應用</h3><h4 id="3-1-馬克一號自走車-鍵盤操控"><a href="#3-1-馬克一號自走車-鍵盤操控" class="headerlink" title="3.1. 馬克一號自走車(鍵盤操控)"></a>3.1. 馬克一號自走車(鍵盤操控)</h4><p> &nbsp;Webduino 公仔自走車是 Webduino 自主研發的產品，使用 Webduino 馬克 1 號開發板控制，不僅可以設定行進的模式，更可以接上超音波傳感器讓車子自動閃避障礙物。在這個範例我們會實作設定電腦的鍵盤行為，透過敲打鍵盤讓車子移動。</p>
<ul>
<li><p>範例影片展示</p>
<div class="video-container">
   <iframe width="560" height="316" src="https://www.youtube.com/embed/0JT1KAHkMsk" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
</li>
<li><p>接線與實作<br>要操控自走車，首先就是要組裝自走車，先來看一下自走車包含哪些組件，組件分別有：自走車底版 (3D列印)、左右各一顆輪子與馬達、開關、電池盒、馬達驅動板、超音波傳感器和 Webduino 開發板。由於主要的機構都已經焊接完成，組裝上變得相當簡單，只需要幾個步驟即可完成。</p>
<p>首先把電池放到電池盒內 (需要四顆三號電池)，然後將電池盒放到車子上。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205225516.png" alt="放入自走車電池"></p>
<p>接著把 Webduino 開發板放到前方的插槽裡。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205225540.png" alt="自走車 + 馬克一號"></p>
<p>放妥開發板後，先把超音波傳感器插在開發板的左側排插，Trig 11，Echo 10。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205225605.png" alt="自走車接上超音波傳感器"></p>
<p>接著把馬達驅動板插在右側排插，注意會把 3.3V、 6、7、8、9 的腳位接滿，然後在 3.3V 的插孔處會突出一支腳，這支腳已經用電線連結出來，所以是正常的不需理會。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205225632.png" alt="自走車接上馬達驅動版"><br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205225647.png" alt="自走車接上馬達驅動版"></p>
<p>到這邊已經組裝完成，打開自走車的電源，就可以開始嘗試操控自走車了。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205225703.png" alt="自走車電源開關"></p>
<p>最終長相：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205225721.png" alt="Webduino 自走車"></p>
</li>
<li><p>操作解析<br>打開 <a href="https://blockly.webduino.io/">Webduino Blockly 編輯工具</a>，放入自走車的積木，名稱命名為 <code>car</code>，腳位設定右前 <code>6</code>、右後 <code>7</code>、左前 <code>8</code>、左後 <code>9</code>。</p>
<blockquote>
<p>自走車的積木在「玩具及馬達 &gt; 自走車」目錄下。</p>
</blockquote>
<p> <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205225801.png" alt="自走車積木"></p>
<p> 使用「開始偵測鍵盤按下」的積木，設定按住向上的箭頭時，自走車會往前移動，如果放開就會停止。</p>
<blockquote>
<p>鍵盤積木在「進階功能 &gt; 鍵盤行為」目錄下。</p>
</blockquote>
<p> <img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205225837.png" alt="鍵盤控制自走車移動"></p>
<p>依序把前進、後退、左轉與右轉的行為放入鍵盤的動作。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205225900.png" alt="鍵盤控制自走車移動"></p>
<p>填入裝置 Device ID，確認開發板上線，點選右上方紅色按鈕執行，就可以用鍵盤操控自走車了。</p>
<blockquote>
<p>範例解答：<code>https://goo.gl/nDMS2j</code></p>
</blockquote>
<p>其實自走車的原理很簡單，因為馬達分成一左一右兩個，每個又分成往前轉和往後轉，所以可以相等於用四個 LED 來表現。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205225926.png" alt="自走車原理"></p>
<p>所以如果要讓自走車前進，除了使用自走車前進的積木，也可以透過 LED on 或 off 的行為來表現。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205225953.png" alt="自走車原理"></p>
</li>
<li><p>相關參考</p>
</li>
<li><p>範例解答：<code>https://goo.gl/nDMS2j</code></p>
</li>
<li><p>範例完整程式碼：<code>http://bin.webduino.io/ruwun/edit?html,js,output</code></p>
</li>
</ul>
<h4 id="3-2-馬克一號自走車-行動裝置操控"><a href="#3-2-馬克一號自走車-行動裝置操控" class="headerlink" title="3.2. 馬克一號自走車(行動裝置操控)"></a>3.2. 馬克一號自走車(行動裝置操控)</h4><p> &nbsp;Webduino 公仔自走車是 Webduino 自主研發的產品，使用 Webduino 馬克 1 號開發板控制。在這個範例我們會實作如何透過手機打開網頁，就能操控自走車，甚至還可以使用手機的陀螺儀操控。</p>
<ul>
<li><p>範例影片展示</p>
<div class="video-container">
  <iframe width="560" height="316" src="https://www.youtube.com/embed/b2T9SbHfHj0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
</li>
<li><p>接線與實作<br>要操控自走車，首先就是要組裝自走車，先來看一下自走車包含哪些組件，組件分別有：自走車底板 (3D 列印)、左右各一顆輪子與馬達、開關、電池盒、馬達驅動板、超音波傳感器和 Webduino 開發板。由於主要的機構都已經焊接完成，組裝上變得相當簡單，只需要幾個步驟即可完成。</p>
<blockquote>
<p>詳細組裝參考：<a href="https://tutorials.webduino.io/zh-tw/docs/useful/example/toycar-keyboard.html">自走車(鍵盤操控)</a></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205230607.png" alt="Webduino 自走車"></p>
</li>
<li><p>操作解析<br>打開 <a href="https://blockly.webduino.io/">Webduino Blockly 編輯工具</a>，打開網頁互動測試區，下拉選單選擇「遙控器」，就會帶出一個網頁遙控器，待會就會用行動裝置打開這個遙控器。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205230639.png" alt="網頁遙控器"></p>
<p>放入自走車的積木，名稱命名為 car，腳位設定右前 6、右後 7、左前 8、左後 9。</p>
<blockquote>
<p>自走車的積木在「玩具及馬達 &gt; 自走車」目錄下。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205230702.png" alt="自走車積木"></p>
<p>使用「遙控器按鍵按下」的積木，設定按住向上的圖案時，自走車會往前移動，如果放開就會停止。</p>
<blockquote>
<p>遙控器積木在「遙控器」目錄下。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205230732.png" alt="網頁遙控器控制自走車"></p>
<p>依序把前進、後退、左轉與右轉的行為放入遙控器的動作裡。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205230747.png" alt="網頁遙控器控制自走車"></p>
<p>填入裝置 Device ID，確認開發板上線，點選右上方紅色按鈕執行，就可以用網頁裡的遙控器操控自走車了。</p>
<blockquote>
<p>範例解答：<code>https://goo.gl/GiFvlr</code></p>
</blockquote>
</li>
<li><p>行動裝置操控<br>如果要把剛剛的遙控器轉到行動裝置上面運行，只需要點選最上方「產生即時預覽 QR code」的按鈕。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205230820.png" alt="Blockly 產生 QRCode"></p>
<p>點選後會彈出一個 QRCode。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205230836.png" alt="Blockly 產生 QRCode"></p>
<p>用行動裝置掃描這個 QRCode，就會打開遙控器的網頁，剛剛所做的程式碼也會在這個網頁裡執行，也就可以用行動裝置操控自走車了。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205230858.png" alt="手機遙控器"></p>
<p>為了發揮行動裝置的功能，突顯行動裝置和電腦的差異，這邊要來偵測行動裝置的陀螺儀和加速度計，這樣我們就能夠偵測行動裝置的旋轉、翻轉與加速度。在畫面中多綁定一個遙控器事件，當按下中間圓型小點的按鈕，就可以啟動偵測行動裝置陀螺儀的功能，反之放開就取消這功能。</p>
<blockquote>
<p>行動裝置偵測的積木在「進階功能 &gt; 行動裝置」目錄下。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205230919.png" alt="手機陀螺儀與加速度控制自走車"></p>
<p>在偵測旋轉翻轉的區塊內，放入邏輯判斷，判斷三個情形：前後翻轉角度大於 20 (表示手機往前翻)，前後翻轉角度小於 -20 (表示手機往後翻)，以及前後翻轉角度在 -20~20 的區間。</p>
<blockquote>
<p>邏輯相關積木在「基本功能 &gt; 邏輯」目錄下，數字的積木在「基本功能 &gt; 數學式」目錄下。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205230945.png" alt="手機翻轉控制自走車"></p>
<p>在第一個判斷條件內放入判斷左右翻轉的第二層邏輯，目的在偵測手機是往左前、右前還是正前方翻轉。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231002.png" alt="手機翻轉控制自走車"></p>
<p>後面兩個判斷式依此類推，這樣就可以完成手機翻轉時，自走車也會跟著動作的邏輯程式。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231018.png" alt="手機翻轉控制自走車"></p>
<p>同樣的，點選上方產生即時預覽的 QRCode 按鈕，產生 QRCode，透過行動裝置掃描，就可以使用行動裝置的陀螺儀操控自走車了。( 記得要按住中間原點的黑色按鈕 )</p>
<blockquote>
<p>範例解答：<code>https://goo.gl/8jQU3t</code></p>
</blockquote>
</li>
<li><p>相關參考<br>範例解答：<code>https://goo.gl/8jQU3t</code><br>範例完整程式碼：<code>http://bin.webduino.io/fuguq/edit?html,css,js,output</code></p>
</li>
</ul>
<h4 id="3-3-馬克一號自走車-循跡功能"><a href="#3-3-馬克一號自走車-循跡功能" class="headerlink" title="3.3. 馬克一號自走車(循跡功能)"></a>3.3. 馬克一號自走車(循跡功能)</h4><p>  在之前「公仔自走車」的範例中，已經了解基本的操作方式，這篇範例將利用「自走車循跡升級套件」，為自走車加上「循跡」的功能，讓我們在一般操作控制之外，也能跟隨地上的軌跡移動，甚至可藉由雲端資料庫的輔助，紀錄軌跡並重複行進同樣的路徑。</p>
<blockquote>
<p>循跡自走車操控頁面：<code>https://goo.gl/NrTrLb</code><br>   Webduino Blockly 範例程式：<code>https://goo.gl/8XYAam</code></p>
</blockquote>
<ul>
<li><p>範例影片展示</p>
<div class="video-container">
  <iframe width="560" height="316" src="https://www.youtube.com/embed/vnazkVchsp4" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
</li>
<li><p>接線與實作<br>要使用循跡的功能，必須在自走車的機構安裝「循跡控制板」，如果您手邊的 Webduino 自走車為「白色的」萬向輪支架，則必須更換為 3D 列印的支架。如此一來才可以順利組合循跡控制板，<font color="orange">若自走車上頭已經是「3D 列印支架」則不用更換</font>。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231522.png" alt="更換自走車萬向輪"></p>
<p>更換的方式很簡單 ( 已是 3D 列印支架可略過組裝教學 )，首先用螺絲起子鬆開支架的小螺絲，取下支架和萬向輪，萬向輪內有四顆小鋼珠和一顆大鋼珠，千萬注意不要弄丟了 (建議可用磁鐵放在旁邊吸附著)。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231550.png" alt="自走車分解圖"></p>
<p>將 3D 列印的支架用原本的螺絲螺帽鎖到車體上，和車體並不會垂直，是正常的現象。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231610.png" alt="更換自走車萬向輪"></p>
<p>將萬向輪鎖上，車體的改造就完成了。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231632.png" alt="更換自走車萬向輪"></p>
<p>接著移除 Webduino 馬克一號原本的 Arduino Pro mini，換上循跡自走車的 Arduino Pro mini。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231649.png" alt="更換馬克一號 Arduino Pro Mini9"></p>
<p>循跡車 Arduino 背面的接線照片如下，如果不小心把線拔除了就按照顏色位置接回去即可。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231710.png" alt="循跡車 Arduino"></p>
<p>注意換完的方向要正確，五條線的接頭朝下，灰色線接頭朝上。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231728.png" alt="馬克一號更換循跡車 Arduino"></p>
<p>將馬克一號與自走車組合，五條線接頭插入 3D 列印支架的孔洞當中，目的在於要組合循跡控制板。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231814.png" alt="循跡自走車"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231859.png" alt="循跡自走車"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231930.png" alt="20210205231930"></p>
<p>灰色的線則向上和馬克一號 A3 的腳位連接。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205231958.png" alt="循跡自走車"></p>
<p>將循跡控制板插入五條線的接頭，如果在運行的時候發現偵測狀況不理想，可使用十字螺絲起子，調整循跡偵測的靈敏度。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205232024.png" alt="安裝循跡控制板"></p>
<p>最後放入四顆 3 號電池，就完成了 Webduino 循跡自走車的升級改造。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205232045.png" alt="Webduino 循跡自走車"></p>
</li>
</ul>
<h5 id="4-3-體驗-Webduino-循跡功能"><a href="#4-3-體驗-Webduino-循跡功能" class="headerlink" title="4.3. 體驗 Webduino 循跡功能"></a>4.3. 體驗 Webduino 循跡功能</h5><p> &nbsp;打開 Webduino 循跡自走車操控頁面，在上方填入自走車馬克一號的 Device ID，按下 Connect 連線，連線成功之後，就可以開始使用下方的遙控器循跡與記錄功能。</p>
<p>循跡自走車操&gt;控頁面：<code>https://goo.gl/NrTrLb</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205232142.png" alt="Webduino 循跡功能"></p>
<p>遙控器第一個部分有三個按鈕：</p>
<ul>
<li>第一個按鈕是「循跡與紀錄軌跡」的功能，點選之後就會啟動循跡功能，只要地上有黑色的線 (寬度需大於四公分)，就會跟隨著黑線移動，同時也會開始記錄移動的軌跡。</li>
<li>第二個按鈕是「停止」，除了會停止自走車的動作，同時也停止軌跡的紀錄。</li>
<li>最後一個按鈕是「播放」，點選之後自走車就會開始運行上一次紀錄的路徑。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205232226.png" alt="循跡設定"></p>
<p>遙控器的第二個部分為「軌跡控制板」，當我們在上面繪製線條圖案，自走車就會跑出我們所繪製的形狀。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205232246.png" alt="繪製循跡路徑"></p>
<p>由於每輛自走車的馬達轉速不見得相同 ( 相同型號的馬達轉速也都會有誤差 )，電池的電量也都會有差異，所以在遙控器最後一個部分提供了「設定」功能：</p>
<ul>
<li>拉霸 Around：修正左右偏移量，如果自走車在跑的時候一直向左偏，就往右調整一些</li>
<li>拉霸 Rotational speed：表示速度，速度 100% 表示全速行進</li>
<li>拉霸 Radial：微調校正速度。假設在 100% 的速度下 150ms 會跑 50px，但實際上卻只跑了 40px，就必須透過 Radial 修正</li>
<li>拉霸 Degree：微調修正轉的角度，原理和 Raidal 相同<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205232321.png" alt="馬達轉速"></li>
</ul>
<h5 id="4-4-Webduino-Blockly-操作"><a href="#4-4-Webduino-Blockly-操作" class="headerlink" title="4.4. Webduino Blockly 操作"></a>4.4. Webduino Blockly 操作</h5><p> &nbsp;如果不想要用遙控器操作，亦可使用 <a href="https://blockly.webduino.io/">Webduino Blockly 編輯工具</a> 實現循跡功能，打開下方的範例網頁，會帶出對應的循跡自走車程式，填入 Device ID，點選右上方的執行按鈕，就會看到自走車沿著黑色路線行進了。</p>
<p>範例程式：<code>https://goo.gl/8XYAam</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205232423.png" alt="循跡自走車積木"></p>
<p>以上就是 2017 Webduino 循跡自走車的組裝與基本操控。</p>
<hr>
<h2 id="Webduino-Fly"><a href="#Webduino-Fly" class="headerlink" title="Webduino Fly"></a>Webduino Fly</h2><h3 id="1-商品描述"><a href="#1-商品描述" class="headerlink" title="1. 商品描述"></a>1. 商品描述</h3><ul>
<li><p>Webduino Fly<br>Webduino Fly 是因應 Arduino UNO 誕生的開發板，也稱為 Arduino UNO 雲端擴充板，當 Arduino UNO 套用 Webduino Fly 之後，立即就變成具備透過 Wifi 控制的能力，立即擁有完整的 Webduino 開發功能，易學易用，不管是入門使用者、進階開發者、資深研究者等，不需要理會硬體的煩雜技術，只需用 Web 技術，就可以控制 Arduino 相容的感應模組的神兵利器！</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210214191614.png" alt="Webduino Fly"></p>
</li>
<li><p>產品說明</p>
<ul>
<li>開關 STA 模式：Wi-Fi 初始化設定</li>
<li>開關 AP 模式：Webduino 模式 ( Wi-Fi )</li>
<li>斷線指示燈：Webduino 模式下，若 Wi-Fi 斷線會亮燈</li>
<li>按鈕：Reset</li>
</ul>
</li>
<li><p>和 Arduino UNO 組裝照片<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210214191754.png" alt="20210214191754"></p>
</li>
<li><p>初次使用必看<br>實作 Webduino Fly 之前，最重要的就是進行初始化設定，初始化設定的目的在於讓 Webduino Fly可以自動上網，請連結至初始化設定教學頁面按照步驟設定，確保可以正常使用。此外，要走 Arduino Firmata 的通訊協定，所以必須「要燒錄具有 Firmata 通訊協定的韌體」，請點選下方網址觀看燒錄步驟與相關設定，讓你的 Arduino UNO 長出 Web 的翅膀，一起遨遊雲端！</p>
</li>
</ul>
<h3 id="2-Webduino-Fly-初始化設定"><a href="#2-Webduino-Fly-初始化設定" class="headerlink" title="2. Webduino Fly 初始化設定"></a>2. Webduino Fly 初始化設定</h3><p>使用 Webduino Fly (UNO 雲端擴充板)，可以讓你手邊的 Arduino UNO 變成 Webduino，具備完整的 Webduino 功能，然而使用 UNO 雲端擴充板之前，最重要的就是進行初始化設定，初始化設定的目的在於讓 Webduino UNO 雲端擴充板可以自動上網。</p>
<blockquote>
<p><font color="orange">Webduino Fly 無法獨立運作，必須搭配 Arduino UNO 操控。</font><br> 以下的步驟將會介紹如何進行設定，閱讀過程請注意<font color="orange">橘黃色</font>的文字，這些文字描述了大家在設定的時候，比較容易犯的錯誤。</p>
</blockquote>
<p>Webduino Fly 初始化步驟說明</p>
<ul>
<li><p>組合 Arduino UNO 與 Webduino Fly</p>
<p>將「Webduino Fly」與「Arduino UNO」組合，就成為「Webduino UNO 開發板」。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210214200228.png" alt="Webduino Fly+Arduino Uno"></p>
</li>
<li><p>將 Webduino Fly 切換為設定模式</p>
<p>在 Webduino Fly 上面會有一顆可以左右扳動的小開關，將開關扳動至 STA 模式，就可以開始進行初始化設定。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210214200307.png" alt="初始化"></p>
</li>
<li><p>使用 Wi-Fi 搜尋 Webduino Fly</p>
<p>使用電腦或行動裝置，打開 Wi-Fi 搜尋對應的 Webduino 開發板 SSID 名稱，點選之後輸入密碼，即可讓電腦或行動裝置與 Webduino 開發板連線，開發板的 SSID 與密碼會貼在「裝置說明書」或開發板上，通常為「wa」開頭。(範例名稱為 wa101)<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210214200408.png" alt="Webduino 初始化"></p>
</li>
<li><p>連線 Webduino Fly 進行設定</p>
<p>打開 Chrome 或 Safari 瀏覽器，於網址列輸入「<code>http://192.168.4.1</code>」，即可打開 Webduino 開發板的設定頁面，在設定頁面輸入家裡、公司場所或行動裝置分享的網路基地台 SSID 與 PASSWORD。(<font color="orange">此處的 SSID 為「網路基地台」的 SSID，並非 Webduino 開發板，不要填成裝置說明卡上頭的 SSID 與 PASSWORD</font>，且 SSID 與 PASSWORD 有限制 14 個字元，只能大小寫的英文字母與數字的組合，要特別注意！)<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210214200514.png" alt="Webduino 初始化"></p>
</li>
<li><p>重啟 Webduino Fly<br>輸入完 SSID 與 PASSWORD 之後，點選送出，若出現「OK」的字樣，表示 Webduino 開發板已經初始化成功，並且可以和家裡、公司場所或行動裝置分享的網路基地台連線 ( 若遲遲沒有出現「OK」字樣，表示初始化設定不成功，返回步驟 3 重新開始 )，完成後先移除開發板電源，再將開關扳至右側 ( AP 模式 )，重新接上電源即可進行重啟。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210214200658.png" alt="Webduino Fly 初始化"></p>
</li>
<li><p>確認連線是否成功<br>Webduino 開發板重啟後，便可將電腦或行動裝置切回正常的網路連線，並連結 <code>https://webduino.io/device.html</code>，輸入對應的 device 名稱確認是否連線成功，如果連線成功則會出現 OK 的顯示，連線成功後即可開始玩轉 Webduino。(若在網頁上沒有對應 Webduino 開發板，則需重啟 Webduino 開發板或返回步驟 2 重新初始化設定)</p>
<blockquote>
<p>連線確認網址：<code>https://webduino.io/device.html</code><br> Off-line 燈號判斷：<font color="orange">紅燈熄滅 (連線成功)、紅燈恆亮 (STA 模式 或 連線失敗)、紅燈閃爍 (嘗試連線)</font>。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210214200805.png" alt="Webduino Device ID"></p>
<p>如果是使用 Webduino Fly 還有一個更簡單的判斷方式，在板子上有一個紅色的小 LED 燈，正在連線的時候紅色 LED 會發亮，連線成功後就會熄滅，若 LED 燈持續閃爍，表示沒有連線成功，這時請重啟 Webduino 開發板，或返回步驟 2 重新初始化設定。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210214200831.png" alt="Webduino Fly 初始化"></p>
</li>
<li><p>Webduino Fly 已經可以連線網路基地台<br>進行到此步驟，表示 Webduino 開發板已經可以自行連上家裡、公司場所或行動裝置分享的網路基地台，並自動連結上雲端的伺服器，我們就可以開始透過 Wi-Fi 去控制 Webduino 開發板囉！</p>
</li>
<li><p>Webduino Fly 韌體更新<br>在最新的版本中，Webduino Fly 新增了更多的功能，為了能夠使用這些功能，我們需要先將 Webduino Fly 的韌體程式更新。而 Webduino Fly 具有兩種韌體更新方式，分別為雲端更新和 Arduino 燒錄，這裡推薦使用<font color="orange">雲端更新</font>。</p>
</li>
<li><p><a href="https://tutorials.webduino.io/zh-tw/docs/cloud/basic/webduino-device-update.html">雲端更新教學(推薦)</a></p>
</li>
</ul>
<h3 id="3-Device-裝置管理-雲端更新"><a href="#3-Device-裝置管理-雲端更新" class="headerlink" title="3. Device 裝置管理(雲端更新)"></a>3. Device 裝置管理(雲端更新)</h3><p>  如果已經透過 Webduino Device 裝置管理新增與認證裝置，下一步就可以開始進行雲端更新。不論裝置是否在身邊，只要裝置處於上線狀態，就能透過雲端更新的方式輕鬆進行遠端更新，甚至可以多台裝置同時更新、同時設定。</p>
<ul>
<li><p>雲端更新韌體<br>雲端更新的方式很簡單，一開始先勾選需要雲端更新的裝置，點選左上方的「更新韌體」按鈕，雲端更新可以進行單選或是多選，但所選取的裝置必須為<font color="orange">同一種類型且經過認證</font>，如果發現多選之後無法點選更新按鈕，可能是包含了不同類型的裝置，或有某些裝置尚未經過認證。(更新版本請參考下方「雲端更新版本」 )</p>
<blockquote>
<p>更新韌體支援的開發板：馬克一號、Fly<br> Smart 目前僅支援「雲端更新版本」，更新後一併將韌體升級至最新版，請繼續往下閱讀雲端更新版本的內容</p>
</blockquote>
<blockquote>
<p><font color="orange">開發板 SSID 為 wa6000 號之前的開發板無法進行更新</font>，需寄回 Webduino 進行更新 ( 例如 wa6001 可以更新，wa5999 無法更新 )，郵寄地址：80661 高雄市前鎮區復興四路 12 號 2 樓之 6，慶奇科技收。( 請於信封或包裹內容描述「無法進行雲端更新，協助更新版本」)</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215122350.png" alt="雲端更新開發板"></p>
<p>點選更新韌體按鈕之後，可以從下拉選單選擇需要更新的韌體。</p>
<blockquote>
<p>注意，若是使用馬克一號或 Fly，請先將「版本」更新至 1.8.5 以上才能進行韌體更新。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215122539.png" alt="選擇更新韌體"></p>
<p>選擇完成後就會開始進行更新，更新完成，開發板就會變成相對應的韌體了。</p>
<blockquote>
<p>注意，更新的時候切勿移除開發板電源或中斷網路連線，避免更新失敗。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215123108.png" alt="開發板更新完成"></p>
<p>使用 Webduino 雲端平台更新的好處，只要裝置都經過認證，就可以一次勾選多台裝置同時更新。</p>
<blockquote>
<p>同時更新必須為同一種類型的開發板。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215123145.png" alt="多台裝置同時更新"></p>
<p>在燒錄完成的訊息提示裡，也會標註每一個裝置的燒錄狀態，燒錄成功會用綠色表示，燒錄失敗會用紅色表示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215123210.png" alt="燒錄狀態"></p>
</li>
<li><p>雲端更新版本<br>除了更新操控元件的韌體外，亦可透過「更新版本」的按鈕，將開發板核心程式更新，近一步取得更穩定的開發板核心程式。(注意，更新的時候<font color="orange">切勿移除開發板電源或中斷網路連線</font>，避免更新失敗。)</p>
<blockquote>
<p>雲端更新版本支援的開發板：馬克一號、Fly、Smart</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215123658.png" alt="更新版本"></p>
</li>
<li><p><a href="https://goo.gl/4qJ9j1">Arduino 韌體下載與燒錄</a></p>
</li>
</ul>
<h3 id="4-應用"><a href="#4-應用" class="headerlink" title="4. 應用"></a>4. 應用</h3><h4 id="4-1-控制單顆-LED-燈"><a href="#4-1-控制單顆-LED-燈" class="headerlink" title="4.1. 控制單顆 LED 燈"></a>4.1. 控制單顆 LED 燈</h4><p>只有一顆 LED 燈的接線方式很簡單，首先，LED 燈有「長短腳」之分，長腳接「高電位」(帶有數字的腳位)，短腳接「低電位」(GND、接地)，因此我們只要直接將 LED 插到腳位上即可，或使用麵包板與麵包線外接出來，在這裡長腳接 10，短腳接 GND。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215125016.png" alt="20210215125016"></p>
<ul>
<li><p>Webduino Blockly 操作解析<br>打開 <a href="https://blockly.webduino.io/">Webduino Blockly 編輯工具</a>，在第一個範例裡頭，我們將會點選網頁「燈泡圖案」來控制 LED 燈的切換，所以要先點選右上方「網頁互動測試」的按鈕，打開內嵌測試的網頁，用下拉選單選擇「點擊燈泡」，就會出現讓我們可以點選燈泡的網頁。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215130442.png" alt="20210215130442"><br>從編輯工具左側的積木選單中選擇「開發板」，將開發板放到畫面當中，填入對應的 Webduino 開發板名稱 ( Device 名稱，不要勾選串連 )，接著選擇「LED 燈」的積木，將 LED 燈的積木放到開發板積木的缺口內，腳位設定為 10 ( 因為剛剛把長腳接在 10 號腳 )。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215130510.png" alt="20210215130510"></p>
<p>因為要和網頁互動，所以我們要從積木選單的最下方「網頁互動」，點選「點擊燈泡」，就會看到很多點擊網頁燈泡圖片互動的選項。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215130526.png" alt="20210215130526"></p>
<p>把「點擊燈泡執行」的積木放到編輯畫面裡，代表點擊燈泡時要做些什麼事情。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215130540.png" alt="20210215130540"></p>
<p>在執行的內容放入「邏輯」的積木，判斷點擊燈泡時，依據當時的狀態做出相對的反應，而我們也可以利用邏輯積木上面「藍色小齒輪」，添增邏輯選項。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215130555.png" alt="20210215130555"></p>
<p>根據邏輯，判斷「當燈泡是 on」的話，點擊燈泡就會變成「off」，反之就是「on」。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215130606.png" alt="20210215130606"></p>
<p>完成後，確認開發板上線 ( 點選「檢查連線狀態」查詢 )，點選紅色的執行按鈕，就可以開始。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215130623.png" alt="20210215130623"></p>
<p>點擊內嵌網頁裡的燈泡圖片，就可以輕鬆地控制 LED 燈的明暗，然而我們也可以點選「JavaScript 頁籤」，就可以看到完整的程式碼邏輯，同時也可以複製這些代碼，貼到自己的網頁原始碼當中，就可以在自己的網頁裡實現一模一樣的行為囉！</p>
<p>(解答： <code>https://blockly.webduino.io/#-K4pR8RaEF6IkiWdAYk7</code>)</p>
</li>
</ul>
<h4 id="4-2-控制光敏電阻"><a href="#4-2-控制光敏電阻" class="headerlink" title="4.2. 控制光敏電阻"></a>4.2. 控制光敏電阻</h4><p>首先我們放入開發板的積木，下拉選單選擇 WebSocket ( 注意，使用 WebSocket 的工具網址必須是 http 開頭 )，填入開發板的 ip 位址，放入光敏電阻的積木，類比腳位選擇 A0<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215215604.png" alt="20210215215604"></p>
<p>放入光敏電阻開始偵測的積木，並讓偵測的數值顯示在網頁互動測試區域裡，點選右上方紅色按鈕執行，就會看到光的數值轉換為小數點呈現出來了。<br>(解答：`<a href="http://blockly.webduino.io/#-KbJWK4xVaxi0BEUct-U">http://blockly.webduino.io/#-KbJWK4xVaxi0BEUct-U</a>)<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215215621.png" alt="20210215215621"></p>
<p>如果覺得直接類比訊號讀入的浮點數不是自己想要的數值，我們可以透過「四捨五入」和「尺度轉換」兩種積木，將光敏電阻的數值，轉換成 0 到 100 之間，小數點兩位的數值顯示。<br>(解答：<code>http://blockly.webduino.io/#-KbJWUprpSwvmWuBjfcU</code>)</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215215758.png" alt="20210215215758"><br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215215811.png" alt="20210215215811"></p>
<p>還記得之前才提過的 Smart 三色燈初體驗 嗎？我們也可以透過簡單的邏輯判斷，讓數值 0<del>0.2 顯示紅色，0.2</del>0.4 顯示綠色，0.4~0.6 顯示藍色，大於 0.6 就，三色燈元件和光敏電阻的搭配，只需要一塊小小的 Smart 開發板就能搞定。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210215215828.png" alt="20210215215828"></p>
<p>點選右上方紅色按鈕執行，用手去遮住光敏電阻，或是用燈去照光敏電阻，就會看見 Smart 的三色燈出現不同的顏色。 (解答：<code>http://blockly.webduino.io/#-KbJXCjhMYgmr6Pm7Gud</code>)</p>
<h4 id="4-3-RFID-控制-Youtube"><a href="#4-3-RFID-控制-Youtube" class="headerlink" title="4.3. RFID(控制 Youtube)"></a>4.3. RFID(控制 Youtube)</h4><ul>
<li><p>範例影片展示</p>
<div class="video-container">
  <iframe width="560" height="316" src="https://www.youtube.com/embed/RrCAOgtPHdo" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div></li>
<li><p>接線與實作<br>接線方式和上一篇範例一模一樣，將 SDA 接 10，SCK 接 13，MOSI 接 11，MISO 接 12，GND 接在 GND，VCC 接在 3.3V 的位置，此外因為腳位限制，所以在這個範例<font color="blue">必須使用 Arudino UNO 和 Webduino FLY 雲端擴充板搭配進行</font>。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216120035.png" alt="Fly 接線 RFID"></p>
<p>實際接線照片：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216120134.png" alt="Fly 接線 RFID"></p>
</li>
<li><p><font color="blue">Webduino Smart 接線方式</font><br>如果是使用 Webduino Smart 腳位也有對應功能，所以接線方式就把 15 接 SDA，14 接 SCK，13 接 MOSI，12 接 MISO，GND 接 GND，3.3V 接 3.3V 的位置。</p>
<blockquote>
<p>如果要使用 Smart 操控，請使用 雲端平台 更新韌體，韌體版本有 reg 標記表示有支援 RFID。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216120238.png" alt="Smart 接線 RFID"></p>
<p>實際接線照片：<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216120258.png" alt="Smart 接線 RFID"></p>
</li>
<li><p>Webduino Blockly 操作解析<br>打開 Webduino Blockly 編輯工具 (<code>https://blockly.webduino.io</code>)，因為這個範例會需要知道 RFID 感應卡的「卡號」，所以必須先用網頁「顯示文字」來顯示偵測到的每張 RFID 磁卡的卡號，先打開 Webduino Blockly 的網頁互動測試區，下拉選單選擇「顯示文字」，此時在右下角會出現對應的積木功能可以選擇。(如果已經知道卡號則可略過這個步驟。)</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216121447.png" alt="網頁互動測試"></p>
<p>把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，開發板內放入 RFID 的積木，名稱設定為 rfid，腳位設定為 10、13、11、12，放入「偵測訊號」的積木，在我們拿 RFID 磁卡或磁扣去感應讀卡器的時候，右邊的網頁就會顯示對應的識別碼。( 如果是 Smart 就選擇 SDA 15、SCK 14、MOSI 13、MISO 12 )</p>
<blockquote>
<p>RFID 的積木在「無線感應 &gt; RFID」目錄下。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216121518.png" alt="RFID 積木"></p>
<p>填入裝置 Device ID，確認開發板上線，點選右上方紅色按鈕執行，用不同的磁卡或磁扣去感應讀卡器，就會出現識別碼，這時我們先把這些對應的代碼記下來，待會就要用這些代碼來判斷。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216121556.png" alt="偵測磁卡與磁扣代碼"></p>
<p>回到右邊的網頁互動測試區，下拉選單選擇「Youtube」，此時在右下角會出現對應的積木功能可以選擇。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216121623.png" alt="Youtube 網頁互動"></p>
<p>Youtube 的積木都在左邊網頁互動裡面，一開始我們要先載入 Youtube 模組，注意！模組只需要載入一次，因此該積木不要放到 RFID 偵測到訊號的區塊裡，不然會變成每次偵測都會載入一次模組，就會出錯了。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216121647.png" alt="Youtube 模組積木"></p>
<p>打開 Youtube，選擇一段影片，複製這段影片的網址，回到剛剛的畫面貼上。</p>
<blockquote>
<p>注意，網址不支援使用 Youtube 分享功能的「縮網址」。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216121717.png" alt="20210216121717"></p>
<p>如果說我們想要利用磁扣切換播放的影片，只要放入「更換 Youtube 影片」的積木，把要更換的影片網址填進去就可以切換。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216121750.png" alt="設定磁卡切換 Youtube 影片"></p>
<p>除了切換影片，也可以把 RFID 磁卡當作控制 Youtube 的方式，下圖是透過三張卡片，分別控制影片的播放、暫停與停止。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210216121819.png" alt="設定磁卡控制影片播放"></p>
<p>做好之後，填入裝置 Device ID，確認開發板上線，點選右上方紅色按鈕執行，就可以開始用 RFID 磁卡控制 Youtube 影片了。</p>
<p>執行的時候有可能會發生「腳位選錯但仍正確讀取到卡號」的狀況，這是因為 RFID 程式底層不是使用數字，而是使用 SDA、SCK、MOSI 和 MISO 操控，在積木上的腳位則是方便使用者接線識別，不過如果實際接線接錯，仍然是無法順利運作的，要特別注意。</p>
<p>範例解答：<code>https://goo.gl/Se8IN7</code></p>
</li>
<li><p>相關參考</p>
<ul>
<li>範例解答：<code>https://goo.gl/Se8IN7</code></li>
<li>範例完整程式碼：<code>http://bin.webduino.io/giki/edit?html,js,output</code></li>
</ul>
</li>
</ul>
<hr>
<h2 id="智慧追蹤-伺服馬達-攝影機"><a href="#智慧追蹤-伺服馬達-攝影機" class="headerlink" title="智慧追蹤 ( 伺服馬達 + 攝影機 )"></a>智慧追蹤 ( 伺服馬達 + 攝影機 )</h2><h3 id="範例影片展示"><a href="#範例影片展示" class="headerlink" title="範例影片展示"></a>範例影片展示</h3><p><a href="https://youtu.be/-l4bSdcpeME">https://youtu.be/-l4bSdcpeME</a></p>
<h3 id="接線與實作"><a href="#接線與實作" class="headerlink" title="接線與實作"></a>接線與實作</h3><p>伺服馬達具有三條電線。紅色的為正電，深咖啡色是接地 GND，橘色的則是訊號線，伺服馬達需使用 5V 或 VCC 的供電，或者使用獨立電源進行供電，此處我們將伺服馬達的訊號腳接在開發板的數位腳 ( 5 腳位 )。</p>
<p><strong>操作解析</strong><br>打開 Webduino Blockly 編輯工具 (<code>https://blockly.webduino.io</code>)，因為這個範例會使用人臉追蹤，所以要打開網頁互動測試區，下拉選單選擇「影像追蹤」，選擇之後在左側積木清單的最下方，就會出現對應的積木。<br>  <a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/servo.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/servo3_s.jpg" class="nofancybox  img-center"></a></p>
<p>在畫面中放入開發板積木，填入 <code>Device ID</code>，在開發板內放入伺服馬達的積木，腳位設定 <code>5</code>，伺服馬達變數名稱設定為 <code>servo</code>。</p>
<blockquote>
<p>開發板的積木在「開發板控制」目錄下，伺服馬達積木在「玩具及馬達 &gt; 伺服馬達」的目錄下。<br>  <a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/servo1.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/servo4_s.jpg" class="nofancybox  img-center"></a></p>
</blockquote>
<p>再來需要設定三個變數，並將變數更名 servoAngle、check 和 videoWidth</p>
<ul>
<li>變數 <code>servoAngle</code> 是「伺服馬達旋轉的角度」，將伺服馬達的初始化角度設為 <code>90</code> 度 ( 伺服馬達左右擺動為 <code>0 ~ 180</code> 度 )</li>
<li>變數 <code>check</code> 則是「人臉座標和影片畫面中心的差距」，如果是 <code>0</code> 表示人臉在畫面的中間</li>
<li>變數 <code>videoWidth</code> 則是追蹤影片畫面的寬度。</li>
</ul>
<blockquote>
<p>變數的積木在「變數」目錄下。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205223625.png" alt="伺服馬達設定積木"></p>
</blockquote>
<p>接著使用「影像追蹤」的積木，並設定為「追蹤人臉」，再來放入變數 facePosition 與數學運算的積木，將 facePosition 的數值設定為「<font color="orange">追蹤數值 x - ((影片寬度/2) - (追蹤數值 width/2))</font>」，目的在於判斷人臉是在中間的位置。</p>
<p>數學運算的積木在「基本功能 &gt; 數學式」目錄下。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205223728.png" alt="影像追蹤積木"></p>
<p>如果不容易理解數學公式，可以參考下面的分解圖。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205223747.png" alt="影像追蹤積木原理"></p>
<p>原理大概如下圖所示，因為人臉的座標不斷在變化，如果要確定人臉是在「中間」，就必須透過一系列數學運算的轉換，如此才能把人臉移動的位置，對應到伺服馬達旋轉角度上。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205223808.png" alt="影像追蹤積木原理"></p>
<p>接著放入邏輯積木，透過藍色小齒輪增加判斷條件，讓人臉位置如果在 -30 ~ 30 之間的話，伺服馬達不會移動，如果超過這個區間，伺服馬達就會開始轉動，直到人臉又進入這個區間為止。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205223827.png" alt="設定伺服馬達偵測影像旋轉角度"></p>
<p>最後多增加伺服馬達旋轉角度判斷，如果 servoAngle 大於 180，就讓 servoAngle 保持在 180，如果 servoAngle 小於 0，就讓 servoAngle 保持在 0。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210205223844.png" alt="設定伺服馬達偵測影像旋轉角度"></p>
<p>確認開發板上線，點選右上方紅色按鈕執行程式，就會看到攝影機所拍攝的畫面出現在網頁互動區，如果偵測到的人臉不在中心位置，就會自動轉向直到人臉進入中心位置為止。</p>
<ul>
<li>積木<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye_s.jpg" class="nofancybox  img-center"></a><blockquote>
<p>解答：<a href="https://goo.gl/sEMe9A">https://goo.gl/sEMe9A</a></p>
</blockquote>
</li>
</ul>
<p>相關參考<br>範例解答：<code>https://goo.gl/sEMe9A</code><br>範例完整程式碼：<code>https://bin.webduino.io/qugib/edit?html,css,js,output</code><br>人臉追蹤教學文：<a href="https://tutorials.webduino.io/zh-tw/docs/useful/component/led-tracking-face.html">LED (人臉追蹤)</a><br>伺服馬達教學文：<a href="https://tutorials.webduino.io/zh-tw/docs/basic/component/servo.html">伺服馬達</a></p>
<hr>
<h2 id="Smart-智慧屋"><a href="#Smart-智慧屋" class="headerlink" title="Smart 智慧屋"></a>Smart 智慧屋</h2><h3 id="材料列表"><a href="#材料列表" class="headerlink" title="材料列表"></a>材料列表</h3><p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-01.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-01_s.jpg" class="nofancybox  img-center"></a></p>
<h3 id="1-組裝房子"><a href="#1-組裝房子" class="headerlink" title="1. 組裝房子"></a>1. 組裝房子</h3><ol>
<li><p>首先將 A 板 B 板分別拆下，底部對齊，垂直安裝。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-02.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-02_s.jpg" class="nofancybox  img-center"></a></p>
</li>
<li><p>C 板對齊 A 板凹槽，C 板對齊 B 板凸位，3 板子相互垂直安裝。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-03.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-03_s.jpg" class="nofancybox  img-center"></a></p>
</li>
<li><p>D 板對齊 A 板凹槽，D 板對齊 B 板凸位，互相垂直安裝。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-04.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-04_s.jpg" class="nofancybox  img-center"></a></p>
</li>
</ol>
<h3 id="2-組裝門"><a href="#2-組裝門" class="headerlink" title="2. 組裝門"></a>2. 組裝門</h3><ol>
<li><p>將門板 I 底部凸出處，斜插入 A 板圓孔位。</p>
</li>
<li><p>將 J 板圓孔套在門板 I 上端凸出處。</p>
</li>
<li><p>豎直門板，對齊嵌入。</p>
</li>
<li><p>嘗試轉動門軸，可以順利轉動即可進行安裝馬達。</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-05.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-05_s.jpg" class="nofancybox  img-center"></a></p>
</li>
</ol>
<h3 id="3-組裝門把機關"><a href="#3-組裝門把機關" class="headerlink" title="3. 組裝門把機關"></a>3. 組裝門把機關</h3><ol>
<li><p>如圖先將軸柄安裝至伺服馬達上，透過雲端平台拖拉積木程式，校正為 90 度，再將軸柄拿掉。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-06.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-06_s.jpg" class="nofancybox  img-center"></a></p>
</li>
<li><p>取出 K、Ｌ ( 1、2、3、4、5、6 )。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-07.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-07_s.jpg" class="nofancybox  img-center"></a></p>
</li>
<li><p>組合成門把。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-08.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-08_s.jpg" class="nofancybox  img-center"></a></p>
</li>
<li><p>將門把安裝至門上。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-09.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-09_s.jpg" class="nofancybox  img-center"></a></p>
</li>
<li><p>將門把安裝到馬達上<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-10.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-10_s.jpg" class="nofancybox  img-center"></a></p>
</li>
</ol>
<h3 id="4-安裝-Smart-開發板及-LCD-顯示器"><a href="#4-安裝-Smart-開發板及-LCD-顯示器" class="headerlink" title="4. 安裝 Smart 開發板及 LCD 顯示器"></a>4. 安裝 Smart 開發板及 LCD 顯示器</h3><ol>
<li><p>Smart 開發板放置在 A 板中央孔位，LCD 顯示器可以嵌入 B 板大長方形孔位中。</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house11.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house11_s.jpg" class="nofancybox  img-center"></a>  </p>
</li>
</ol>
<h3 id="5-組裝牆壁、屋頂安裝-Smart-開發板及-LCD-顯示器"><a href="#5-組裝牆壁、屋頂安裝-Smart-開發板及-LCD-顯示器" class="headerlink" title="5. 組裝牆壁、屋頂安裝 Smart 開發板及 LCD 顯示器"></a>5. 組裝牆壁、屋頂安裝 Smart 開發板及 LCD 顯示器</h3><ol>
<li><p>H 板兩邊缺口垂直朝下安裝。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-12.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-12_s.jpg" class="nofancybox  img-center"></a></p>
</li>
<li><p>將 F 板凹槽旁短邊朝 H 板屋脊方向安裝。</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-13.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-13_s.jpg" class="nofancybox  img-center"></a></p>
</li>
<li><p>E 板底部對齊 A 板凹槽，C、D 板凹槽與 E 板凸位相互垂直對齊安裝。</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-14.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-14_s.jpg" class="nofancybox  img-center"></a></p>
</li>
<li><p>G 板凹槽旁短邊朝屋脊方向安裝，確認小屋是否穩固。</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-15.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-15_s.jpg" class="nofancybox  img-center"></a>  </p>
</li>
</ol>
<h3 id="6-完成組裝"><a href="#6-完成組裝" class="headerlink" title="6. 完成組裝"></a>6. 完成組裝</h3><p>   <a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-16.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-house-16_s.jpg" class="nofancybox  img-center"></a></p>
<h2 id="智慧插座"><a href="#智慧插座" class="headerlink" title="智慧插座"></a>智慧插座</h2><ul>
<li><p>範例影片展示</p>
<div class="video-container">
  <iframe width="560" height="316" src="https://www.youtube.com/embed/nFEY_k_2zxQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
</li>
<li><p>接線與實作</p>
<p>我們使用的插座有兩個插孔，其中一個插孔會接上家用電，同時這個插孔會提供 <code>Webduino</code> 開發板電源，然後透過繼電器來控制另外一個插孔的供電與否，因此我們會把接在插孔上的單心線，接到繼電器的「公共」與「常開」端，然後繼電器的 VCC 接在開發板的 5V，GND 接在 GND，Vin 訊號腳可以接在 2~13。</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-01.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-01_s.jpg" class="nofancybox img-center"></a></p>
<p>所需材料列表：</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-02.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-02_s.jpg" class="nofancybox img-center"></a></p>
<p>一開始先把插座和插座背板結合，插座有卡榫，直接裝上去就可以。</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-03.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-03_s.jpg" class="nofancybox img-center"></a></p>
<p>中間的空間剛好可以放入繼電器，可以直接卡進去或是用熱熔膠固定，插座則看照片放入五根單心線，單心線很硬，直接塞進去插座的接孔內就可以 (內有金屬夾片會自動卡住 )</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-04.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-04_s.jpg" class="nofancybox img-center"></a></p>
<p>組合插頭與電線，直接把電線的頭去皮，分別鎖到插頭上即可。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-05.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-05_s.jpg" class="nofancybox img-center"></a></p>
<p>把單心線和電線，用快速接頭連接，同時也把單心線接到繼電器上面 ( 公共端 與 常開端)。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-06.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-06_s.jpg" class="nofancybox img-center"></a></p>
<p>繼電器的另一側用杜邦線接出來。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-07.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-07_s.jpg" class="nofancybox img-center"></a></p>
<p>組合外殼。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-08.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-08_s.jpg" class="nofancybox img-center"></a></p>
<p>上蓋用螺絲固定 ( 若螺絲太小可用墊片與螺帽輔助 )。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-09.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-09_s.jpg" class="nofancybox img-center"></a></p>
<p>和開發板連線就完成囉！插座上有兩個插孔，一個是固定供電給開發板，透過 Wi-Fi 來控制另外一個插孔有沒有電。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-10.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-10_s.jpg" class="nofancybox img-center"></a></p>
</li>
<li><p>Webduino Blockly 操作解析<br>打開 <a href="https://blockly.webduino.io/">Webduino Blockly 編輯工具</a>，把開發板放到編輯畫面裡，填入對應的 Webduino 開發板名稱，然後放入 LED 的積木，名稱設定為 <code>led</code>，腳位設定為 <code>10</code>。</p>
<blockquote>
<p>LED 的積木在「發光元件 &gt; LED 燈」目錄下。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-11.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-11_s1.jpg" class="nofancybox img-center"></a></p>
</blockquote>
<p>打開網頁互動測試區，下拉選單選擇「點擊燈泡」，待會要透過點擊這個燈泡圖案，控制智慧插座上的電燈或電器，選擇點擊燈泡之後，在左側積木清單的下方就會有對應的積木可以使用。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-12.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-12_s.jpg" class="nofancybox img-center"></a></p>
<p>為了讓燈泡圖片和插座的電燈狀態一至，一開始先放入 led 狀態 off 和燈泡狀態 off 的積木。<br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-13.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/smart-socket-13_s2.jpg" class="nofancybox img-center"></a></p>
<p>最後放入點擊燈泡要執行的動作，動作就是「狀態切換」，如果原本是 on 就會變成 off，原本是 off 就會變成 on。</p>
<p>確認開發板上線，點選右上方紅色按鈕執行程式，點擊網頁燈泡圖片，就會看到燈泡圖片和插座上的電燈同時亮起，再點一下就會同時關閉。</p>
<blockquote>
<p>解答：<code>https://goo.gl/3FKjzi</code></p>
</blockquote>
</li>
<li><p>關參考</p>
</li>
<li><p>範例解答： <code>https://goo.gl/3FKjzi</code></p>
</li>
<li><p>範例完整程式碼： <code>https://bin.webduino.io/mujod/edit?html,css,js,output</code></p>
</li>
<li><p>只會插座三十篇完整教學：<a href="https://tutorials.webduino.io/zh-tw/docs/socket/index.html">主題課程：實戰智慧插座</a></p>
</li>
</ul>
<h3 id="使用網頁操控智慧插座"><a href="#使用網頁操控智慧插座" class="headerlink" title="使用網頁操控智慧插座"></a>使用網頁操控智慧插座</h3><ul>
<li><p>順利連上 <code>Wi-Fi</code> 之後，可以透過下列方法來檢查裝置有沒有在線上。</p>
<p><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/online.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/online_s.jpg" class="nofancybox img-center"></a></p>
</li>
<li><p>Webduino 程式用法</p>
<p>比較不熟悉的人所設計的，也就是透過「積木組裝」的方式來撰寫程式邏輯，接著來看一下對應的網頁程式要怎麼運作，首先我們點選右上方的程式編輯器，就會打開一個以 jsbin 為基底的編輯頁面，從這邊可以看到預設引入了幾支 JavaScript，撇除 JQuery、Firebase 和 runtime 這三個第三方 JavaScript，最主要就是要<strong>引入「 webduino-min.js 」還有「 webduino-blockly.js 」這兩個 JavaScript，</strong>這樣我們才有操控開發板以及燈泡的 API 可以使用。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Webduino<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://webduino.io/components/webduino-js/dist/webduino-all.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://blockly.webduino.io/webduino-blockly.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://blockly.webduino.io/lib/firebase.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://blockly.webduino.io/lib/runtime.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>JS 的原始碼可以參考：</p>
<ul>
<li><code>https://github.com/webduinoio/webduino-js</code></li>
<li><code>https://github.com/webduinoio/webduino-blockly</code></li>
</ul>
<p>首先看到開發板的部分，透過 boardReady 判斷裝置是否上線，當上線之後就會執行內容的 function。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">boardReady</span><span class="token punctuation">(</span><span class="token string">'裝置的 device 名稱'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">board</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  board<span class="token punctuation">.</span><span class="token function">systemReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 加入這行，裝置在第一次連線的時候，所有腳位輸出預設低電位 ( 0、off )</span>
  board<span class="token punctuation">.</span>samplingInterval <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">;</span> <span class="token comment">// 類比腳位取樣時間</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>因為裝置預設一次只能夠有一個人操控 (後面上線的會把前面上線的踢掉)，為了避免這種狀況，我們就必須要修改裝置的屬性，把 boardReady 的第一個變數改成物件的形式 <font color="red">{device:’裝置的 device 名稱’, multi: true}</font>，這段 <font color="red">multi: true</font> 就是可以讓多人同時操控的關鍵屬性。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">boardReady</span><span class="token punctuation">(</span><span class="token punctuation">{</span>device<span class="token operator">:</span><span class="token string">'裝置的 device 名稱'</span><span class="token punctuation">,</span> multi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">board</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
board<span class="token punctuation">.</span><span class="token function">systemReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
board<span class="token punctuation">.</span>samplingInterval <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>再來看到控制「繼電器」的部分，因為訊號對於繼電器來說不是 1 (高電位、on) 就是 0 (低電位、off)，所以可以直接使用 LED 的控制方法，LED 的控制方法有以下幾種：</p>
<ul>
<li><font color="red">getLed(board, pin)</font><br>設定 LED 為哪塊板子的幾號腳位。</li>
<li><font color="red">on(callback)</font><br>設定輸出腳位為高電為 ( 1、on )，如果有 callback 的話，在執行 .on() 之後就會執行 callback 的函式。</li>
<li><font color="red">off(callback)</font><br>設定輸出腳位為低電位 ( 0、off )，如果有 callback 的話，在執行 .off() 之後就會執行 callback 的函式。</li>
<li><font color="red">blink(time,callback)</font><br>設定 LED 閃爍 ( 高電位低電位切換，time 是毫秒 )，如果有 callback 的話，在每次閃爍之後就會執行 callback 的函式。</li>
<li><font color="red">intensity</font><br>設定「低電位」輸出強度。 ( 0~1 之間的浮點數，例如：.intensity=0.5 )</li>
<li><font color="red">toggle()</font><br>設定狀態切換，如果上一次是高電位，下一次就會是低電位。</li>
</ul>
</li>
<li><p>網頁控制</p>
<p>簡單來說，如果我們要在網頁裡面放一個按鈕，點選按鈕，燈泡就會發亮，再點選一次燈泡就會熄滅，我們可以這樣寫：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token keyword">var</span> led<span class="token punctuation">,</span>
    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    btn <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">boardReady</span><span class="token punctuation">(</span><span class="token punctuation">{</span>device<span class="token operator">:</span><span class="token string">'你的裝置名稱'</span><span class="token punctuation">,</span> multi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">board</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    board<span class="token punctuation">.</span><span class="token function">systemReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    board<span class="token punctuation">.</span>samplingInterval <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">;</span>
    led <span class="token operator">=</span> <span class="token function">getLed</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        led<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        led<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>完整程式碼：<code>http://bin.webduino.io/tagum/1/edit?html,js,output</code><br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210212234043.png" alt="20210212234043"></p>
</li>
<li><p>小結<br>以上就是透過基本的網頁來操控插座上的電器，其實原理非常的簡單，只要把實際的電器「網頁變數化」，就可以像一般網頁操作變數一樣的來操作了。</p>
</li>
</ul>
<hr>
<h2 id="WebEye"><a href="#WebEye" class="headerlink" title="WebEye"></a>WebEye</h2><p><code>WebEye</code> 是目前市面上最快速入門 AIoT (AI+IoT) 的神兵利器，不僅能在電腦裝置上運行，也能完美支援行動裝置的操作使用。透過 <code>Webduino Blockly</code> 程式積木，搭配影像辨識訓練和人臉辨識學習，輕鬆開發千變萬化的影像辨識應用。</p>
<h3 id="1-WiFi-設定方法"><a href="#1-WiFi-設定方法" class="headerlink" title="1. WiFi 設定方法"></a>1. WiFi 設定方法</h3><p>有兩種方法可以進行 WiFi 設定 (任選一種)，WebEye 預設連接的 WiFi SSID 為 webduino.io，密碼為 webduino</p>
<ul>
<li><p>方法一：使用 <code>WebEye</code> 設定畫面 (與 <code>Smart</code> 開發板相同)</p>
<ol>
<li><p><code>WebEye</code> 的設定畫面<br><code>WebEye</code> 設定 <code>wifi</code> 方式和 <code>Smart</code> 開發板一樣，如不知道如何進入 <code>WebEye</code> 設定頁面，可以 參考此<a href="https://tutorials.webduino.io/zh-tw/docs/basic/board/smart-setup.html">教學</a></p>
<blockquote>
<p>注意：載入設定畫面需等待30秒，是正常的哦</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye.png" alt="Webeye"></p>
</li>
<li><p>按下 [Update] 彈出視窗 [Save OK] 就可以斷電，重新插上電源</p>
</li>
<li><p>看到 WiFi清單顯示 wd???_xxx.xxx.xx.xx 就表示上網，如下圖<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye1.png" alt="Webeye上網一"></p>
</li>
</ol>
</li>
<li><p>方法二：透過 Webduino Smart 開發板自動設定 WiFi&lt;此方法是透過連接 Smart 開發板，取得WiFi 設定&gt;</p>
<ol>
<li>Smart韌體更新到最新版本 3.2.5以上</li>
<li>依照<a href="https://tutorials.webduino.io/zh-tw/docs/basic/board/smart-setup.html">學習手冊</a>先設定好 Smart 的 WiFi，確認連線正常。</li>
<li>Smart 移除電源，將 GND/VCC 和 WebEye 對接、TX 腳位和 WebEye IO13 腳位 連接。</li>
<li>Smart 插上電源後會將 WiFi 設定傳送給 WebEye。</li>
<li>WebEye LED 停止閃爍後即可將 IO13 腳的連線移除。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye2.png" alt="Webeye上網二"></p>
</li>
</ul>
<h3 id="2-使用方式"><a href="#2-使用方式" class="headerlink" title="2. 使用方式"></a>2. 使用方式</h3><p>將 WebEye 開機並等待 LED 燈停止閃爍完全熄滅時,查看WiFi清單,可開啟 Chrome 瀏覽器輸入wdxxx_ 底線後的 IP位置(電腦必須和 WebEye 在相同區網):</p>
<ol>
<li>開啟筆記型電腦或手機,掃描 WiFi<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye3.png" alt="Webeye上網一"></li>
<li>瀏覽器輸入 <code>http://192.168.10.147/jpg</code> 出現影像表示設定成功。IP 並非永遠固定，請在每次 WebEye 連上網路後重新查詢。</li>
</ol>
<blockquote>
<p>注意事項<br> WebEye 僅支援 2.4G 頻段網路，請勿設定 5G 頻段網路。</p>
</blockquote>
<h3 id="3-遠端影像設定方法"><a href="#3-遠端影像設定方法" class="headerlink" title="3. 遠端影像設定方法"></a>3. 遠端影像設定方法</h3><p>開啟遠端影像可以跨網域取得 WebEye 影像。<br>警告：遠端影像功能將佔用網路頻寬與流量，計費型網路請酌量使用。</p>
<h4 id="3-1-開啟遠端影像"><a href="#3-1-開啟遠端影像" class="headerlink" title="3.1 開啟遠端影像"></a>3.1 開啟遠端影像</h4><ol>
<li><p>確認 WebEye 已經設定好 WiFi 並成功連上網路。</p>
</li>
<li><p>依照上述方法取得 IP，開啟瀏覽器輸入 <code>http://[IP]/remote</code> (例如 <code>http://192.168.10.147/remote</code>)，會進入遠端影像設定畫面。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210227222749.png" alt="20210227222749"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye4.png" alt="Webeye開啟遠端影像"></p>
</li>
<li><p>不需要修改 Hostname 及 Interval，直接按下 [OK]。如果這兩個欄位已經被修改過 ，可先按下 [Default] 取得預設值。</p>
</li>
<li><p>設定完成後會取得 Remote URL。</p>
</li>
<li><p>在瀏覽器輸入 Remote URL，看見影像表示設定成功。</p>
</li>
</ol>
<h4 id="3-2-關閉遠端影像"><a href="#3-2-關閉遠端影像" class="headerlink" title="3.2 關閉遠端影像"></a>3.2 關閉遠端影像</h4><ol>
<li>進入遠端影像設定畫面。</li>
<li>清除 Hostname 並按下 [OK]。</li>
<li>顯示 Remote: disable! 表示關閉成功<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye6.png" alt="Webeye關閉遠端影像"></li>
</ol>
<h4 id="3-3-LED-燈號意義"><a href="#3-3-LED-燈號意義" class="headerlink" title="3.3 LED 燈號意義"></a>3.3 LED 燈號意義</h4><p>WebEye 內建一顆 LED 燈，依據亮暗及閃爍速度代表不同意義。<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye7.png" alt="LED 燈號意義"></p>
<ol>
<li>開機後搜尋網路時：慢速閃爍</li>
<li>進入 SmartConfig WiFi 設定時：慢速閃爍</li>
<li>開機後檢查或更新韌體時：快速閃爍</li>
<li>連上 WiFi 準備就緒後：關閉</li>
</ol>
<h3 id="4-WebEye-程式積木使用方式"><a href="#4-WebEye-程式積木使用方式" class="headerlink" title="4. WebEye 程式積木使用方式"></a>4. WebEye 程式積木使用方式</h3><ol>
<li><p>打開程式積木範例: <code>https://blocklypro.webduino.io/#XJLQm5lBv1</code></p>
<ul>
<li>填入 Smart 開發板的 DeviceID</li>
<li>填入 WebEye <strong>遠端影像網址</strong></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye9.png" alt="遠端影像網址"></p>
</li>
<li><p>完整程式積木與使用方式<br>共有5顆按鈕，按鈕1,3控制鏡頭左右，按鈕2,5控制鏡頭上下，按鈕4設定鏡頭回原點。</p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye10.png" alt="完整程式積木"></p>
</li>
</ol>
<h3 id="5-WebEye-行動裝置使用方式"><a href="#5-WebEye-行動裝置使用方式" class="headerlink" title="5. WebEye 行動裝置使用方式"></a>5. WebEye 行動裝置使用方式</h3><p>網頁使用網址: <code>https://webduinoio.github.io/webeye/app.html#????@http://????????</code></p>
<p><code>????：</code>填上 Smart 的 DeviceID<br><code>http://????????：</code>填上WebEye 遠端網址（Remote URL）</p>
<ul>
<li>範例: <code>https://webduinoio.github.io/webeye/app.html#Ga6o@http://http://webeye.webduino.io/camera/LoaqO8L2M/live</code></li>
</ul>
<h3 id="6-擴充積木使用教學"><a href="#6-擴充積木使用教學" class="headerlink" title="6. 擴充積木使用教學"></a>6. 擴充積木使用教學</h3><h4 id="6-1-啟用兌換卷"><a href="#6-1-啟用兌換卷" class="headerlink" title="6.1. 啟用兌換卷"></a>6.1. 啟用兌換卷</h4><p>兌換券(領取與添加新功能)<br>Webduino 除了原有的服務，額外提供加值功能，透過輸入「功能兌換券」代碼，就能讓原本的帳號多一項隱藏版功能，例如：專案數增加、Line 程式積木、影像辨識積木…等。</p>
<ul>
<li><p>實作流程<br>首先，進入 Webduino 雲端平台，註冊帳號並登入：<code>https://cloud.webduino.io/</code><br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210225154414.png" alt="20210225154414"></p>
<p>接著，點選 Blockly 程式積木<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210225154448.png" alt="20210225154448"></p>
<p>並於畫面右上角點選「兌換券按鈕」<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210225154927.png" alt="20210225154927"></p>
<p>輸入兌換券序號後，按下確定<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210225155016.png" alt="20210225155016"></p>
<p>兌換卷序號:  1902437108<br>提供 「氣象資料擷取積木」與 「Google 試算表加強版: SpreadSheet」。</p>
</li>
</ul>
<h4 id="6-2-影像分類-搭配後端影像訓練平台，將訓練好的影像模型直接套用在積木上使用"><a href="#6-2-影像分類-搭配後端影像訓練平台，將訓練好的影像模型直接套用在積木上使用" class="headerlink" title="6.2. 影像分類: 搭配後端影像訓練平台，將訓練好的影像模型直接套用在積木上使用"></a>6.2. 影像分類: 搭配後端影像訓練平台，將訓練好的影像模型直接套用在積木上使用</h4><ul>
<li><p>影像辨識積木<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210225155832.png" alt="20210225155832"></p>
</li>
<li><p>訓練模型</p>
<ol>
<li><p>收集大量訓練用的照片，並加以分類<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210225160447.png" alt="20210225160447"></p>
<blockquote>
<p>新增資料集 =&gt; 資料集名稱: dataset0 =&gt; 上傳  Webcam 影像 =&gt; 擷取影像 =&gt; 上傳</p>
</blockquote>
</li>
<li><p>訓練資料管理 - 新增剪刀、石頭、步資料集<br>2.1. 新增剪刀資料集<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye11.png" alt="20210225160447"><br>2.2. 新增石頭資料集，方法同上。<br>2.3. 新增步資料集，方法同上。</p>
<p>完成後，如下圖:<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye12.png" alt="20210225160447"></p>
</li>
<li><p>建立影像識別模型<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye13.png" alt="20210225160447"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye14.png" alt="20210225160447"></p>
<p><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/webeye15.png" alt="20210225160447"></p>
</li>
</ol>
</li>
<li><p>使用 Webeye 時</p>
<p>要啟動 camera，需兌換「人臉辨識+情緒感知」卷，才有積木功能。</p>
</li>
</ul>
<h4 id="6-3-人臉辨識-可偵測人臉特徵值，直接套用在積木上使用"><a href="#6-3-人臉辨識-可偵測人臉特徵值，直接套用在積木上使用" class="headerlink" title="6.3. 人臉辨識: 可偵測人臉特徵值，直接套用在積木上使用"></a>6.3. 人臉辨識: 可偵測人臉特徵值，直接套用在積木上使用</h4><ul>
<li><p>人臉積木範例</p>
<p>載入人臉模型後，啟動影像來源 (WebCam 或 WebEye)，每秒一次取得人臉特徵</p>
</li>
</ul>
<h4 id="6-4-情緒辨識-可偵測情緒，直接-套用在積木上使用"><a href="#6-4-情緒辨識-可偵測情緒，直接-套用在積木上使用" class="headerlink" title="6.4. 情緒辨識: 可偵測情緒，直接 套用在積木上使用"></a>6.4. 情緒辨識: 可偵測情緒，直接 套用在積木上使用</h4><p>更詳細使用方式請參考<a href="https://docs.google.com/presentation/d/1QOBeUtaaU6M3H6Y8gqbgk33zAGgML2Rwg8LldE99l-w/edit#slide=id.g5f979813d1_0_356">簡報教學</a></p>
<hr>
<h2 id="使用兌換券-領取與添加新功能"><a href="#使用兌換券-領取與添加新功能" class="headerlink" title="使用兌換券 (領取與添加新功能)"></a>使用兌換券 (領取與添加新功能)</h2><p>Webduino 除了原有的服務，額外提供加值功能，透過輸入「功能兌換券」代碼，就能讓原本的帳號多一項隱藏版功能，例如：專案數增加、Line 程式積木、影像辨識積木…等。</p>
<h3 id="1-實作流程"><a href="#1-實作流程" class="headerlink" title="1. 實作流程"></a>1. 實作流程</h3><p>首先，進入 Webduino 雲端平台，註冊帳號並登入：<code>https://cloud.webduino.io/</code><br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210221133023.png" alt="登入 Cloud 雲端平台"></p>
<p>接著，點選 Blockly 程式積木<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210221133051.png" alt="點選 Blockly 程式積木"></p>
<p>並於畫面右上角點選「兌換券按鈕」<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210221133115.png" alt="點選兌換券"></p>
<p>輸入增加專案數序號後，按下確定<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210221133140.png" alt="輸入增加專案數序號"></p>
<p>專案數將從原本的 20 個，增加為 50 個<br><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/20210221133158.png" alt="專案數增加"></p>
<p>相關參考<br>Webduino 雲端平台：<a href="https://tutorials.webduino.io/zh-tw/docs/cloud/index.html">基本介紹</a></p>
<h2 id="連動多塊開發版"><a href="#連動多塊開發版" class="headerlink" title="連動多塊開發版"></a>連動多塊開發版</h2><ol>
<li><p>首先把開發板的積木放到畫面當中，注意在開發板的積木後方有個可勾選的項目「串聯」，將有需要連動的開發板，就勾選串連，放入「當開發板串連完成後執行」的積木，我們將要執行的事件放在缺口內，如此一來就可以確保開發板都上線完成後才會執行。</p>
<blockquote>
<p>注意，只要有勾選串連的開發板，就一定要使用串連完成的積木。</p>
</blockquote>
<p><a data-fancybox="gallery" href="hhttps://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/multi-board-01.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/multi-board-01_s.jpg" class="nofancybox  img-center"></a></p>
</li>
<li><p>把偵測 RFID 的邏輯積木放在「串連完成後執行」的缺口內，當值等於 <code>8C7DDD32</code> ，LED 就會亮起，當不是，LED 就會熄滅。</p>
<p><a data-fancybox="gallery" href="hhttps://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/multi-board-02.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/multi-board-02_s.jpg" class="nofancybox  img-center"></a></p>
</li>
</ol>
<h2 id="使用者自定義函式"><a href="#使用者自定義函式" class="headerlink" title="使用者自定義函式"></a>使用者自定義函式</h2><p><strong>流程</strong>，在程式碼裡面就是 <code>function</code>，在寫程式的時候，常常會遇到需要重複執行的程式碼，這些重複的程式碼可能從十幾行道幾百行不等，如果每重複一次都得重寫一次，勢必會造成不小的困擾，所以我們可以設定一個流程，並在這個流程中寫入對應程式碼，如此一來，當我們需要重複用到這些程式碼的時候，只要呼叫這段流程，就可以重複執行對應的程式。</p>
<p>官網介紹: <code>https://tutorials.webduino.io/zh-tw/docs/blockly/standard/functions.html</code></p>
<h2 id="自訂積木"><a href="#自訂積木" class="headerlink" title="[自訂積木]"></a>[自訂積木]</h2><h3 id="1-法蘭斯自訂積木清單"><a href="#1-法蘭斯自訂積木清單" class="headerlink" title="1. 法蘭斯自訂積木清單"></a>1. 法蘭斯自訂積木清單</h3><p><code>https://github.com/fustyles/webduino/blob/master/CustomBlock.txt</code></p>
<h3 id="2-增加本功能之操作"><a href="#2-增加本功能之操作" class="headerlink" title="2. 增加本功能之操作"></a>2. 增加本功能之操作</h3><p>左下角齒輪 -&gt; 積木[使用自有積木] -&gt; 匯入</p>
<p>自訂積木: <code>https://fustyles.github.io/webduino/EDU_addCustomBlocks/blockly.json</code></p>
<h3 id="3-各種應用"><a href="#3-各種應用" class="headerlink" title="3. 各種應用"></a>3. 各種應用</h3><h4 id="人臉辨識-tfjs-face-api-js"><a href="#人臉辨識-tfjs-face-api-js" class="headerlink" title="人臉辨識 (tfjs face-api.js)"></a>人臉辨識 (tfjs face-api.js)</h4><ul>
<li><p>說明<br>使用face-api.js (TensorFlow.js)卷積神經網絡（CNN）開發的Webduino自訂積木程式，可擷取人臉128 個值的特徵向量經分類器(如歐氏距離)辨識影像當中的人臉相似度的距離。可應用於機場出入關、智慧型手機解鎖、上下班打卡、智慧ATM、智慧住宅等。</p>
<blockquote>
<p>參考資料： <code>https://omnixri.blogspot.com/2020/12/ai.html</code></p>
</blockquote>
</li>
<li><p>匯入網址: <code>https://fustyles.github.io/webduino/faceapi_recognize_20201012/blockly.json</code></p>
</li>
<li><p>積木範例: <code>https://blocklypro.webduino.io/#XJLeox51d8</code></p>
</li>
</ul>
<ol>
<li><p>比對照片資料夾格式參考:</p>
<ul>
<li>github: <code>"https://fustyles.github.io/webduino/faceapi_20200402/facelist/"</code></li>
<li>本機端:  <code>webduino/faceapi_20200402/facelist/</code></li>
</ul>
</li>
<li><p>下載模型資料夾放在</p>
<ul>
<li>github: <code>"https://fustyles.github.io/webduino/faceapi_20200402/"</code></li>
<li>本機網站上執行: webduino/faceapi_20200402/</li>
</ul>
</li>
</ol>
<h4 id="全身辨識-MediaPipe-Holistic"><a href="#全身辨識-MediaPipe-Holistic" class="headerlink" title="全身辨識 (MediaPipe Holistic)"></a>全身辨識 (MediaPipe Holistic)</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/holistic_20201012/blockly.json</code></li>
</ul>
<h4 id="Google-試算表-SQL-語法查詢"><a href="#Google-試算表-SQL-語法查詢" class="headerlink" title="Google 試算表 SQL 語法查詢"></a>Google 試算表 SQL 語法查詢</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/SpreadsheetSQL_20210403/blockly.json</code></li>
</ul>
<h4 id="Barcode-辨識"><a href="#Barcode-辨識" class="headerlink" title="Barcode 辨識"></a>Barcode 辨識</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/barcode_20210216/blockly.json</code></li>
</ul>
<h4 id="QR-code-辨識-instascan"><a href="#QR-code-辨識-instascan" class="headerlink" title="QR code 辨識 (instascan)"></a>QR code 辨識 (instascan)</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/instascan.js_20201012/blockly.json</code></li>
</ul>
<h4 id="文字辨識-tesseract-js"><a href="#文字辨識-tesseract-js" class="headerlink" title="文字辨識 (tesseract.js)"></a>文字辨識 (tesseract.js)</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/tesseract.js_20201012/blockly.json</code></li>
</ul>
<h4 id="臉部偵測-Tracking-js"><a href="#臉部偵測-Tracking-js" class="headerlink" title="臉部偵測 (Tracking.js)"></a>臉部偵測 (Tracking.js)</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/trackingface_20201012/blockly.json</code></li>
</ul>
<h4 id="顏色偵測-Tracking-js"><a href="#顏色偵測-Tracking-js" class="headerlink" title="顏色偵測 (Tracking.js)"></a>顏色偵測 (Tracking.js)</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/trackingcolor_20201012/blockly.json</code></li>
</ul>
<h4 id="深度學習-tfjs-KNN-Classifier"><a href="#深度學習-tfjs-KNN-Classifier" class="headerlink" title="深度學習 (tfjs KNN-Classifier)"></a>深度學習 (tfjs KNN-Classifier)</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/knn-classifier_20201012/blockly.json</code></li>
</ul>
<h4 id="臉部偵測-tfjs-face-api-js"><a href="#臉部偵測-tfjs-face-api-js" class="headerlink" title="臉部偵測 (tfjs face-api.js)"></a>臉部偵測 (tfjs face-api.js)</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/faceapi_detect_20201012/blockly.json</code></li>
</ul>
<h4 id="姿態偵測-tfjs-posenet"><a href="#姿態偵測-tfjs-posenet" class="headerlink" title="姿態偵測 (tfjs posenet)"></a>姿態偵測 (tfjs posenet)</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/posenet_20201012/blockly.json</code></li>
</ul>
<h4 id="臉部偵測-tfjs-blazeface"><a href="#臉部偵測-tfjs-blazeface" class="headerlink" title="臉部偵測 (tfjs blazeface)"></a>臉部偵測 (tfjs blazeface)</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/Blazeface_20201012/blockly.json</code></li>
</ul>
<h4 id="物件偵測-Microsoft-Azure-Custom-Vision"><a href="#物件偵測-Microsoft-Azure-Custom-Vision" class="headerlink" title="物件偵測 (Microsoft Azure Custom Vision)"></a>物件偵測 (Microsoft Azure Custom Vision)</h4><ul>
<li><p>匯入網址: <code>https://fustyles.github.io/webduino/Azure_ClassifyImage_20190901/blockly.json</code></p>
</li>
<li><p>積木: 進階功能 &gt; 自訂視覺</p>
<p><a data-fancybox="gallery" href="hhttps://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/Azure_Custom_Vision.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/Azure_Custom_Vision_s.jpg" class="nofancybox  img-center"></a></p>
</li>
</ul>
<h4 id="物件偵測-tfjs-coco-ssd"><a href="#物件偵測-tfjs-coco-ssd" class="headerlink" title="物件偵測 (tfjs coco-ssd)"></a>物件偵測 (tfjs coco-ssd)</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/coco-ssd_20201012/blockly.json</code></li>
</ul>
<h4 id="物件偵測-tfjs-mobilenet-20201012"><a href="#物件偵測-tfjs-mobilenet-20201012" class="headerlink" title="物件偵測 (tfjs mobilenet_20201012)"></a>物件偵測 (tfjs mobilenet_20201012)</h4><ul>
<li>匯入網址: <code>https://fustyles.github.io/webduino/mobilenet_20201012/blockly.json</code></li>
</ul>
<h4 id="機器學習-tfjs-teachable-machine"><a href="#機器學習-tfjs-teachable-machine" class="headerlink" title="機器學習 (tfjs teachable machine)"></a>機器學習 (tfjs teachable machine)</h4><ul>
<li><p>匯入網址: <code>https://fustyles.github.io/webduino/teachablemachine_20201012/blockly.json</code></p>
</li>
<li><p>積木: 進階功能 &gt; 機器學習 (自訂模型)</p>
<p><a data-fancybox="gallery" href="hhttps://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/teachablemachine.jpg"><img src="https://cdn.jsdelivr.net/gh/allen-5183/blog.allen5183.synology.me/images/teachablemachine_s.jpg" class="nofancybox  img-center"></a></p>
</li>
</ul>
<p>####</p>
<ul>
<li>匯入網址: ``</li>
</ul>
<p>####</p>
<ul>
<li>匯入網址: ``</li>
</ul>
<p>####</p>
<ul>
<li>匯入網址: ``</li>
</ul>
<p>####</p>
<ul>
<li>匯入網址: ``</li>
</ul>
<p>####</p>
<ul>
<li>匯入網址: ``</li>
</ul>
<p>####</p>
<ul>
<li>匯入網址: ``</li>
</ul>
<p>####</p>
<ul>
<li>匯入網址: ``</li>
</ul>
<p>####</p>
<ul>
<li>匯入網址: ``</li>
</ul>
<p>####</p>
<ul>
<li>匯入網址: ``</li>
</ul>
<p>####</p>
<ul>
<li>匯入網址: ``</li>
</ul>
<p>####</p>
<ul>
<li>匯入網址: ``</li>
</ul>
<p><a href="https://teachablemachine.withgoogle.com/models/yz3DC_pki/">https://teachablemachine.withgoogle.com/models/yz3DC_pki/</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>webdunio</category>
      </categories>
      <tags>
        <tag>webdunio</tag>
      </tags>
  </entry>
</search>
